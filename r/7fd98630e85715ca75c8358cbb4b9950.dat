function downloadFile(format, type, objectName){
	var exportContent = '';
	var exportJson = {};
	var firstDate = 9999999999999;
	var lastDate = 0;
	var currentTimestamp = new Date();
	currentTimestamp /= 1000;
	if(type=="global"){
		$.getJSON('/api.minerstat.com/v2/stats-global/' + workerToken + '?timezone=' + workerTimezone, function(data){
			var coins = {};
			$.each(data["global"], function(timestamp, coinsList){
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
			});
			$.each(data["daily"], function(timestamp, value){
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				exportJson[timestamp]["totalUSD"] = parseFloat(value.toFixed(3));
				exportJson[timestamp]["total" + currency] = parseFloat((value*currencyValue).toFixed(3));
			});
			$.each(data["daily_coins"], function(timestamp, coinsList){
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				$.each(coinsList, function(coin, values){
					coins[coin] = 1;
					exportJson[timestamp][coin] = parseFloat((values[2]/values[1]).toFixed(10));
				});
			});
			var coinsConsumptions = {};
			$.each(data["coins"], function(coin, coinData){
				$.each(coinData, function(timestamp, values){
					if(coinsConsumptions[getDayTimestamp(parseInt(timestamp))]==null){
						coinsConsumptions[getDayTimestamp(parseInt(timestamp))] = {};
					}
					if(coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin]==null){
						coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin] = [];
						coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin][0] = 0;
						coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin][1] = 0;
					}
					coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin][0] += parseInt(values[3]);
					coinsConsumptions[getDayTimestamp(parseInt(timestamp))][coin][1] += 1;
				});
			});
			$.each(coinsConsumptions, function(timestamp, timestampData){
				var sumWattNum = 0;
				$.each(timestampData, function(coin, values){
					var consumptionTemp = 0;
					if(values[1]>0){
						consumptionTemp = values[0]/values[1];
					}
					sumWattNum += consumptionTemp;
					exportJson[timestamp][coin + ' - W'] = consumptionTemp;
				});
				exportJson[timestamp]['totalWatt'] = Math.round(sumWattNum);
			});
			
			if(format=="csv"){
				exportContent += 'Global statistics by minerstat' + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Day' + colDel + 'Total (USD)' + colDel + 'Total (' + currency + ')' + colDel + 'Total (W)' + colDel;
				$.each(coins, function(coin, value){
					exportContent += 'Avg. amount of ' + coin + colDel + 'Avg. consumption of ' + coin + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDate(timestamp) + colDel + values["totalUSD"] + colDel + values["total" + currency] + colDel + values["totalWatt"] + colDel;
					$.each(coins, function(coin, value){
						exportContent += values[coin] + colDel + Math.round(values[coin + ' - W']) + colDel;
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, "Global-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, "Global-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsGlobal (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` date NOT NULL, `dataTotal` FLOAT NOT NULL, `dataTotalCurrency` varchar(5) NOT NULL, `dataTotalCustom` FLOAT NOT NULL, `dataTotalCustomCurrency` varchar(5) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					var coinsSqlJson = {};
					$.each(coins, function(coin, value){
						coinsSqlJson[coin] = values[coin];
					});
					exportContent += "INSERT INTO minerstatStatisticsGlobal (`dataDate`, `dataTotal`, `dataTotalCurrency`, `dataTotalCustom`, `dataTotalCustomCurrency`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), " + values["totalUSD"] + ", 'USD', " + values["total" + currency] + ", '" + currency + "', '" + JSON.stringify(coinsSqlJson) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, "Global-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
		});	
	}else if(type=="perworker"){
		$.getJSON('/api.minerstat.com/v2/stats-global/' + workerToken + '?timezone=' + workerTimezone, function(data){
			var workers = {};
			$.each(data["global"], function(timestamp, coinsList){
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
			});
			$.each(data["daily"], function(timestamp, value){
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				exportJson[timestamp]["totalUSD"] = parseFloat(value.toFixed(3));
				exportJson[timestamp]["total" + currency] = parseFloat((value*currencyValue).toFixed(3));
			});
			$.each(data["daily_workers"], function(timestamp, workersList){
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				$.each(workersList, function(worker, value){
					workers[worker] = 1;
					exportJson[timestamp][worker] = parseFloat(value.toFixed(3));
				});
			});
			if(format=="csv"){
				exportContent += 'Worker statistics by minerstat' + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Day' + colDel + 'Total (USD)' + colDel + 'Total (' + currency + ')' + colDel;
				$.each(workers, function(worker, value){
					exportContent += 'Avg. ' + worker + " (USD)" + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDate(timestamp) + colDel + values["totalUSD"] + colDel + values["total" + currency] + colDel;
					$.each(workers, function(worker, value){
						if (values[worker]==null) values[worker] = 0;
						exportContent += values[worker] + colDel;
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, "Worker-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, "Worker-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorker (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` date NOT NULL, `dataTotal` FLOAT NOT NULL, `dataTotalCurrency` varchar(5) NOT NULL, `dataTotalCustom` FLOAT NOT NULL, `dataTotalCustomCurrency` varchar(5) NOT NULL, `dataWorkersJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					var workersSqlJson = {};
					$.each(workers, function(worker, value){
						workersSqlJson[worker] = values[worker];
					});
					exportContent += "INSERT INTO minerstatStatisticsWorker (`dataDate`, `dataTotal`, `dataTotalCurrency`, `dataTotalCustom`, `dataTotalCustomCurrency`, `dataWorkersJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), " + values["totalUSD"] + ", 'USD', " + values["total" + currency] + ", '" + currency + "', '" + JSON.stringify(workersSqlJson) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, "Worker-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
		});
	}else if(type=="group-profitability"){
		$('#groupsDataLoader').show();
	
		$.getJSON('/api.minerstat.com/v2/stats-global/' + workerToken + '?timezone=' + workerTimezone, function(data){
			var allGroupsData = jQuery.parseJSON(allGroups);
			var workers = {};

			$.each(data["daily_workers"], function(timestamp, workersList){
				
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
				
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				$.each(workersList, function(worker, value){
					if(jQuery.inArray(worker, allGroupsData[objectName] )!=-1){
						workers[worker] = 1;
						exportJson[timestamp][worker] = parseFloat(value.toFixed(3));
						
						if(exportJson[timestamp]["totalUSD"]==null) exportJson[timestamp]["totalUSD"] = 0;
						if(exportJson[timestamp]["total" + currency]==null) exportJson[timestamp]["total" + currency] = 0;
						exportJson[timestamp]["totalUSD"] += parseFloat(value.toFixed(3));
						exportJson[timestamp]["total" + currency] += parseFloat((value*currencyValue).toFixed(3));
						
					}
				});
			});
			
			if(format=="csv"){
				exportContent += 'Group statistics by minerstat' + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Day' + colDel + 'Total (USD)' + colDel + 'Total (' + currency + ')' + colDel;
				$.each(workers, function(worker, value){
					exportContent += 'Avg. ' + worker + " (USD)" + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDate(timestamp) + colDel + values["totalUSD"] + colDel + values["total" + currency] + colDel;
					$.each(workers, function(worker, value){
						if (values[worker]==null) values[worker] = 0;
						exportContent += values[worker] + colDel;
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorker (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` date NOT NULL, `dataTotal` FLOAT NOT NULL, `dataTotalCurrency` varchar(5) NOT NULL, `dataTotalCustom` FLOAT NOT NULL, `dataTotalCustomCurrency` varchar(5) NOT NULL, `dataWorkersJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					var workersSqlJson = {};
					$.each(workers, function(worker, value){
						workersSqlJson[worker] = values[worker];
					});
					exportContent += "INSERT INTO minerstatStatisticsWorker (`dataDate`, `dataTotal`, `dataTotalCurrency`, `dataTotalCustom`, `dataTotalCustomCurrency`, `dataWorkersJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), " + values["totalUSD"] + ", 'USD', " + values["total" + currency] + ", '" + currency + "', '" + JSON.stringify(workersSqlJson) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
			$('#groupsDataLoader').hide();
		});
	}else if(type=="group-hashrate"){
		$('#groupsDataLoader').show();
		var allGroupsData = jQuery.parseJSON(allGroups);
		var allWorkers = allGroupsData[objectName];
		var workersCount = allWorkers.length;
		var workers = {};
		$.each(allWorkers, function(workerIndex, worker){
			$.getJSON('/api.minerstat.com/v2/stats-daily-hashrate/' + workerToken + '/' + worker + '?timezone=' + workerTimezone, function(data){
				
				$.each(data, function(crypto, cryptoData){
					$.each(cryptoData, function(timestamp, timestampData){
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						if (exportJson[timestamp]==null) exportJson[timestamp] = {};
						if (exportJson[timestamp][worker]==null) exportJson[timestamp][worker] = {};
						
						workers[worker] = 1;
						if(timestampData["count"]>0){
							exportJson[timestamp][worker][crypto] = toUnit(toHashes(timestampData["sum"]/timestampData["count"], timestampData["unit"] + '/s'));
						}else{
							exportJson[timestamp][worker][crypto] = 0;
						}						
					});
				});
				
				workersCount--;
				if (workersCount==0){
					if(format=="csv"){
						exportContent += 'Group statistics by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
						exportContent += rowDel;
						exportContent += 'Day' + colDel;
						$.each(workers, function(worker, value){
							exportContent += 'Avg. ' + worker + "" + colDel;
						});
						exportContent += rowDel;
						$.each(exportJson, function(timestamp, timestampData){
							exportContent += generateDate(timestamp) + colDel;
							$.each(timestampData, function(worker, workerData){
								var displayWorker = '';
								$.each(workerData, function(crypto, cryptoData){
									if(cryptoData!=0){
										displayWorker += crypto + ': ' + cryptoData + ' | ';
									}
								});
								if(displayWorker!=''){
									displayWorker = displayWorker.substr(0,displayWorker.length - 3);
								}
								exportContent += displayWorker + colDel;
							});
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorker (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` date NOT NULL, `dataWorkersJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(timestamp, timestampData){
							var workersSqlJson = {};
							$.each(timestampData, function(worker, workerData){
								var displayWorker = '';
								$.each(workerData, function(crypto, cryptoData){
									if(cryptoData!=0){
										displayWorker += crypto + ': ' + cryptoData + ' | ';
									}
								});
								if(displayWorker!=''){
									displayWorker = displayWorker.substr(0,displayWorker.length - 3);
								}
								workersSqlJson[worker] = displayWorker;
							});
							exportContent += "INSERT INTO minerstatStatisticsWorker (`dataDate`, `dataWorkersJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + JSON.stringify(workersSqlJson) + "');\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, objectName + "-group-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
					}
					$('#groupsDataLoader').hide();
				}
			});
		});
	}else if(type=="group-hashrate-all"){
		
		$('#groupsDataLoader').show();
		
		var allWorkersListJson = jQuery.parseJSON(allWorkersList);	
		var coins = {};
		var coinUnits = {};
		var workerUnits = {};
		var coinAlgos = {};
		var coinAlgosUnits = {};
		var workerAlgos = {};
		var exportJsonTemp = {};
		var exportJsonPower = {};
		var exportJsonTotal = {};
		var exportJsonAlgos = {};
		var allGroupsDataFinal = [];
		var allGroupsDataFinalAlgos = {};
		var allWorkersCount = allWorkersListJson.length;
		
		var allGroupsData = jQuery.parseJSON(allGroups);
		
		var i = 0;

		$.each(allWorkersListJson, function (workerIndex, workerName){
			$.getJSON('/api.minerstat.com/v2/stats-hashtemp/' + workerToken + '/' + workerName + '?timezone=' + workerTimezone, function(data){
				
				var group = '';
				$.each(allGroupsData, function (groupName, workersList){
					$.each(workersList, function (workersListIndex, workersListName){
						if(workersListName==workerName){
							group = groupName;
							return;
						}
					});
				});
				
				if(group!=''){
					
					if(!allGroupsDataFinal.includes(group)){
						allGroupsDataFinal.push(group);
						allGroupsDataFinalAlgos[group] = [];
					}

					$.each(data["resultsHash"], function (coin, values){
						if(coin!='' && coin!='NO'){
							coins[coin] = 1;
							
							if(data["units"][coin]=='Sol'){
								data["units"][coin] = 'H';
							}
							
							$.each(values, function (index, hashrate){
								var timestamp = hashrate[0]*100;
								if (timestamp>lastDate) lastDate = timestamp;
								if (timestamp<firstDate) firstDate = timestamp;
								
								if (exportJsonTemp[getDayTimestamp(timestamp)]==null) exportJsonTemp[getDayTimestamp(timestamp)] = {};
								if (exportJsonTemp[getDayTimestamp(timestamp)][group]==null) exportJsonTemp[getDayTimestamp(timestamp)][group] = {};
								if (exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]]==null) exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]] = {};
								if(exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]][workerName]==null){ exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]][workerName] = [0,0,0]; }
								exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]][workerName][0] += hashrate[1];
								exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]][workerName][1] += 1;
								exportJsonTemp[getDayTimestamp(timestamp)][group][data["algos"][coin]][workerName][2] = data["units"][coin];
								
								if(!allGroupsDataFinalAlgos[group].includes(data["algos"][coin])){
									allGroupsDataFinalAlgos[group].push(data["algos"][coin]);
								}
							});	
						}				
					});

					$.each(data["resultsPower"], function (timestamp, powerData){
							var timestamp = powerData[0]*100;
							if (timestamp>lastDate) lastDate = timestamp;
							if (timestamp<firstDate) firstDate = timestamp;
							
							if (exportJsonPower[getDayTimestamp(timestamp)]==null) exportJsonPower[getDayTimestamp(timestamp)] = {};
							if (exportJsonPower[getDayTimestamp(timestamp)][group]==null) exportJsonPower[getDayTimestamp(timestamp)][group] = {};
							if (exportJsonPower[getDayTimestamp(timestamp)][group][workerName]==null) exportJsonPower[getDayTimestamp(timestamp)][group][workerName] = {};
							if (exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerSum']==null) exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerSum'] = 0;
							if (exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerCount']==null) exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerCount'] = 0;
							exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerSum'] += powerData[1];				
							exportJsonPower[getDayTimestamp(timestamp)][group][workerName]['powerCount'] += 1;				
					});
				
				}
				
				i++;
				if(allWorkersCount == i){
					
					allGroupsDataFinal.sort();
					
					$.each(exportJsonTemp, function (timestamp, timestampData){
						$.each(timestampData, function (groupName, groupData){
							$.each(groupData, function (algo, algoData){
								$.each(algoData, function (workerName, workerData){
								
									if(exportJson[timestamp]==null) exportJson[timestamp] = {};
									if(exportJson[timestamp][groupName]==null) exportJson[timestamp][groupName] = {};
									if(exportJson[timestamp][groupName][algo]==null) exportJson[timestamp][groupName][algo] = {};
									if(workerData[1]>0){
										if(exportJson[timestamp][groupName][algo]['hashrate']==null) exportJson[timestamp][groupName][algo]['hashrate'] = 0;
										exportJson[timestamp][groupName][algo]['hashrate'] += toHashes(parseFloat(workerData[0]/workerData[1]), workerData[2] + '/s');											
									}
									if(exportJson[timestamp][groupName][algo]['power']==null) exportJson[timestamp][groupName][algo]['power'] = 0;
									exportJson[timestamp][groupName][algo]['power'] += Math.round(exportJsonPower[timestamp][groupName][workerName]['powerSum']/exportJsonPower[timestamp][groupName][workerName]['powerCount']);
								});

							});
						});
					});
					
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (groupName, groupData){
							$.each(groupData, function (algo, algoData){
								exportJson[timestamp][groupName][algo]['hashrate'] = toUnit(exportJson[timestamp][groupName][algo]['hashrate']);
							});
						});
					});

					if(format=="csv"){
						exportContent += 'Daily average hashrate group statistics by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
						exportContent += rowDel;
						exportContent += 'Date' + colDel;
						$.each(allGroupsDataFinal, function (groupIndex, groupName){
							$.each(allGroupsDataFinalAlgos[groupName], function (algoIndex, algoName){
								exportContent += groupName + " " + algoName + " hashrate" + colDel + colDel + groupName + " " + algoName + " power" + colDel + colDel + colDel;
							});
						});
						exportContent += rowDel;
						$.each(exportJson, function(timestamp, timestampData){
							exportContent += generateDateSimple(timestamp) + colDel;
							$.each(allGroupsDataFinal, function(groupIndex, groupName){
								$.each(allGroupsDataFinalAlgos[groupName], function (algoIndex, algoName){
									if(typeof exportJson[timestamp][groupName]!='undefined' && typeof exportJson[timestamp][groupName][algoName]!='undefined' && typeof exportJson[timestamp][groupName][algoName]['hashrate']!='undefined'){
										
										var hashrateVal = exportJson[timestamp][groupName][algoName]['hashrate'].split(" ")[0];
										var hashrateUnit = exportJson[timestamp][groupName][algoName]['hashrate'].split(" ")[1];
										var hashratePower = exportJson[timestamp][groupName][algoName]['power'];
										var hashratePowerUnit = 'W';
										
										if(hashrateVal==0){
											hashrateVal = '';
											hashrateUnit = '';
											hashratePower = '';
											hashratePowerUnit = '';
										}
										
										if(hashratePower==0){
											hashratePower = '';
											hashratePowerUnit = '';
										}
										
										exportContent +=  hashrateVal + colDel + hashrateUnit + colDel + hashratePower + colDel + hashratePowerUnit + colDel + colDel;
									}else{
										exportContent += '' 		  + colDel + '' 		  + colDel + '' 		   + colDel + '' 				+ colDel + colDel;
									}
								});
							});
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-group-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-group-statistics-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersHashrate (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL, `dataGroupJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(timestamp, values){
							exportContent += "INSERT INTO minerstatStatisticsWorkersHashrate (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + JSON.stringify(values) + "');\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-group-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
					}
					$('#groupsDataLoader').hide();
				}
			})
		});
		
		
	}else if(type=="balance"){
		$.getJSON('/api.minerstat.com/v2/stats-balance/' + workerToken + '?timezone=' + workerTimezone, function(data){
			if (data!='' && data["error"] == null){
				var poolsInitial = data["pools"];
				var walletsInitial = data["wallets"];
				var pools = {};
				var wallets = {};
				var coinsExchangeRates = {};
				
				// Order data seperately by pools
				$.each(poolsInitial, function (timestamp, poolsList){
					$.each(poolsList, function (pool, coinsList){
						if (pools[pool]==null) pools[pool] = {};
						pools[pool][timestamp] = coinsList;
						$.each(coinsList, function (coin, value){
							coinsExchangeRates[coin] = 0;
						});	
					});
				});

				// Order data seperately by wallets
				$.each(walletsInitial, function (timestamp, walletsList){
					$.each(walletsList, function (wallet, coinsList){
						if (wallets[wallet]==null) wallets[wallet] = {};
						wallets[wallet][timestamp] = coinsList;
						$.each(coinsList, function (coin, value){
							coinsExchangeRates[coin] = 0;
						});
					});
				});
				
				$.getJSON('/market-cap?data', function(marketCap){
					$.each(marketCap, function(index, cc){
						$.each(coinsExchangeRates, function (coin, value){
							if(cc["symbol"].replace('$','') == coin){			
								coinsExchangeRates[coin] = parseFloat(cc["price"]);
							}
						});
					});
					
					var poolsCompact = {};
					$.each(pools, function (pool, poolData){
						if(poolsCompact[pool]==null){ poolsCompact[pool] = {}; }
						$.each(poolData, function (timestamp, coinsList){
							if(poolsCompact[pool][getDayTimestamp(parseInt(timestamp))]==null){ poolsCompact[pool][getDayTimestamp(parseInt(timestamp))] = {}; }
							$.each(coinsList, function (coin, value){
								poolsCompact[pool][getDayTimestamp(parseInt(timestamp))][coin] = value;
							});
						});
					});

					$.each(poolsCompact, function (pool, poolData){
						$.each(poolData, function (timestamp, coinsList){
							if (timestamp>lastDate) lastDate = timestamp;
							if (timestamp<firstDate) firstDate = timestamp;
							if(exportJson[timestamp]==null){ exportJson[timestamp] = {}; }
							$.each(coinsList, function (coin, value){
								if(exportJson[timestamp][coin]==null){ exportJson[timestamp][coin] = 0; }
								exportJson[timestamp][coin] += value;
							});
						});				
					});
					
					var walletsCompact = {};
					$.each(wallets, function (wallet, walletData){
						if(walletsCompact[wallet]==null){ walletsCompact[wallet] = {}; }
						$.each(walletData, function (timestamp, coinsList){
							if(walletsCompact[wallet][getDayTimestamp(parseInt(timestamp))]==null){ walletsCompact[wallet][getDayTimestamp(parseInt(timestamp))] = {}; }
							$.each(coinsList, function (coin, value){
								walletsCompact[wallet][getDayTimestamp(parseInt(timestamp))][coin] = value;
							});
						});
					});

					$.each(walletsCompact, function (wallet, walletData){
						$.each(walletData, function (timestamp, coinsList){
							if (timestamp>lastDate) lastDate = timestamp;
							if (timestamp<firstDate) firstDate = timestamp;
							if(exportJson[timestamp]==null){ exportJson[timestamp] = {}; }
							$.each(coinsList, function (coin, value){
								if(exportJson[timestamp][coin]==null){ exportJson[timestamp][coin] = 0; }
								exportJson[timestamp][coin] += value;
							});
						});				
					});

					$.each(exportJson, function (timestamp, timestampData){
						var totalUSD = 0;
						$.each(timestampData, function (coin, coinsData){
							totalUSD += coinsData*coinsExchangeRates[coin];
						});
						exportJson[timestamp]["totalUSD"] = totalUSD;
						if(currency!='USD'){
							exportJson[timestamp]["total" + currency] = totalUSD*currencyValue;
						}
					});

					if(format=="csv"){
						exportContent += 'Balance statistics by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
						exportContent += rowDel;
						exportContent += 'Day' + colDel + 'Total (USD)' + colDel;
						if(currency!='USD'){
							exportContent += 'Total (' + currency + ')' + colDel;
						}
						$.each(coinsExchangeRates, function(coin, value){
							exportContent += 'Total ' + coin + " at the end of the day" + colDel;
						});
						exportContent += rowDel;
						$.each(exportJson, function(timestamp, values){
							exportContent += generateDate(timestamp) + colDel + values["totalUSD"] + colDel;
							if(currency!='USD'){
								exportContent += values["total" + currency] + colDel;
							}
							$.each(coinsExchangeRates, function(coin, value){
								if (values[coin]==null) values[coin] = 0;
								exportContent += values[coin] + colDel;
							});
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, "Balance-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, "Balance-statistics-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsBalance (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` date NOT NULL, `dataTotal` FLOAT NOT NULL, `dataTotalCurrency` varchar(5) NOT NULL, `dataTotalCustom` FLOAT NOT NULL, `dataTotalCustomCurrency` varchar(5) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(timestamp, values){
							var coinsSqlJson = {};
							$.each(coinsExchangeRates, function(coin, value){
								coinsSqlJson[coin] = values[coin];
							});
							exportContent += "INSERT INTO minerstatStatisticsBalance (`dataDate`, `dataTotal`, `dataTotalCurrency`, `dataTotalCustom`, `dataTotalCustomCurrency`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), " + values["totalUSD"] + ", 'USD', " + values["total" + currency] + ", '" + currency + "', '" + JSON.stringify(coinsSqlJson) + "');\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, "Balance-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
					}
				});
			}
		});
	}else if(type=="balance-changes"){
		$.getJSON('/api.minerstat.com/v2/stats-balance/' + workerToken + '?timezone=' + workerTimezone, function(data){
			if (data!='' && data["error"] == null){
				var poolsInitial = data["pools"];
				var walletsInitial = data["wallets"];
				var pools = {};
				var wallets = {};
				var coinsExchangeRates = {};
				var events = [];
				
				// Order data seperately by pools
				$.each(poolsInitial, function (timestamp, poolsList){
					$.each(poolsList, function (pool, coinsList){
						if (pools[pool]==null) pools[pool] = {};
						pools[pool][timestamp] = coinsList;
						$.each(coinsList, function (coin, value){
							coinsExchangeRates[coin] = 0;
						});	
					});
				});

				// Order data seperately by wallets
				$.each(walletsInitial, function (timestamp, walletsList){
					$.each(walletsList, function (wallet, coinsList){
						if (wallets[wallet]==null) wallets[wallet] = {};
						wallets[wallet][timestamp] = coinsList;
						$.each(coinsList, function (coin, value){
							coinsExchangeRates[coin] = 0;
						});
					});
				});
				
				$.each(pools, function (pool, poolData){
					var previousCoinsListPools;
					var previousTimestamp;
					$.each(poolData, function (timestamp, coinsList){
						$.each(coinsList, function (coin, value){
							if (previousCoinsListPools != null && value < previousCoinsListPools[coin] && Math.abs(value-previousCoinsListPools[coin])>=0.0000000000000001){
								events.push([parseInt(timestamp), "pool", pool, coin, "outgo", Math.abs(previousCoinsListPools[coin] - value), value]);
							}
						});
						if (coinsList!=null && coinsList.length != 0){
							previousCoinsListPools = coinsList;
							previousTimestamp = timestamp;
						}
					});				
				});

				$.each(wallets, function (wallet, walletData){
					var previousCoinsListWallets;
					var previousTimestamp;
					var eventType = '';
					$.each(walletData, function (timestamp, coinsList){
						$.each(coinsList, function (coin, value){
							if (previousCoinsListWallets != null && value != previousCoinsListWallets[coin] && Math.abs(value-previousCoinsListWallets[coin])>=0.000000000001){
								if (value < previousCoinsListWallets[coin]){
									eventType = "outgo";
								}else{
									eventType = "income";
								}
								events.push([parseInt(timestamp), "wallet", wallet, coin, eventType, Math.abs(previousCoinsListWallets[coin] - value), value]);
							}
						});
						if (coinsList!=null && coinsList.length != 0){
							previousCoinsListWallets = coinsList;
							previousTimestamp = timestamp;
						}
					});
				});
				
				if (events.length>0){
					exportJson = events.sort(function(a,b){ return b[0] - a[0]; });						
					if(format=="csv"){
						exportContent += 'Balance changes by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(events[events.length-1][0]) + ' - ' + generateDateTime(events[0][0]) + rowDel;
						exportContent += rowDel;
						exportContent += 'Day' + colDel + 'Type' + colDel + 'Source' + colDel + 'Coin' + colDel + 'Value' + colDel + 'New balance' + colDel;
						exportContent += rowDel;
						$.each(exportJson, function(index, values){
							var sign = "+";
							if (values[4] == "outgo"){
								sign = "-";
							}
							exportContent += generateDateTime(values[0]) + colDel + values[1] + colDel + values[2] + colDel + values[3] + colDel + sign + values[5] + ' ' + values[3] + colDel + values[6] + ' ' + values[3] + colDel;
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, "Balance-changes-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, "Balance-changes-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsBalanceChanges (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL, `dataType` varchar(255) NOT NULL, `dataSource` varchar(255) NOT NULL, `dataCoin` varchar(10) NOT NULL, `dataValue` FLOAT NOT NULL, `dataNewBalance` FLOAT NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(index, values){
							if (values[4] == "outgo"){
								values[5] = 0-values[5];
							}
							exportContent += "INSERT INTO minerstatStatisticsBalanceChanges (`dataDate`, `dataType`, `dataSource`, `dataCoin`, `dataValue`, `dataNewBalance`) VALUES (FROM_UNIXTIME(" + values[0] + "), '" + values[1] + "', '" + values[2] + "', '" + values[3] + "', " + values[5] + ", " + values[6] + ");\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, "Balance-changes-" + generateDateSimple(currentTimestamp) + ".sql");
					}
				}
			}
		});
	}else if(type=="worker-profitability"){
		$('#fullWorkersLoader').show();
		$.getJSON('/api.minerstat.com/v2/stats-worker/' + workerToken + '/' + objectName + '?timezone=' + workerTimezone, function(data){
			var coins = {};
			$.each(data["data"][2], function (index, values){
				var timestamp = (values[0]*100);
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
				if (exportJson[timestamp]==null) exportJson[timestamp] = {};
				$.each(values[1], function (index2, coinsList){
					var coin = coinsList[0];
					coins[coin] = 1;
					if (exportJson[timestamp][coin]==null) exportJson[timestamp][coin] = {};
					exportJson[timestamp][coin]["reward"] = coinsList[1];
					exportJson[timestamp][coin]["exchangeRate"] = coinsList[2];
					exportJson[timestamp][coin]["profitabilityUSD"] = coinsList[1]*coinsList[2];
					exportJson[timestamp][coin]["profitability" + currency] = coinsList[1]*coinsList[2]*currencyValue;
				});				
			});
			if(format=="csv"){
				exportContent += 'Full profitability statistics by minerstat' + rowDel;
				exportContent += 'Worker name: ' + objectName + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Date and time' + colDel;
				$.each(coins, function(coin, value){
					exportContent += coin + " reward" + colDel;
					exportContent += coin + " exchange rate" + colDel;
					exportContent += "Profitability (USD)" + colDel;
					exportContent += "Profitability ("+ currency +")" + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDateTime(timestamp) + colDel;
					$.each(coins, function(coin, value){
						if (values[coin]!=null){
							exportContent += values[coin]["reward"] + colDel;
							exportContent += values[coin]["exchangeRate"] + colDel;
							exportContent += values[coin]["profitabilityUSD"] + colDel;
							exportContent += values[coin]["profitability" + currency] + colDel;
						}else{
							exportContent += colDel;
							exportContent += colDel;
							exportContent += colDel;
							exportContent += colDel;
						}
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersProfitability (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					exportContent += "INSERT INTO minerstatStatisticsWorkersProfitability (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
			$('#fullWorkersLoader').hide();
		});		
	}else if(type=="worker-profitability-avg"){
		$('#dailyAverageWorkersLoader').show();
		$.getJSON('/api.minerstat.com/v2/stats-worker/' + workerToken + '/' + objectName + '?timezone=' + workerTimezone, function(data){
			var coins = {};
			var exportJsonTemp = {};
			$.each(data["data"][2], function (index, values){
				var timestamp = (values[0]*100);
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
				if (exportJsonTemp[getDayTimestamp(timestamp)]==null) exportJsonTemp[getDayTimestamp(timestamp)] = {};
				$.each(values[1], function (index2, coinsList){
					var coin = coinsList[0];
					if(coin!='' && coin!='NO'){
						coins[coin] = 1;
						if (exportJsonTemp[getDayTimestamp(timestamp)][coin]==null){
							exportJsonTemp[getDayTimestamp(timestamp)][coin] = {};
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["rewardSum"] 							= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["rewardCount"] 						= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["exchangeRateSum"] 					= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["exchangeRateCount"] 					= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitabilityUSDSum"] 				= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitabilityUSDCount"] 				= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitability" + currency + "Sum"] 	= 0;
							exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitability" + currency + "Count"] 	= 0;
						}
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["rewardSum"] 								+= coinsList[1];
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["rewardCount"] 							+= 1;
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["exchangeRateSum"] 						+= coinsList[2];
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["exchangeRateCount"] 						+= 1;
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitabilityUSDSum"] 					+= coinsList[1]*coinsList[2];
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitabilityUSDCount"] 					+= 1;
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitability" + currency + "Sum"] 		+= coinsList[1]*coinsList[2]*currencyValue;
						exportJsonTemp[getDayTimestamp(timestamp)][coin]["profitability" + currency + "Count"]		+= 1;
					}
				});				
			});

			$.each(exportJsonTemp, function (timestamp, timestampData){
				$.each(timestampData, function (coin, coinData){
					if(coin!='' && coin!='NO'){
						if(exportJson[timestamp]==null) exportJson[timestamp] = {};
						if(exportJson[timestamp][coin]==null) exportJson[timestamp][coin] = {};
						exportJson[timestamp][coin]["reward"] 						= (coinData["rewardSum"]/coinData["rewardCount"]).toFixed(8);
						exportJson[timestamp][coin]["exchangeRate"] 				= (coinData["exchangeRateSum"]/coinData["exchangeRateCount"]).toFixed(8);
						exportJson[timestamp][coin]["profitabilityUSD"] 			= (coinData["profitabilityUSDSum"]/coinData["profitabilityUSDCount"]).toFixed(4);
						exportJson[timestamp][coin]["profitability" + currency] 	= (coinData["profitability" + currency + "Sum"]/coinData["profitability" + currency + "Count"]).toFixed(4);
					}
				});
			});

			var countingNulls = {};
			
			$.each(exportJson, function (timestamp, timestampData){
				$.each(timestampData, function (coin, coinData){
					if(coin!='' && coin!='NO'){
						if(countingNulls[coin]==null) countingNulls[coin] = 0;
						countingNulls[coin] += exportJson[timestamp][coin];
					}
				});
			});
			
			$.each(exportJson, function (timestamp, timestampData){
				$.each(timestampData, function (coin, coinData){
					if(countingNulls[coin]==0){
						delete exportJson[timestamp][coin]; 
						delete coins[coin]; 
					}
				});
			});

			if(format=="csv"){
				exportContent += 'Full profitability statistics by minerstat' + rowDel;
				exportContent += 'Worker name: ' + objectName + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Date and time' + colDel;
				$.each(coins, function(coin, value){
					exportContent += coin + " reward" + colDel;
					exportContent += coin + " exchange rate" + colDel;
					exportContent += coin + " profitability (USD)" + colDel;
					exportContent += coin + " profitability ("+ currency +")" + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDateSimple(timestamp) + colDel;
					$.each(coins, function(coin, value){
						if (values[coin]!=null){
							exportContent += values[coin]["reward"] + colDel;
							exportContent += values[coin]["exchangeRate"] + colDel;
							exportContent += values[coin]["profitabilityUSD"] + colDel;
							exportContent += values[coin]["profitability" + currency] + colDel;
						}else{
							exportContent += colDel;
							exportContent += colDel;
							exportContent += colDel;
							exportContent += colDel;
						}
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersProfitability (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					exportContent += "INSERT INTO minerstatStatisticsWorkersProfitability (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, objectName + "-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
			$('#dailyAverageWorkersLoader').hide();
		});		
	}else if(type=="worker-hashrate"){
		var exportJsonPower = {};
		$('#fullWorkersLoader').show();
		$.getJSON('/api.minerstat.com/v2/stats-hashtemp/' + workerToken + '/' + objectName + '?timezone=' + workerTimezone, function(data){
			var coins = {};
			$.each(data["resultsHash"], function (coin, values){
				if(coin!='' && coin!='NO'){
					coins[coin] = 1;
					$.each(values, function (index, hashrate){
						var timestamp = hashrate[0]*100;
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						if (exportJson[timestamp]==null) exportJson[timestamp] = {};
						exportJson[timestamp][coin] = hashrate[1].toFixed(6) + ' ' + data["units"][coin] + "/s";
					});	
				}				
			});
			$.each(data["resultsPower"], function (index, power){
				var timestamp = power[0]*100;
				if (timestamp>lastDate) lastDate = timestamp;
				if (timestamp<firstDate) firstDate = timestamp;
				if (exportJsonPower[timestamp]==null) exportJsonPower[timestamp] = 0;
				exportJsonPower[timestamp] = power[1];				
			});
			if(format=="csv"){
				exportContent += 'Full hashrate statistics by minerstat' + rowDel;
				exportContent += 'Worker name: ' + objectName + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Date and time' + colDel;
				$.each(coins, function(coin, value){
					exportContent += coin + " hashrate" + colDel + '' + colDel;
				});
				exportContent += 'Power' + colDel + colDel;
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					exportContent += generateDateTime(timestamp) + colDel;
					$.each(coins, function(coin, value){
						if (values[coin]!=null && values[coin]!=''){
							exportContent += values[coin].split(' ')[0] + colDel + values[coin].split(' ')[1] + colDel;
						}else{
							exportContent += colDel + colDel;
						}
					});
					if(exportJsonPower[timestamp]!=null){
						exportContent += exportJsonPower[timestamp] + colDel + 'W' + colDel;
					}else{
						exportContent += colDel;
					}
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				
				$.each(exportJsonPower, function (timestamp, watt){
					if(exportJson[timestamp]==null) exportJson[timestamp] = {};
					exportJson[timestamp]['power'] = watt;				
				});
				
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				
				$.each(exportJsonPower, function (timestamp, watt){
					if(exportJson[timestamp]==null) exportJson[timestamp] = {};
					exportJson[timestamp]['power'] = watt;				
				});
				
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersHashrate (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					exportContent += "INSERT INTO minerstatStatisticsWorkersHashrate (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
			$('#fullWorkersLoader').hide();
		});
	}else if(type=="worker-hashrate-all"){
		
		$('#fullWorkersLoader').show();
		
		var allWorkersListJson = jQuery.parseJSON(allWorkersList);	
		var coins = {};
		var coinUnits = {};
		var workerUnits = {};
		var coinAlgos = {};
		var coinAlgosUnits = {};
		var workerAlgos = {};
		var exportJsonTemp = {};
		var exportJsonPower = {};
		var exportJsonTotal = {};
		var allWorkersCount = allWorkersListJson.length;
		var i = 0;
		
		$.each(allWorkersListJson, function (workerIndex, workerName){
			$.getJSON('/api.minerstat.com/v2/stats-hashtemp/' + workerToken + '/' + workerName + '?timezone=' + workerTimezone, function(data){
				
				$.each(data["resultsHash"], function (coin, values){
					
					if(data["units"][coin]=='Sol'){
						data["units"][coin] = 'H';
					}
						
					if(coin!='' && coin!='NO'){
						coins[coin] = 1;
						$.each(values, function (index, hashrate){
							var timestamp = hashrate[0]*100;
							if (timestamp>lastDate) lastDate = timestamp;
							if (timestamp<firstDate) firstDate = timestamp;
							
							if (exportJsonTemp[timestamp]==null) exportJsonTemp[timestamp] = {};
							if (exportJsonTemp[timestamp][workerName]==null) exportJsonTemp[timestamp][workerName] = {};
							if(exportJsonTemp[timestamp][workerName][coin]==null){ exportJsonTemp[timestamp][workerName][coin] = [0,0,0]; }
							exportJsonTemp[timestamp][workerName][coin][0] += toHashes(hashrate[1],data["units"][coin] + '/s');
							exportJsonTemp[timestamp][workerName][coin][1] += 1;
							exportJsonTemp[timestamp][workerName][coin][2] = 'H';	
							
						});	

						coinUnits[coin] = data["units"][coin] + "/s";
						coinAlgosUnits[data["algos"][coin]] = data["units"][coin] + "/s";
						coinAlgos[coin] = data["algos"][coin];
					}				
				});

				$.each(data["resultsPower"], function (timestamp, powerData){
						var timestamp = powerData[0]*100;
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						
						if (exportJsonPower[timestamp]==null) exportJsonPower[timestamp] = {};
						if (exportJsonPower[timestamp][workerName]==null) exportJsonPower[timestamp][workerName] = {};
						if (exportJsonPower[timestamp][workerName]['powerSum']==null) exportJsonPower[timestamp][workerName]['powerSum'] = 0;
						if (exportJsonPower[timestamp][workerName]['powerCount']==null) exportJsonPower[timestamp][workerName]['powerCount'] = 0;
						exportJsonPower[timestamp][workerName]['powerSum'] += powerData[1];				
						exportJsonPower[timestamp][workerName]['powerCount'] += 1;				
				});
				
				i++;
				if(allWorkersCount == i){

					$.each(exportJsonTemp, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							$.each(workerData, function (coin, coinData){
								if(coin!='' && coin!='NO'){
									
									if(workerAlgos[coinAlgos[coin]]==null) workerAlgos[coinAlgos[coin]] = {};
									if(workerAlgos[coinAlgos[coin]][timestamp]==null) workerAlgos[coinAlgos[coin]][timestamp] = 0;
									
									if(exportJson[timestamp]==null) exportJson[timestamp] = {};
									if(exportJson[timestamp][workerName]==null) exportJson[timestamp][workerName] = {};
									if(coinData[1]>0){
										if(exportJson[timestamp][workerName]['hashrate']==null) exportJson[timestamp][workerName]['hashrate'] = 0;
										exportJson[timestamp][workerName]['hashrate'] += parseFloat(coinData[0]/coinData[1]);
										workerAlgos[coinAlgos[coin]][timestamp] += parseFloat(coinData[0]/coinData[1]);
									}
								}
							});
							
							exportJson[timestamp][workerName]['power'] = Math.round(exportJsonPower[timestamp][workerName]['powerSum']/exportJsonPower[timestamp][workerName]['powerCount']);

						});
					});

					var countingNulls = {};
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(countingNulls[workerName]==null) countingNulls[workerName] = 0;
							countingNulls[workerName] += exportJson[timestamp][workerName]['hashrate'];
						});
					});

					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(countingNulls[workerName]==0){
								delete exportJson[timestamp][workerName]; 
							}
						});
					});

					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(exportJsonTotal[timestamp]==null) exportJsonTotal[timestamp] = {};
							if(exportJsonTotal[timestamp]['hashrate']==null) exportJsonTotal[timestamp]['hashrate'] = 0;
							if(exportJsonTotal[timestamp]['power']==null) exportJsonTotal[timestamp]['power'] = 0;
							
							exportJsonTotal[timestamp]['hashrate'] += exportJson[timestamp][workerName]['hashrate'];
							exportJsonTotal[timestamp]['power'] += exportJson[timestamp][workerName]['power'];
							
						});
					});

					$.each(workerAlgos, function (algo, algoData){
						$.each(algoData, function (timestamp, timestampData){
							workerAlgos[algo][timestamp] = toUnit(workerAlgos[algo][timestamp]);
						});
					});
					
					$.each(exportJsonTotal, function(timestamp, values){
						exportJsonTotal[timestamp]['hashrate'] = toUnit(exportJsonTotal[timestamp]['hashrate']);
					});
					
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							exportJson[timestamp][workerName]['hashrate'] = toUnit(exportJson[timestamp][workerName]['hashrate']);
						});
					});
					
					if(format=="csv"){
						exportContent += 'Workers hashrate statistics by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
						exportContent += rowDel;
						exportContent += 'Date' + colDel + 'Daily total hashrate' + colDel + colDel + 'Daily total power' + colDel + colDel + colDel;
						$.each(workerAlgos, function (algo, algoData){
							exportContent += algo + " hashrate" + colDel + colDel;
						});
						exportContent += colDel;
						$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
							exportContent += workerNameTemp + " hashrate" + colDel + colDel;
							exportContent += workerNameTemp + " power" + colDel + colDel;
						});
						exportContent += rowDel;
						$.each(exportJson, function(timestamp, values){
							if(typeof exportJsonTotal[timestamp]!='undefined' && typeof exportJsonTotal[timestamp]['hashrate']!='undefined' && exportJsonTotal[timestamp]['hashrate']!='' && exportJsonTotal[timestamp]['hashrate']!=' '){
								exportContent += generateDateTime(timestamp) + colDel + exportJsonTotal[timestamp]['hashrate'].split(' ')[0] + colDel + exportJsonTotal[timestamp]['hashrate'].split(' ')[1] + colDel + exportJsonTotal[timestamp]['power'] + colDel + 'W' + colDel;
							}else{
								if(typeof exportJsonTotal[timestamp]!='undefined' && typeof exportJsonTotal[timestamp]['power']!='undefined' && exportJsonTotal[timestamp]['power']!='' && exportJsonTotal[timestamp]['power']!=' '){
									exportContent += generateDateTime(timestamp) + colDel + '' + colDel + colDel + exportJsonTotal[timestamp]['power'] + colDel + 'W' + colDel;
								}else{
									exportContent += generateDateTime(timestamp) + colDel + '' + colDel + colDel + '' + colDel + '' + colDel;
								}
							}
							exportContent += colDel;
							$.each(workerAlgos, function (algo, algoData){
								if(typeof algoData[timestamp]!='undefined'){
									exportContent += algoData[timestamp].split(' ')[0] + colDel + algoData[timestamp].split(' ')[1] + colDel;
								}else{
									exportContent += '' + colDel + colDel;
								}
							});
							exportContent += colDel;
							$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
								if(typeof exportJson[timestamp][workerNameTemp] != 'undefined'){
									exportContent += exportJson[timestamp][workerNameTemp]['hashrate'].split(' ')[0] + colDel + exportJson[timestamp][workerNameTemp]['hashrate'].split(' ')[1] + colDel + exportJson[timestamp][workerNameTemp]['power'] + colDel + 'W' + colDel;
								}else{
									exportContent += '' + colDel + colDel + '' + colDel + colDel;
								}
							});
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, "Workers-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, "Workers-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersHashrate (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL, `dataJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(timestamp, values){
							exportContent += "INSERT INTO minerstatStatisticsWorkersHashrate (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + JSON.stringify(values) + "');\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, "Workers-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
					}
					$('#fullWorkersLoader').hide();
				}
			});
		});
	}else if(type=="worker-hashrate-avg"){
		$('#dailyAverageWorkersLoader').show();
		$.getJSON('/api.minerstat.com/v2/stats-hashtemp/' + workerToken + '/' + objectName + '?timezone=' + workerTimezone, function(data){
			var coins = {};
			var coinUnits = {};
			var exportJsonTemp = {};
			$.each(data["resultsHash"], function (coin, values){
				if(coin!='' && coin!='NO'){
					coins[coin] = 1;
					$.each(values, function (index, hashrate){
						var timestamp = hashrate[0]*100;
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						if (exportJsonTemp[getDayTimestamp(timestamp)]==null) exportJsonTemp[getDayTimestamp(timestamp)] = {};
						if(exportJsonTemp[getDayTimestamp(timestamp)][coin]==null){ exportJsonTemp[getDayTimestamp(timestamp)][coin] = [0,0]; }
						exportJsonTemp[getDayTimestamp(timestamp)][coin][0] += hashrate[1];
						exportJsonTemp[getDayTimestamp(timestamp)][coin][1] += 1;
						
					});	
					
					coinUnits[coin] = data["units"][coin] + "/s";
				}				
			});
			
			$.each(exportJsonTemp, function (timestamp, timestampData){
				$.each(timestampData, function (coin, coinData){
					if(coin!='' && coin!='NO'){
						if(exportJson[timestamp]==null) exportJson[timestamp] = {};
						if(coinData[1]>0){
							if(exportJson[timestamp]['coinsSum']==null) exportJson[timestamp]['coinsSum'] = 0;
							exportJson[timestamp]['coinsSum'] += parseFloat(coinData[0]/coinData[1]);
						}
						exportJson[timestamp][coin] = coinData[0]/coinData[1];
					}
				});
			});
			
			var unitChange = 0;
			var countingNulls = {};
			
			$.each(exportJson, function (timestamp, timestampData){
				var unit = '';
				var unitOld = '';
				$.each(timestampData, function (coin, coinData){
					if(coin!='' && coin!='NO' && coin != 'coinsSum'){
						
						if(countingNulls[coin]==null) countingNulls[coin] = 0;
						countingNulls[coin] += exportJson[timestamp][coin];
						
						exportJson[timestamp][coin] = exportJson[timestamp][coin].toFixed(6) + ' ' + coinUnits[coin];
						unitOld = unit;
						unit = coinUnits[coin];
						if(unitOld!=unit && unitOld != ''){
							unitChange = 1;
						}
					}
				});
				exportJson[timestamp]['coinsSum'] = exportJson[timestamp]['coinsSum'].toFixed(6) + ' ' + unit;
			});
			
			$.each(exportJson, function (timestamp, timestampData){
				$.each(timestampData, function (coin, coinData){
					if(countingNulls[coin]==0){
						delete exportJson[timestamp][coin]; 
						delete coins[coin]; 
					}
				});
			});

			if(unitChange==1){
				$.each(exportJson, function (timestamp, timestampData){
					delete exportJson[timestamp]['coinsSum']; 
				});
			}

			if(format=="csv"){
				exportContent += 'Daily average hashrate statistics by minerstat' + rowDel;
				exportContent += 'Worker name: ' + objectName + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
				exportContent += rowDel;
				exportContent += 'Date' + colDel + 'Daily avg. hashrate'  + colDel + colDel;
				$.each(coins, function(coin, value){
					exportContent += coin + " hashrate" + colDel + colDel;
				});
				exportContent += rowDel;
				$.each(exportJson, function(timestamp, values){
					if (typeof exportJson[timestamp] != 'undefined' && typeof exportJson[timestamp]['coinsSum'] != 'undefined' && exportJson[timestamp]['coinsSum']!=''){
						exportContent += generateDateSimple(timestamp) + colDel + exportJson[timestamp]['coinsSum'].split(' ')[0] + colDel + exportJson[timestamp]['coinsSum'].split(' ')[1] + colDel;
					}else{
						exportContent += generateDateSimple(timestamp) + colDel + '' + colDel + '' + colDel;
					}
					$.each(coins, function(coin, value){
						if(coin!='coinsSum'){
							if (values[coin]!=null && values[coin]!=''){
								exportContent += values[coin].split(' ')[0] + colDel + values[coin].split(' ')[1] + colDel;
							}else{
								exportContent += colDel + colDel;
							}
						}
					});
					exportContent += rowDel;
				});
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersHashrate (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(timestamp, values){
					exportContent += "INSERT INTO minerstatStatisticsWorkersHashrate (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, objectName + "-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
			}
			$('#dailyAverageWorkersLoader').hide();
		});
	}else if(type=="worker-hashrate-avg-all"){
		
		$('#dailyAverageWorkersLoader').show();
		
		var allWorkersListJson = jQuery.parseJSON(allWorkersList);	
		var coins = {};
		var coinUnits = {};
		var workerUnits = {};
		var coinAlgos = {};
		var coinAlgosUnits = {};
		var workerAlgos = {};
		var exportJsonTemp = {};
		var exportJsonPower = {};
		var exportJsonTotal = {};
		var exportJsonAlgos = {};
		var allWorkersCount = allWorkersListJson.length;
		var i = 0;
		
		$.each(allWorkersListJson, function (workerIndex, workerName){
			$.getJSON('/api.minerstat.com/v2/stats-hashtemp/' + workerToken + '/' + workerName + '?timezone=' + workerTimezone, function(data){
				
				$.each(data["resultsHash"], function (coin, values){
					
					if(data["units"][coin]=='Sol'){
						data["units"][coin] = 'H';
					}
					
					if(coin!='' && coin!='NO'){
						coins[coin] = 1;
						$.each(values, function (index, hashrate){
							var timestamp = hashrate[0]*100;
							if (timestamp>lastDate) lastDate = timestamp;
							if (timestamp<firstDate) firstDate = timestamp;
							
							if (exportJsonTemp[getDayTimestamp(timestamp)]==null) exportJsonTemp[getDayTimestamp(timestamp)] = {};
							if (exportJsonTemp[getDayTimestamp(timestamp)][workerName]==null) exportJsonTemp[getDayTimestamp(timestamp)][workerName] = {};
							if(exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin]==null){ exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin] = [0,0,0]; }
							exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][0] += toHashes(hashrate[1],data["units"][coin] + '/s');
							exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][1] += 1;
							exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][2] = 'H';	
						});	

						coinUnits[coin] = data["units"][coin] + "/s";
						coinAlgosUnits[data["algos"][coin]] = data["units"][coin] + "/s";
						coinAlgos[coin] = data["algos"][coin];
					}				
				});

				$.each(data["resultsPower"], function (timestamp, powerData){
						var timestamp = powerData[0]*100;
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						
						if (exportJsonPower[getDayTimestamp(timestamp)]==null) exportJsonPower[getDayTimestamp(timestamp)] = {};
						if (exportJsonPower[getDayTimestamp(timestamp)][workerName]==null) exportJsonPower[getDayTimestamp(timestamp)][workerName] = {};
						if (exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerSum']==null) exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerSum'] = 0;
						if (exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerCount']==null) exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerCount'] = 0;
						exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerSum'] += powerData[1];				
						exportJsonPower[getDayTimestamp(timestamp)][workerName]['powerCount'] += 1;				
				});
				
				i++;
				if(allWorkersCount == i){

					$.each(exportJsonTemp, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							$.each(workerData, function (coin, coinData){
								if(coin!='' && coin!='NO'){
									
									if(workerAlgos[coinAlgos[coin]]==null) workerAlgos[coinAlgos[coin]] = {};
									if(workerAlgos[coinAlgos[coin]][timestamp]==null) workerAlgos[coinAlgos[coin]][timestamp] = 0;

									if(exportJson[timestamp]==null) exportJson[timestamp] = {};
									if(exportJson[timestamp][workerName]==null) exportJson[timestamp][workerName] = {};
									if(coinData[1]>0){
										if(exportJson[timestamp][workerName]['hashrate']==null) exportJson[timestamp][workerName]['hashrate'] = 0;
										exportJson[timestamp][workerName]['hashrate'] += parseFloat(coinData[0]/coinData[1]);
										workerAlgos[coinAlgos[coin]][timestamp] += parseFloat(coinData[0]/coinData[1]);
									}
								}
							});
							
							exportJson[timestamp][workerName]['power'] = Math.round(exportJsonPower[timestamp][workerName]['powerSum']/exportJsonPower[timestamp][workerName]['powerCount']);

						});
					});

					var countingNulls = {};
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(countingNulls[workerName]==null) countingNulls[workerName] = 0;
							countingNulls[workerName] += exportJson[timestamp][workerName]['hashrate'];
						});
					});

					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(countingNulls[workerName]==0){
								delete exportJson[timestamp][workerName]; 
							}
						});
					});
					
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							if(exportJsonTotal[timestamp]==null) exportJsonTotal[timestamp] = {};
							if(exportJsonTotal[timestamp]['hashrate']==null) exportJsonTotal[timestamp]['hashrate'] = 0;
							if(exportJsonTotal[timestamp]['power']==null) exportJsonTotal[timestamp]['power'] = 0;
							
							exportJsonTotal[timestamp]['hashrate'] += exportJson[timestamp][workerName]['hashrate'];
							exportJsonTotal[timestamp]['power'] += exportJson[timestamp][workerName]['power'];

						});
					});
					
					$.each(workerAlgos, function (algo, algoData){
						$.each(algoData, function (timestamp, timestampData){
							workerAlgos[algo][timestamp] = toUnit(workerAlgos[algo][timestamp]);
						});
					});
					
					$.each(exportJsonTotal, function(timestamp, values){
						exportJsonTotal[timestamp]['hashrate'] = toUnit(exportJsonTotal[timestamp]['hashrate']);
					});
					
					$.each(exportJson, function (timestamp, timestampData){
						$.each(timestampData, function (workerName, workerData){
							exportJson[timestamp][workerName]['hashrate'] = toUnit(exportJson[timestamp][workerName]['hashrate']);
						});
					});

					if(format=="csv"){
						exportContent += 'Daily average hashrate statistics by minerstat' + rowDel;
						exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
						exportContent += rowDel;
						exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
						exportContent += rowDel;
						exportContent += 'Date' + colDel + colDel + 'Daily total hashrate'  + colDel + colDel + 'Daily total power'  + colDel + colDel  + colDel;
						$.each(workerAlgos, function (algo, algoData){
							exportContent += algo + " hashrate" + colDel + colDel;
						});
						exportContent += colDel;
						$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
							exportContent += workerNameTemp + " hashrate" + colDel + colDel;
							exportContent += workerNameTemp + " power" + colDel + colDel;
						});
						exportContent += rowDel;
						$.each(exportJson, function(timestamp, values){
							if(typeof exportJsonTotal[timestamp]!='undefined' && typeof exportJsonTotal[timestamp]['hashrate'] != 'undefined' && exportJsonTotal[timestamp]['hashrate'] != ''){
								exportContent += generateDateSimple(timestamp) + colDel + colDel + exportJsonTotal[timestamp]['hashrate'].split(' ')[0] + colDel + exportJsonTotal[timestamp]['hashrate'].split(' ')[1] + colDel + exportJsonTotal[timestamp]['power'] + colDel + ' W' + colDel;
							}else{
								if(typeof exportJsonTotal[timestamp]!='undefined' && typeof exportJsonTotal[timestamp]['power'] != 'undefined' && exportJsonTotal[timestamp]['power'] != ''){
									exportContent += generateDateSimple(timestamp) + colDel + colDel + colDel + colDel + exportJsonTotal[timestamp]['power'] + colDel + ' W' + colDel;
								}else{
									exportContent += generateDateSimple(timestamp) + colDel + colDel + colDel + colDel + colDel + colDel;
								}
							}
							exportContent += colDel;
							$.each(workerAlgos, function (algo, algoData){
								if(typeof algoData[timestamp]!='undefined' && algoData[timestamp]!=''){
									exportContent += algoData[timestamp].split(' ')[0] + colDel + algoData[timestamp].split(' ')[1] + colDel;
								}else{
									exportContent += '' + colDel + colDel;
								}
							});
							exportContent += colDel;
							$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
								if(typeof exportJson[timestamp][workerNameTemp] != 'undefined' && typeof exportJson[timestamp][workerNameTemp]['hashrate'] != 'undefined' && exportJson[timestamp][workerNameTemp]['hashrate'] != 'undefined' != ''){
									exportContent += exportJson[timestamp][workerNameTemp]['hashrate'].split(' ')[0] + colDel + exportJson[timestamp][workerNameTemp]['hashrate'].split(' ')[1] + colDel + exportJson[timestamp][workerNameTemp]['power'] + colDel + 'W' + colDel;
								}else{
									if(typeof exportJson[timestamp][workerNameTemp] != 'undefined' && typeof exportJson[timestamp][workerNameTemp]['power'] != 'undefined' && exportJson[timestamp][workerNameTemp]['power'] != 'undefined' != ''){
										exportContent += '' + colDel + '' + colDel + exportJson[timestamp][workerNameTemp]['power'] + colDel + 'W' + colDel;
									}else{
										exportContent += '' + colDel + colDel + '' + colDel + colDel;
									}
								}
							});
							exportContent += rowDel;
						});
						var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
					}else if(format=="json"){
						exportContent = JSON.stringify(exportJson);
						var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".json");
					}else if(format=="sql"){
						exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersHashrate (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
						$.each(exportJson, function(timestamp, values){
							exportContent += "INSERT INTO minerstatStatisticsWorkersHashrate (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
						});
						var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
						saveAs(blob, "Daily-average-hashrate-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
					}
					$('#dailyAverageWorkersLoader').hide();
				}
			});
		});
	}else if(type=="worker-profitability-avg-all"){
		
		$('#dailyAverageWorkersLoader').show();
		
		var allWorkersListJson = jQuery.parseJSON(allWorkersList);	
		var coins = {};
		var coinUnits = {};
		var workerUnits = {};
		var coinAlgos = {};
		var coinAlgosUnits = {};
		var workerAlgos = {};
		var exportJsonTemp = {};
		var exportJsonPower = {};
		var exportJsonTotal = {};
		var exportJsonAlgos = {};
		var allWorkersCount = allWorkersListJson.length;
		var i = 0;
		
		$.each(allWorkersListJson, function (workerIndex, workerName){
			$.getJSON('/api.minerstat.com/v2/stats-worker/' + workerToken + '/' + workerName + '?timezone=' + workerTimezone, function(data){
				if(typeof data['data'] != 'undefined' && typeof data['data'][2] != 'undefined'){
					
					var dataProfitabiliy = data['data'][2];
					$.each(dataProfitabiliy, function (arrayIndex, arrayValue){
						
						var timestamp = arrayValue[0]*100;
						if (timestamp>lastDate) lastDate = timestamp;
						if (timestamp<firstDate) firstDate = timestamp;
						
						var timestampData = arrayValue[1];
						$.each(timestampData, function (timestampDataIndex, timestampDataIndexData){
							var coin = timestampDataIndexData[0];
							var reward = timestampDataIndexData[1];
							var price = timestampDataIndexData[2];
							if(coin!='' && coin!='NO'){
								if (exportJsonTemp[getDayTimestamp(timestamp)]==null) exportJsonTemp[getDayTimestamp(timestamp)] = {};
								if (exportJsonTemp[getDayTimestamp(timestamp)][workerName]==null) exportJsonTemp[getDayTimestamp(timestamp)][workerName] = {};
								if(exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin]==null){ exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin] = [0,0,0]; }
								exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][0] += reward*price;
								exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][1] += reward;
								exportJsonTemp[getDayTimestamp(timestamp)][workerName][coin][2] += 1;
							}
						});		
					});
					i++;
					if(allWorkersCount == i){
						
						$.each(exportJsonTemp, function (timestamp, timestampData){
							$.each(timestampData, function (workerName, workerData){
								$.each(workerData, function (coin, coinData){
									if(coin!='' && coin!='NO'){
										if(exportJson[timestamp]==null) exportJson[timestamp] = {};
										if(exportJson[timestamp][workerName]==null) exportJson[timestamp][workerName] = {};
										if(coinData[1]>0){
											if(exportJson[timestamp][workerName]['profitability']==null) exportJson[timestamp][workerName]['profitability'] = 0;
											exportJson[timestamp][workerName]['profitability'] += parseFloat(coinData[0]/coinData[2]);
										}
									}
								});
							});
						});

						var countingNulls = {};
						$.each(exportJson, function (timestamp, timestampData){
							$.each(timestampData, function (workerName, workerData){
								if(countingNulls[workerName]==null) countingNulls[workerName] = 0;
								countingNulls[workerName] += exportJson[timestamp][workerName]['hashrate'];
							});
						});

						$.each(exportJson, function (timestamp, timestampData){
							$.each(timestampData, function (workerName, workerData){
								if(countingNulls[workerName]==0){
									delete exportJson[timestamp][workerName]; 
								}
							});
						});
						
						$.each(exportJson, function (timestamp, timestampData){
							$.each(timestampData, function (workerName, workerData){
								if(exportJsonTotal[timestamp]==null) exportJsonTotal[timestamp] = {};
								if(exportJsonTotal[timestamp]['profitability']==null) exportJsonTotal[timestamp]['profitability'] = 0;
								exportJsonTotal[timestamp]['profitability'] += exportJson[timestamp][workerName]['profitability'];
							});
						});

						if(format=="csv"){
							exportContent += 'Daily average profitability statistics by minerstat' + rowDel;
							exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
							exportContent += rowDel;
							exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
							exportContent += rowDel;
							exportContent += 'Date' + colDel + colDel + 'Total (USD)'  + colDel + 'Total (' + currency + ')' + colDel + colDel;
							$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
								exportContent += 'Avg. ' + workerNameTemp + ' (' + currency + ')' + colDel + colDel;
							});
							exportContent += rowDel;
							$.each(exportJson, function(timestamp, values){
								if(typeof exportJsonTotal[timestamp]!='undefined' && typeof exportJsonTotal[timestamp]['profitability'] != 'undefined' && exportJsonTotal[timestamp]['profitability'] != ''){
									exportContent += generateDateSimple(timestamp) + colDel + colDel + exportJsonTotal[timestamp]['profitability'].toFixed(2) + '' + colDel + (exportJsonTotal[timestamp]['profitability']*currencyValue).toFixed(2) + colDel;
								}else{
									exportContent += generateDateSimple(timestamp) + colDel + colDel + '0' + colDel + '0' + colDel;

								}
								exportContent += colDel;
								$.each(allWorkersListJson, function(workerIndex2, workerNameTemp){
									if(typeof exportJson[timestamp][workerNameTemp] != 'undefined' && typeof exportJson[timestamp][workerNameTemp]['profitability'] != 'undefined' && exportJson[timestamp][workerNameTemp]['profitability'] != 'undefined' != ''){
										exportContent += (exportJson[timestamp][workerNameTemp]['profitability']*currencyValue).toFixed(2) + colDel + colDel;
									}else{
										exportContent += '0' + colDel + colDel;
									}
								});
								exportContent += rowDel;
							});
							var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
							saveAs(blob, "Daily-average-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".csv");
						}else if(format=="json"){
							exportContent = JSON.stringify(exportJson);
							var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
							saveAs(blob, "Daily-average-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".json");
						}else if(format=="sql"){
							exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsWorkersProfitability (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataWorkerName` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
							$.each(exportJson, function(timestamp, values){
								exportContent += "INSERT INTO minerstatStatisticsWorkersProfitability (`dataDate`, `dataWorkerName`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', '" + JSON.stringify(values) + "');\r\n";
							});
							var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
							saveAs(blob, "Daily-average-profitability-statistics-" + generateDateSimple(currentTimestamp) + ".sql");
						}
						$('#dailyAverageWorkersLoader').hide();
					}
				}else{
					$('#dailyAverageWorkersLoader').hide();
				}
			});
		});
	}else if(type=="wallets"){
		$.getJSON('/api.minerstat.com/v2/stats-balance/' + workerToken + '?timezone=' + workerTimezone, function(data){
			if (data!='' && data["error"] == null){
				var walletsInitial = data["wallets"];
				var coins = {};
				$.each(walletsInitial, function (timestamp, walletsList){
					if (timestamp>lastDate) lastDate = timestamp;
					if (timestamp<firstDate) firstDate = timestamp;
					$.each(walletsList, function (wallet, coinsList){
						if (wallet.toLowerCase() == objectName.toLowerCase()){
							exportJson[timestamp] = coinsList;
							$.each(coinsList, function (coin, coinValue){
								coins[coin] = 1;
							});
						}
					});
				});
				if(format=="csv"){
					exportContent += 'Full balance statistics by minerstat' + rowDel;
					exportContent += 'Wallet name: ' + objectName + rowDel;
					exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
					exportContent += rowDel;
					exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
					exportContent += rowDel;
					exportContent += 'Date and time' + colDel;
					$.each(coins, function(coin, value){
						exportContent += coin + " balance" + colDel;
					});
					exportContent += rowDel;
					$.each(exportJson, function(timestamp, values){
						exportContent += generateDateTime(timestamp) + colDel;
						$.each(coins, function(coin, value){
							if (values[coin]!=null){
								exportContent += values[coin] + colDel;
							}else{
								exportContent += colDel;
							}
						});
						exportContent += rowDel;
					});
					var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".csv");
				}else if(format=="json"){
					exportContent = JSON.stringify(exportJson);
					var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".json");
				}else if(format=="sql"){
					exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsBalanceData (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataName` varchar(255) NOT NULL, `dataType` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
					$.each(exportJson, function(timestamp, values){
						exportContent += "INSERT INTO minerstatStatisticsBalanceData (`dataDate`, `dataName`, `dataType`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', 'wallet', '" + JSON.stringify(values) + "');\r\n";
					});
					var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".sql");
				}
			}
		});		
	}else if(type=="pools"){
		$.getJSON('/api.minerstat.com/v2/stats-balance/' + workerToken + '?timezone=' + workerTimezone, function(data){
			if (data!='' && data["error"] == null){
				var poolsInitial = data["pools"];
				var coins = {};
				$.each(poolsInitial, function (timestamp, poolsList){
					if (timestamp>lastDate) lastDate = timestamp;
					if (timestamp<firstDate) firstDate = timestamp;
					$.each(poolsList, function (pool, coinsList){
						if (pool.toLowerCase() == objectName.toLowerCase()){
							exportJson[timestamp] = coinsList;
							$.each(coinsList, function (coin, coinValue){
								coins[coin] = 1;
							});
						}
					});
				});
				if(format=="csv"){
					exportContent += 'Full balance statistics by minerstat' + rowDel;
					exportContent += 'Pool name: ' + objectName + rowDel;
					exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
					exportContent += rowDel;
					exportContent += 'Monitored period: ' + generateDateTime(firstDate) + ' - ' + generateDateTime(lastDate) + rowDel;
					exportContent += rowDel;
					exportContent += 'Date and time' + colDel;
					$.each(coins, function(coin, value){
						exportContent += coin + " balance" + colDel;
					});
					exportContent += rowDel;
					$.each(exportJson, function(timestamp, values){
						exportContent += generateDateTime(timestamp) + colDel;
						$.each(coins, function(coin, value){
							if (values[coin]!=null){
								exportContent += values[coin] + colDel;
							}else{
								exportContent += colDel;
							}
						});
						exportContent += rowDel;
					});
					var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".csv");
				}else if(format=="json"){
					exportContent = JSON.stringify(exportJson);
					var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".json");
				}else if(format=="sql"){
					exportContent = "CREATE TABLE IF NOT EXISTS minerstatStatisticsBalanceData (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataDate` datetime NOT NULL,`dataName` varchar(255) NOT NULL, `dataType` varchar(255) NOT NULL, `dataCoinsJson` longtext NOT NULL) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
					$.each(exportJson, function(timestamp, values){
						exportContent += "INSERT INTO minerstatStatisticsBalanceData (`dataDate`, `dataName`, `dataType`, `dataCoinsJson`) VALUES (FROM_UNIXTIME(" + timestamp + "), '" + objectName + "', 'pool', '" + JSON.stringify(values) + "');\r\n";
					});
					var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
					saveAs(blob, objectName + "-balance-data-" + generateDateSimple(currentTimestamp) + ".sql");
				}
			}
		});		
	}else if(type=="system"){
		$.getJSON('/api.minerstat.com/v2/stats/' + workerToken, function(data){
			$.each(data, function(worker, workerData){
				if(exportJson[worker]==null){ exportJson[worker] = {}; }
				if(typeof workerData['info'] != 'undefined' && typeof workerData['info']['os'] != 'undefined' && typeof workerData['info']['os']['localip'] != 'undefined'){
					exportJson[worker]['ip'] = workerData['info']['os']['localip'];
				}else{
					exportJson[worker]['ip'] = '';
				}
			});
			if(format=="csv"){
				exportContent += "Workers' local IPs  by minerstat" + rowDel;
				exportContent += 'Generated on: ' + generateDateTime(currentTimestamp) + rowDel;
				exportContent += rowDel;
				exportContent += 'Worker' + colDel + 'Local IP' + rowDel;
				$.each(exportJson, function(worker, workerData){
					exportContent += worker + colDel + workerData['ip'] + rowDel;
				});
				exportContent += rowDel;
				var blob = new Blob([exportContent], {type: "text/csv;charset=utf-8"});
				saveAs(blob, "Workers-IPs-" + generateDateSimple(currentTimestamp) + ".csv");
			}else if(format=="json"){
				exportContent = JSON.stringify(exportJson);
				var blob = new Blob([exportContent], {type: "text/json;charset=utf-8"});
				saveAs(blob, "Workers-IPs-" + generateDateSimple(currentTimestamp) + ".json");
			}else if(format=="sql"){
				exportContent = "CREATE TABLE IF NOT EXISTS minerstatWorkersList (`dataId` int(10) NOT NULL PRIMARY KEY AUTO_INCREMENT, `dataWorker` varchar(20) NOT NULL, `dataWorkerIp` varchar(255) NOT NULL ) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;\r\n";
				$.each(exportJson, function(worker, workerData){
					exportContent += "INSERT INTO minerstatWorkersList (`dataWorker`, `dataWorkerIp`) VALUES ('" + worker + "', '" + workerData['ip'] + "');\r\n";
				});
				var blob = new Blob([exportContent], {type: "text/sql;charset=utf-8"});
				saveAs(blob, "Workers-IPs-" + generateDateSimple(currentTimestamp) + ".sql");
			}
		});	
	}
}

function generateDate(timestamp){
	var monthNames = [_("Jan"), _("Feb"), _("Mar"), _("Apr"), _("May"), _("Jun"), _("Jul"), _("Aug"), _("Sep"), _("Oct"), _("Nov"), _("Dec")];
	var d = new Date((parseInt(timestamp))*1000);
	var suffix = 'th';
	if (d.getDate()%10==1){ suffix = 'st'; }
	if (d.getDate()%10==2){ suffix = 'nd'; }
	if (d.getDate()%10==3){ suffix = 'rd'; }			
	var dayDate = d.getDate() + suffix + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear();
	return dayDate;
}

function generateDateTime(timestamp){
	var monthNames = [_("Jan"), _("Feb"), _("Mar"), _("Apr"), _("May"), _("Jun"), _("Jul"), _("Aug"), _("Sep"), _("Oct"), _("Nov"), _("Dec")];
	var d = new Date((parseInt(timestamp))*1000);
	var suffix = 'th';
	if (d.getDate()%10==1){ suffix = 'st'; }
	if (d.getDate()%10==2){ suffix = 'nd'; }
	if (d.getDate()%10==3){ suffix = 'rd'; }		

	var minutes = d.getUTCMinutes();
	if (minutes<10) minutes = '0' + minutes;
	
	var dayDate = d.getDate() + suffix + ' ' + monthNames[d.getMonth()] + ' ' + d.getFullYear() + ' ' + d.getUTCHours() + ':' + minutes;
	return dayDate;
}

function generateDateSimple(timestamp){
	var d = new Date((parseInt(timestamp))*1000);
	var dayDate = d.getFullYear() + "-" + (d.getMonth()+1) + '-' + d.getDate();
	return dayDate;
}

function getDayTimestamp(aTimestamp){
	return aTimestamp - aTimestamp%(24*60*60);
}

function toHashes(hashrate, unit){
	switch(unit){
		case 'H/s': return hashrate; break;
		case 'KH/s': return hashrate*1000; break;
		case 'MH/s': return hashrate*1000000; break;
		case 'GH/s': return hashrate*1000000000; break;
		case 'TH/s': return hashrate*1000000000000; break;
		case 'PH/s': return hashrate*1000000000000000; break;
		default: return hashrate; break;
	}
}

function toUnit(hashrate){
							  if(hashrate/1000<1) return hashrate + ' H/s';
	hashrate = hashrate/1000; if(hashrate/1000<1) return hashrate.toFixed(3) + ' KH/s'; 
	hashrate = hashrate/1000; if(hashrate/1000<1) return hashrate.toFixed(3) + ' MH/s'; 
	hashrate = hashrate/1000; if(hashrate/1000<1) return hashrate.toFixed(3) + ' GH/s';
	hashrate = hashrate/1000; if(hashrate/1000<1) return hashrate.toFixed(3) + ' TH/s';
	hashrate = hashrate/1000; return hashrate.toFixed(3) + ' PH/s';
}


$("#separatorView").change(function() {
	separatorView = $("#separatorView").val();
	// Set cookie
    var d = new Date;
    d.setTime(d.getTime() + 24*60*60*1000*15);
    document.cookie = "separatorView=" + separatorView + ";path=/;expires=" + d.toGMTString();
	
	location.reload(); 
});