var triggersFilter = 1;
var alertsFilter = 1;
var profitSwitchFilter = 1;
var manualActionFilter = 1;
var consoleFilter = 1;
var schedulerFilter = 1;

var groupNameIndex = 0;
var workerNameIndex = 1;
var typeIndex = 2;
var messageIndex = 3;

//参数
var pageNumber= 120
var cacheNumver= 0
var typeSearch='trigger,alert,manual,scheduler,console\n'
var filterSearch=''
//网吧筛选对象
var site_obj_list=[]
var search_site_input=''//过滤网吧关键字
var select_site=[]//已经选中的网吧id数组
$(function () {
    var monthNames = [_mx("Jan"), _mx("Feb"), _mx("Mar"), _mx("Apr"), _mx("May"), _mx("Jun"), _mx("Jul"), _mx("Aug"), _mx("Sep"), _mx("Oct"), _mx("Nov"), _mx("Dec")];
    $.getJSON(`/activity_api.php?c=${pageNumber}&id=${cacheNumver}&type=${typeSearch}&filter=${filterSearch}`, function (data) {
        var notificationString = '';
        cacheNumver=data.id
        $.each(data.log, function (timestamp, timestampData) {
            $.each(timestampData, function (worker, workerData) {

                var d = new Date((timestamp) * 1000);
                var day = d.getUTCDate();
                var suffix = _mx4('th');
                if (day % 10 == 1 && day != 11) suffix = _mx('st');
                if (day % 10 == 2 && day != 12) suffix = _mx2('nd');
                if (day % 10 == 3 && day != 13) suffix = _mx3('rd');
                var month = d.getUTCMonth();
                var year = d.getUTCFullYear();
                var hours = d.getUTCHours();
                var minutes = "0" + d.getUTCMinutes();
                var seconds = "0" + d.getUTCSeconds();
                var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2) + '<small>' + day + suffix + ' ' + monthNames[month] + ' ' + year + ' ' + '</small>';
                for (var i = 0; i < workerData.length; i++) {
                    var status_message = '';
                    var status_description = '';
                    var iconType = '';
                    var typeFilter = '';
                    notificationsData = workerData[i];
                    if (notificationsData[typeIndex] == 'triggerTemp') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Fans') != -1) {
                            action = action.replace('Fans ', '');
                            status_message = _('Temperature trigger - Change fans');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and fans were set to ' + action + '%.';
                        } else if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Temperature trigger - Shut down');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was shut down.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Temperature trigger - Reboot');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was rebooted.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Temperature trigger - Restart');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining client was restarted.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Temperature trigger - Start mining');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Temperature trigger - Stop mining');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Temperature trigger - Webhook');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Temperature trigger - Execute');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and script was executed';
                        } else if (action.indexOf('ClockTune') != -1) {
                            status_message = _('Temperature trigger - ClockTune');
                            status_description = 'Temperature reached ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerMem') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Fans') != -1) {
                            action = action.replace('Fans ', '');
                            status_message = _('Memory temperature trigger - Change fans');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and fans were set to ' + action + '%.';
                        } else if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Memory temperature trigger - Shut down');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was shut down.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Memory temperature trigger - Reboot');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was rebooted.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Memory temperature trigger - Restart');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining client was restarted.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Memory temperature trigger - Start mining');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Memory temperature trigger - Stop mining');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Memory temperature trigger - Webhook');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Memory temperature trigger - Execute');
                            status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and script was executed.';
                        } else if (action.indexOf('ClockTune') != -1) {
                            status_message = _('Memory temperature trigger - ClockTune');
                            status_description = 'Memory temperature reached ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerGpuCount') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('GPU count trigger - Shut down');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and machine was shut down.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('GPU count trigger - Reboot');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and machine was rebooted.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('GPU count trigger - Power cycle');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining client got power cycle.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('GPU count trigger - Start mining');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('GPU count trigger - Stop mining');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('GPU count trigger - Webhook');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('GPU count trigger - Execute');
                            status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerUnresponsive') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Email') != -1) {
                            status_message = _('Unresponsive trigger');
                            status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes so we have sent you an e-mail.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Unresponsive trigger - Webhook');
                            status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Unresponsive trigger - Execute');
                            status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerTime') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (notificationsData[messageIndex][0].indexOf(':') == -1) {
                            notificationsData[messageIndex][0] = notificationsData[messageIndex][0] + ':00';
                        }
                        if (action.indexOf('Fans') != -1) {
                            action = action.replace('Fans ', '');
                            status_message = _('Time trigger - Change fans');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have set fans to ' + action + '%.';
                        } else if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Time trigger - Shut down');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Time trigger - Reboot');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Time trigger - Restart');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have restarted the mining client.';
                        } else if (action.indexOf('ClockTune') != -1) {
                            status_message = _('Time trigger - ClockTune');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Time trigger - Start mining');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and the mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Time trigger - Stop mining');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and the mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Time trigger - Webhook');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Time trigger - Execute');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and script was executed.';
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Time trigger - Template');
                            status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and config template was loaded.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerIdle') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Idle trigger - Shut down');
                            status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Idle trigger - Reboot');
                            status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Idle trigger - Restart');
                            status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have restarted the mining client.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Idle trigger - Webhook');
                            status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Idle trigger - Execute');
                            status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerInactive') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Inactive trigger - Shut down');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Inactive trigger - Reboot');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Inactive trigger - Restart');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have restarted the mining client.';
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Inactive trigger - Power cycle');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and machine got power cycle.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Inactive trigger - Webhook');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Inactive trigger - Execute');
                            status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerHashrate') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Hashrate trigger - Shut down');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Hashrate trigger - Reboot');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Hashrate trigger - Restart');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have restarted the mining client.';
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Hashrate trigger - Power cycle');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and machine got power cycle.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Hashrate trigger - Start mining');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Hashrate trigger - Stop mining');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Inactive trigger - Webhook');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Inactive trigger - Execute');
                            status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerEfficiency') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Efficiency trigger - Shut down');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Efficiency trigger - Reboot');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Efficiency trigger - Restart');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Efficiency trigger - Start mining');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Efficiency trigger - Stop mining');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Efficiency trigger - Webhook');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Efficiency trigger - Execute');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Efficiency trigger - Template');
                            status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and config template was loaded.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerConsumption') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Consumption trigger - Shut down');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Consumption trigger - Reboot');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Consumption trigger - Restart');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Consumption trigger - Start mining');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Consumption trigger - Stop mining');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Consumption trigger - Webhook');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Consumption trigger - Execute');
                            status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerConsumptionIncrease') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Consumption trigger - Shut down');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Consumption trigger - Reboot');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Consumption trigger - Restart');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Consumption trigger - Start mining');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Consumption trigger - Stop mining');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Consumption trigger - Webhook');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Consumption trigger - Execute');
                            status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerRejected') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Rejected shares trigger - Shut down');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and the machine was shut down');
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Rejected shares trigger - Reboot');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Rejected shares trigger - Power cycle');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Rejected shares trigger - Restart');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Rejected shares trigger - Start mining');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Rejected shares trigger - Stop mining');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Rejected shares trigger - Webhook');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Rejected shares trigger - Execute');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Rejected shares trigger - Template');
                            status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerShareCount') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Rejected shares trigger - Shut down');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and the machine was shut down');
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Rejected shares trigger - Reboot');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Rejected shares trigger - Power cycle');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Rejected shares trigger - Restart');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Rejected shares trigger - Start mining');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Rejected shares trigger - Stop mining');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Rejected shares trigger - Webhook');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Rejected shares trigger - Execute');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Rejected shares trigger - Template');
                            status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerPoolError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Pool error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Pool error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Pool error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Pool error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Pool error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Pool error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Pool error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Pool error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Pool error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerConfigError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Config error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Config error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Config error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Config error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Config error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Config error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Config error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Config error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Config error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerAuthError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Auth error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Auth error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Auth error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Auth error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Auth error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Auth error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Auth error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Auth error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Auth error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerDriverError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Driver error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Driver error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Driver error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Driver error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Driver error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Driver error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Driver error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Driver error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Driver error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerGpuError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('GPU error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('GPU error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('GPU error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('GPU error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('GPU error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('GPU error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('GPU error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('GPU error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('GPU error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerClientError') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Shutdown') != -1) {
                            status_message = _('Client error trigger - Shut down');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was shut down') + '.';
                        } else if (action.indexOf('Reboot') != -1) {
                            status_message = _('Client error trigger - Reboot');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was rebooted');
                        } else if (action.indexOf('Power cycle') != -1) {
                            status_message = _('Client error trigger - Power cycle');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + ' ' + _('and machine got power cycle');
                        } else if (action.indexOf('Restart') != -1) {
                            status_message = _('Client error trigger - Restart');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining client was restarted');
                        } else if (action.indexOf('Start') != -1) {
                            status_message = _('Client error trigger - Start mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining started');
                        } else if (action.indexOf('Stop') != -1) {
                            status_message = _('Client error trigger - Stop mining');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining stopped');
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Client error trigger - Webhook');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and webhook fired');
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Client error trigger - Execute');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and script was executed');
                        } else if (action.indexOf('Template') != -1) {
                            status_message = _('Client error trigger - Template');
                            status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and config template was loaded');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'triggerEarnings') {
                        iconType = 'triggers';
                        typeFilter = 'triggersFilter';
                        var action = notificationsData[messageIndex][1];
                        if (action.indexOf('Restart') != -1) {
                            status_message = _('Earnings trigger - Restart');
                            status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted profit switch';
                        } else if (action.indexOf('Webhook') != -1) {
                            status_message = _('Earnings trigger - Webhook');
                            status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                        } else if (action.indexOf('Execute') != -1) {
                            status_message = _('Earnings trigger - Execute');
                            status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'scheduler') {
                        iconType = 'scheduler';
                        typeFilter = 'schedulerFilter';
                        if (notificationsData[messageIndex] == 'Start') {
                            status_message = _('Scheduler has started');
                        } else if (notificationsData[messageIndex] == 'End') {
                            status_message = _('Scheduler has ended');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertTemp') {
                        iconType = 'temp';
                        typeFilter = 'alertsFilter';
                        status_message = _('High temperature');
                        status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + '.';
                    }
                    else if (notificationsData[typeIndex] == 'alertEfficiency') {
                        iconType = 'efficiency';
                        typeFilter = 'alertsFilter';
                        status_message = _('Efficiency drop');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Efficiency drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                        } else {
                            status_description = _('Efficiency drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertOffline') {
                        iconType = 'status_off';
                        typeFilter = 'alertsFilter';
                        status_message = _('Worker went offline');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Offline alert sent to') + ' ' + notificationsData[messageIndex][1];
                        } else {
                            status_description = _('Offline alert sent to') + ' Admin';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertInactive') {
                        iconType = 'status_off';
                        typeFilter = 'alertsFilter';
                        status_message = _('Worker became inactive');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Inactive alert sent to') + ' ' + notificationsData[messageIndex][1];
                        } else {
                            status_description = _('Inactive alert sent to') + ' Admin';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertOnline') {
                        iconType = 'status_on';
                        typeFilter = 'alertsFilter';
                        status_message = _('Worker came online');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Online alert sent to') + ' ' + notificationsData[messageIndex][1];
                        } else {
                            status_description = _('Online alert sent to') + ' Admin';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertAsic') {
                        iconType = 'alerts';
                        typeFilter = 'alertsFilter';
                        status_message = _('ASIC alert');
                        status_description = 'There was error: ' + notificationsData[messageIndex][0] + '.';
                    }
                    else if (notificationsData[typeIndex] == 'alertHashrate') {
                        iconType = 'hashrate';
                        typeFilter = 'alertsFilter';
                        status_message = _('Hashrate drop');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Hashrate drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                        } else {
                            status_description = _('Hashrate drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertConsumptionUp') {
                        iconType = 'consumption';
                        typeFilter = 'alertsFilter';
                        status_message = _('Consumption increase');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Consumption increase alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                        } else {
                            status_description = _('Consumption increase alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'alertConsumptionDown') {
                        iconType = 'consumption';
                        typeFilter = 'alertsFilter';
                        status_message = _('Consumption drop');
                        if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                            status_description = _('Consumption drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                        } else {
                            status_description = _('Consumption drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'switch') {
                        iconType = 'profit_switch';
                        typeFilter = 'profitSwitchFilter';
                        status_message = _('Profit switch');
                        var reward1 = '';
                        var reward2 = '';
                        if (typeof notificationsData[messageIndex][2] != 'undefined' && notificationsData[messageIndex][2] != -999999) {
                            reward1 = ' (' + (notificationsData[messageIndex][2] * currencyValue).toFixed(2) + ' ' + currency + ')';
                        }
                        if (typeof notificationsData[messageIndex][3] != 'undefined' && notificationsData[messageIndex][3] != -999999) {
                            reward2 = ' (' + (notificationsData[messageIndex][3] * currencyValue).toFixed(3) + ' ' + currency + ')';
                        }
                        status_description = '' + notificationsData[messageIndex][0] + reward1 + ' → ' + notificationsData[messageIndex][1] + reward2;
                    }
                    else if (notificationsData[typeIndex] == 'clientChangeGpu') {
                        iconType = 'client_switch';
                        typeFilter = 'manualActionFilter';
                        status_message = _('Mining client changed (GPU)');
                        status_description = 'Now mining with ' + notificationsData[messageIndex][0] + '.';
                    }
                    else if (notificationsData[typeIndex] == 'clientChangeCpu') {
                        iconType = 'client_switch';
                        typeFilter = 'manualActionFilter';
                        status_message = _('Mining client changed (CPU)');
                        status_description = 'Now mining with ' + notificationsData[messageIndex][0] + '.';
                    }
                    else if (notificationsData[typeIndex] == 'changeProfitSwitch') {
                        iconType = 'profit_switch';
                        typeFilter = 'manualActionFilter';
                        if (notificationsData[messageIndex][0] == 'enabled') {
                            status_message = _('Profit switch enabled');
                        } else if (notificationsData[messageIndex][0] == 'disabled') {
                            status_message = _('Profit switch disabled');
                        } else if (notificationsData[messageIndex][0] == 'updated') {
                            status_message = _('Profit switch updated');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'manual') {
                        if (notificationsData[messageIndex][0] == 'shutdown') {
                            iconType = 'shutdown';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Manual shut down');
                        } else if (notificationsData[messageIndex][0] == 'powercycle') {
                            iconType = 'power_cycle';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Manual power cycle');
                        } else if (notificationsData[messageIndex][0] == 'restart') {
                            iconType = 'restart';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Manual restart');
                        } else if (notificationsData[messageIndex][0] == 'reboot') {
                            iconType = 'reboot';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Manual reboot');
                        } else if (notificationsData[messageIndex][0] == 'stop') {
                            iconType = 'stop';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Mining stopped');
                        } else if (notificationsData[messageIndex][0] == 'start') {
                            iconType = 'start';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Mining started');
                        }else if (notificationsData[messageIndex][0] == 'enable') {
                            iconType = 'start';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Enable');
                        }else if (notificationsData[messageIndex][0] == 'reMiner') {
                            iconType = 'restart';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Manual reMiner');
                        }
                    }
                    else if (notificationsData[typeIndex] == 'configChange') {
                        iconType = 'config';
                        typeFilter = 'manualActionFilter';
                        status_message = _('Config updated');
                    }
                    else if (notificationsData[typeIndex] == 'clocktune') {
                        iconType = 'clocktune';
                        typeFilter = 'manualActionFilter';
                        status_message = _('Overclock updated');
                    }
                    else if (notificationsData[typeIndex] == 'consoleAlert') {
                        iconType = 'console';
                        typeFilter = 'consoleFilter';
                        status_description = notificationsData[messageIndex][2];

                        if (notificationsData[messageIndex][0].indexOf('Driver error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            var gpuListAddOn = '';
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                var gpuList = String(notificationsData[messageIndex][1]).split(",");
                                jQuery.each(gpuList, function (i, gpuId) {
                                    gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                });
                                if (gpuListAddOn.length > 2) {
                                    gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                }
                                status_description += gpuListAddOn;
                            }
                            status_message = _('Driver error') + ' (' + errorsCount + 'x)';
                        } else if (notificationsData[messageIndex][0].indexOf('Pool error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            status_message = _('Pool error') + ' (' + errorsCount + 'x)';
                        }else if (notificationsData[messageIndex][0].indexOf('Error report') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            status_message = _('Error report') + ' (' + errorsCount + 'x)';
                            status_description = notificationsData[messageIndex][3];
                        } else if (notificationsData[messageIndex][0].indexOf('Config error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            status_message = _('Config error') + ' (' + errorsCount + 'x)';
                        } else if (notificationsData[messageIndex][0].indexOf('GPU error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            var gpuListAddOn = '';
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                var gpuList = String(notificationsData[messageIndex][1]).split(",");
                                jQuery.each(gpuList, function (i, gpuId) {
                                    gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                });
                                if (gpuListAddOn.length > 2) {
                                    gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                }
                                status_description += gpuListAddOn;
                            }
                            status_message = _('GPU error') + ' (' + errorsCount + 'x)';
                        } else if (notificationsData[messageIndex][0].indexOf('Mining client error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            status_message = _('Mining client error') + ' (' + errorsCount + 'x)';
                        } else if (notificationsData[messageIndex][0].indexOf('Authorization error') != -1) {
                            var errorsCount = notificationsData[messageIndex][0].split(" (");
                            errorsCount = errorsCount[1];
                            errorsCount = errorsCount.replace(')', '');
                            status_message = _('Authorization error') + ' (' + errorsCount + 'x)';
                        }
                    }
                    else if (notificationsData[typeIndex] == 'biosFlash') {
                        iconType = 'bios_flashing';
                        if (notificationsData[messageIndex][0].indexOf('BIOS flasher') != -1) {
                            if (typeof notificationsData[messageIndex][2] != 'undefined' && notificationsData[messageIndex][2] != '') {
                                status_message = _('BIOS flasher');
                                status_description = notificationsData[messageIndex][2];
                            }
                        }
                    }
                    else if (notificationsData[typeIndex] == 'pauseAlerts') {
                        if (typeof notificationsData[messageIndex][0] != 'undefined' && notificationsData[messageIndex][0] != '') {
                            if (notificationsData[messageIndex][0] == "0") {
                                iconType = 'alerts_on';
                                status_message = _('Resume alerts');
                                status_description = _('You will continue to receive alerts') + '.';
                            } else if (notificationsData[messageIndex][0] == "1") {
                                iconType = 'alerts_off';
                                status_message = _('Pause alerts');
                                status_description = _('Alerts were paused permanently or until you turn them back on') + '.';
                            } else {
                                iconType = 'alerts_off';
                                var seconds = notificationsData[messageIndex][0];
                                var timeStr = '';
                                switch (seconds) {
                                    case '30':
                                        timeStr = _('30 minutes');
                                        break;
                                    case '60':
                                        timeStr = _('1 hour');
                                        break;
                                    case '360':
                                        timeStr = _('6 hours');
                                        break;
                                    case '720':
                                        timeStr = _('12 hours');
                                        break;
                                    case '1440':
                                        timeStr = _('24 hours');
                                        break;
                                    default:
                                        timeStr = _('24 hours');
                                        break;
                                }
                                status_message = _('Pause alerts');
                                status_description = _('Alerts were paused for ') + ' ' + timeStr + '.';
                            }
                        }
                    }
                    else if (notificationsData[typeIndex] == 'pauseTriggers') {
                        if (typeof notificationsData[messageIndex][0] != 'undefined' && notificationsData[messageIndex][0] != '') {
                            if (notificationsData[messageIndex][0] == "0") {
                                iconType = 'triggers_on';
                                status_message = _('Resume triggers');
                                status_description = _('Worker will continue to receive triggers') + '.';
                            } else if (notificationsData[messageIndex][0] == "1") {
                                iconType = 'triggers_off';
                                status_message = _('Pause triggers');
                                status_description = _('Triggers were paused permanently or until you turn them back on') + '.';
                            } else {
                                iconType = 'triggers_off';
                                var seconds = notificationsData[messageIndex][0];
                                var timeStr = '';
                                switch (seconds) {
                                    case '30':
                                        timeStr = _('30 minutes');
                                        break;
                                    case '60':
                                        timeStr = _('1 hour');
                                        break;
                                    case '360':
                                        timeStr = _('6 hours');
                                        break;
                                    case '720':
                                        timeStr = _('12 hours');
                                        break;
                                    case '1440':
                                        timeStr = _('24 hours');
                                        break;
                                    default:
                                        timeStr = _('24 hours');
                                        break;
                                }
                                status_message = _('Pause triggers');
                                status_description = _('Triggers were paused for') + ' ' + timeStr + '.';
                            }
                        }
                    }
                    if (status_message != '') {
                        notificationString = '<div class="tr ' + typeFilter + '"><div class="td flex_time">' + formattedTime + '</div><div data-responsive="' + _('Worker') + '" class="td rmv1 flex_worker">' + notificationsData[workerNameIndex] + '</div><div data-responsive="' + _('Event') + '" class="td rmv1 flex_event"><div class="icon ' + iconType + '"></div><b>' + status_message + '</b><br><small>' + status_description + '</small></div><div class="td rmv1 flex_action"><a href="/worker#' + worker + '" class="button green" title="">' + _mx('View worker') + '</a></div></div>' + notificationString;
                    }
                }
            });
        });
        if (notificationString != '') {
            $('.logs_box').html(notificationString);
            $('#loding_id .loading').hide()
            $('#loding_id .txt_x').show()
            $('#loding_id .txt_x1').hide()
            $('#loding_id').show()
        } else {
            $('#loding_id .loading').hide()
            $('#loding_id .txt_x1').hide()
            $('#loding_id .txt_x').hide()
            $('#loding_id').hide()
            $('.content.logs').html('<div class="empty_state"><div class="empty_icon diagnostic"></div><div class="title">' + _mx('No logs') + '</div><div class="text">' + _mx("There is no miner's log within 24 hours") + '</div><a href="/workers" class="button green">' + _mx('Manage your workers') + '</a></div>');
        }

        preloaderHide();
    });
});
$('#dataTriggersFilter').click(function () {
    if (triggersFilter == 1) {
        triggersFilter = 0
        $(this).removeClass("checked");
        // $('.triggersFilter').hide();
    } else {
        triggersFilter = 1;
        $(this).addClass("checked");
        // $('.triggersFilter').show();
    }
    searchClick()
});
$('#dataAlertsFilter').click(function () {
    if (alertsFilter == 1) {
        alertsFilter = 0
        $(this).removeClass("checked");
        // $('.alertsFilter').hide();
    } else {
        alertsFilter = 1;
        $(this).addClass("checked");
        // $('.alertsFilter').show();
    }
    searchClick()
});
$('#dataProfitSwitchFilter').click(function () {
    if (profitSwitchFilter == 1) {
        profitSwitchFilter = 0
        $(this).removeClass("checked");
        // $('.profitSwitchFilter').hide();
    } else {
        profitSwitchFilter = 1;
        $(this).addClass("checked");
        // $('.profitSwitchFilter').show();
    }
    searchClick()
});
$('#dataManualActionFilter').click(function () {
    if (manualActionFilter == 1) {
        manualActionFilter = 0
        $(this).removeClass("checked");
        // $('.manualActionFilter').hide();
    } else {
        manualActionFilter = 1;
        $(this).addClass("checked");
        // $('.manualActionFilter').show();
    }
    searchClick()
});
$('#dataConsoleFilter').click(function () {
    if (consoleFilter == 1) {
        consoleFilter = 0
        $(this).removeClass("checked");
        // $('.consoleFilter').hide();
    } else {
        consoleFilter = 1;
        $(this).addClass("checked");
        // $('.consoleFilter').show();
    }
    searchClick()
});
$('#dataSchedulerFilter').click(function () {
    if (schedulerFilter == 1) {
        schedulerFilter = 0
        $(this).removeClass("checked");
        // $('.schedulerFilter').hide();
    } else {
        schedulerFilter = 1;
        $(this).addClass("checked");
        // $('.schedulerFilter').show();
    }
    searchClick()
});
$('#search_logs').keyup(function () {
     filterSearch = $(this).val().toLowerCase();
    searchClick(1)
    // if (searchQuery == '') {
    //     $('.logs_box .tr').show();
    // } else {
    //     searchQuery = searchQuery.toLowerCase();
    //     $('.logs_box .tr').each(function () {
    //         if (typeof $(this).text() != 'undefined' && $(this).text() != '') {
    //             var profileStr = ($(this).text()).toLowerCase().replace('View worker', '');
    //             if (profileStr != '') {
    //                 profileStr = profileStr.toLowerCase();
    //                 if (profileStr.indexOf(searchQuery) != -1) {
    //                     $(this).show();
    //                 } else {
    //                     $(this).hide();
    //                 }
    //             }
    //         }
    //     });
    // }
});

function getListMsg(type) {
    $('#loding_id .loading').show()
    $('#loding_id .txt_x').hide()
    $('#loding_id .txt_x1').hide()
    $('#loding_id').show()
    var monthNames = [_mx("Jan"), _mx("Feb"), _mx("Mar"), _mx("Apr"), _mx("May"), _mx("Jun"), _mx("Jul"), _mx("Aug"), _mx("Sep"), _mx("Oct"), _mx("Nov"), _mx("Dec")];
    $.ajax({
        url:`/activity_api.php?c=${pageNumber}&id=${cacheNumver}&type=${typeSearch}&filter=${filterSearch}`,
        dataType:'json',
        type:'get',
        success:function (res) {
            let notificationString=''
            cacheNumver=res.id
            $.each(res.log, function (timestamp, timestampData) {
                $.each(timestampData, function (worker, workerData) {
                    var d = new Date((timestamp) * 1000);
                    var day = d.getUTCDate();
                    var suffix = _mx4('th');
                    if (day % 10 == 1 && day != 11) suffix = _mx('st');
                    if (day % 10 == 2 && day != 12) suffix = _mx2('nd');
                    if (day % 10 == 3 && day != 13) suffix = _mx3('rd');
                    var month = d.getUTCMonth();
                    var year = d.getUTCFullYear();
                    var hours = d.getUTCHours();
                    var minutes = "0" + d.getUTCMinutes();
                    var seconds = "0" + d.getUTCSeconds();
                    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2) + '<small>' + day + suffix + ' ' + monthNames[month] + ' ' + year + ' ' + '</small>';
                    for (var i = 0; i < workerData.length; i++) {
                        var status_message = '';
                        var status_description = '';
                        var iconType = '';
                        var typeFilter = '';
                        notificationsData = workerData[i];
                        if (notificationsData[typeIndex] == 'triggerTemp') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = _('Temperature trigger - Change fans');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and fans were set to ' + action + '%.';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Temperature trigger - Shut down');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was shut down.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Temperature trigger - Reboot');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was rebooted.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Temperature trigger - Restart');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining client was restarted.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Temperature trigger - Start mining');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Temperature trigger - Stop mining');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Temperature trigger - Webhook');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Temperature trigger - Execute');
                                status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and script was executed';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = _('Temperature trigger - ClockTune');
                                status_description = 'Temperature reached ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerMem') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = _('Memory temperature trigger - Change fans');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and fans were set to ' + action + '%.';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Memory temperature trigger - Shut down');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was shut down.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Memory temperature trigger - Reboot');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and machine was rebooted.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Memory temperature trigger - Restart');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining client was restarted.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Memory temperature trigger - Start mining');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Memory temperature trigger - Stop mining');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Memory temperature trigger - Webhook');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Memory temperature trigger - Execute');
                                status_description = 'Memory temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + ' and script was executed.';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = _('Memory temperature trigger - ClockTune');
                                status_description = 'Memory temperature reached ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerGpuCount') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('GPU count trigger - Shut down');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and machine was shut down.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('GPU count trigger - Reboot');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and machine was rebooted.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('GPU count trigger - Power cycle');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining client got power cycle.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('GPU count trigger - Start mining');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('GPU count trigger - Stop mining');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('GPU count trigger - Webhook');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('GPU count trigger - Execute');
                                status_description = 'The number of detected GPUs was ' + notificationsData[messageIndex][0] + ' and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerUnresponsive') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Email') != -1) {
                                status_message = _('Unresponsive trigger');
                                status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes so we have sent you an e-mail.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Unresponsive trigger - Webhook');
                                status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Unresponsive trigger - Execute');
                                status_description = 'Worker was unresponsive for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerTime') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (notificationsData[messageIndex][0].indexOf(':') == -1) {
                                notificationsData[messageIndex][0] = notificationsData[messageIndex][0] + ':00';
                            }
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = _('Time trigger - Change fans');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have set fans to ' + action + '%.';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Time trigger - Shut down');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Time trigger - Reboot');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Time trigger - Restart');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have restarted the mining client.';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = _('Time trigger - ClockTune');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' so we have applied new ClockTune profile.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Time trigger - Start mining');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and the mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Time trigger - Stop mining');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and the mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Time trigger - Webhook');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Time trigger - Execute');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and script was executed.';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Time trigger - Template');
                                status_description = 'Time was ' + notificationsData[messageIndex][0] + ' and config template was loaded.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerIdle') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Idle trigger - Shut down');
                                status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Idle trigger - Reboot');
                                status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Idle trigger - Restart');
                                status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes so we have restarted the mining client.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Idle trigger - Webhook');
                                status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Idle trigger - Execute');
                                status_description = 'Worker was idle for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerInactive') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Inactive trigger - Shut down');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Inactive trigger - Reboot');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Inactive trigger - Restart');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes so we have restarted the mining client.';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Inactive trigger - Power cycle');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and machine got power cycle.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Inactive trigger - Webhook');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Inactive trigger - Execute');
                                status_description = 'Worker was inactive for ' + notificationsData[messageIndex][0] + ' minutes and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerHashrate') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Hashrate trigger - Shut down');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Hashrate trigger - Reboot');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Hashrate trigger - Restart');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% so we have restarted the mining client.';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Hashrate trigger - Power cycle');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and machine got power cycle.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Hashrate trigger - Start mining');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Hashrate trigger - Stop mining');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Inactive trigger - Webhook');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Inactive trigger - Execute');
                                status_description = 'Hashrate dropped for ' + Math.abs(notificationsData[messageIndex][0]) + '% and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerEfficiency') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Efficiency trigger - Shut down');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Efficiency trigger - Reboot');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Efficiency trigger - Restart');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Efficiency trigger - Start mining');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Efficiency trigger - Stop mining');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Efficiency trigger - Webhook');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Efficiency trigger - Execute');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Efficiency trigger - Template');
                                status_description = 'Efficiency dropped to ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and config template was loaded.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerConsumption') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Consumption trigger - Shut down');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Consumption trigger - Reboot');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Consumption trigger - Restart');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Consumption trigger - Start mining');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Consumption trigger - Stop mining');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Consumption trigger - Webhook');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Consumption trigger - Execute');
                                status_description = 'Consumption dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerConsumptionIncrease') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Consumption trigger - Shut down');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have shut down the machine';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Consumption trigger - Reboot');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have rebooted the machine.';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Consumption trigger - Restart');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted the mining client.';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Consumption trigger - Start mining');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining started.';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Consumption trigger - Stop mining');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and mining stopped.';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Consumption trigger - Webhook');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Consumption trigger - Execute');
                                status_description = 'Consumption increased by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerRejected') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Rejected shares trigger - Shut down');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and the machine was shut down');
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Rejected shares trigger - Reboot');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Rejected shares trigger - Power cycle');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Rejected shares trigger - Restart');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Rejected shares trigger - Start mining');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Rejected shares trigger - Stop mining');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Rejected shares trigger - Webhook');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Rejected shares trigger - Execute');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Rejected shares trigger - Template');
                                status_description = _('Number of rejected shares was') + ' ' + notificationsData[messageIndex][0] + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerShareCount') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Rejected shares trigger - Shut down');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and the machine was shut down');
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Rejected shares trigger - Reboot');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Rejected shares trigger - Power cycle');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Rejected shares trigger - Restart');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Rejected shares trigger - Start mining');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Rejected shares trigger - Stop mining');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Rejected shares trigger - Webhook');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Rejected shares trigger - Execute');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Rejected shares trigger - Template');
                                status_description = _('Shares were the same for') + ' ' + notificationsData[messageIndex][0] + ' ' + _('minutes') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerPoolError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Pool error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Pool error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Pool error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Pool error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Pool error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Pool error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Pool error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Pool error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Pool error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('pool errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerConfigError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Config error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Config error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Config error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Config error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Config error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Config error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Config error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Config error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Config error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('config errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerAuthError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Auth error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Auth error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Auth error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Auth error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Auth error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Auth error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Auth error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Auth error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Auth error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('auth errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerDriverError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Driver error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Driver error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Driver error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Driver error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Driver error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Driver error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Driver error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Driver error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Driver error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('driver errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerGpuError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('GPU error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('GPU error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('GPU error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('GPU error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('GPU error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('GPU error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('GPU error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('GPU error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('GPU error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('GPU errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerClientError') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = _('Client error trigger - Shut down');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was shut down') + '.';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = _('Client error trigger - Reboot');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was rebooted');
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = _('Client error trigger - Power cycle');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + ' ' + _('and machine got power cycle');
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = _('Client error trigger - Restart');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining client was restarted');
                            } else if (action.indexOf('Start') != -1) {
                                status_message = _('Client error trigger - Start mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining started');
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = _('Client error trigger - Stop mining');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and mining stopped');
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Client error trigger - Webhook');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and webhook fired');
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Client error trigger - Execute');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and script was executed');
                            } else if (action.indexOf('Template') != -1) {
                                status_message = _('Client error trigger - Template');
                                status_description = notificationsData[messageIndex][0] + ' ' + _('client errors detected') + ' ' + _('and config template was loaded');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'triggerEarnings') {
                            iconType = 'triggers';
                            typeFilter = 'triggersFilter';
                            var action = notificationsData[messageIndex][1];
                            if (action.indexOf('Restart') != -1) {
                                status_message = _('Earnings trigger - Restart');
                                status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% so we have restarted profit switch';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = _('Earnings trigger - Webhook');
                                status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and webhook fired.';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = _('Earnings trigger - Execute');
                                status_description = 'Earnings dropped by ' + Math.round(Math.abs(notificationsData[messageIndex][0])) + '% and script was executed.';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'scheduler') {
                            iconType = 'scheduler';
                            typeFilter = 'schedulerFilter';
                            if (notificationsData[messageIndex] == 'Start') {
                                status_message = _('Scheduler has started');
                            } else if (notificationsData[messageIndex] == 'End') {
                                status_message = _('Scheduler has ended');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertTemp') {
                            iconType = 'temp';
                            typeFilter = 'alertsFilter';
                            status_message = _('High temperature');
                            status_description = 'Temperature reached ' + convertTemperature(notificationsData[messageIndex][0]) + temperature + '.';
                        }
                        else if (notificationsData[typeIndex] == 'alertEfficiency') {
                            iconType = 'efficiency';
                            typeFilter = 'alertsFilter';
                            status_message = _('Efficiency drop');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Efficiency drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                            } else {
                                status_description = _('Efficiency drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertOffline') {
                            iconType = 'status_off';
                            typeFilter = 'alertsFilter';
                            status_message = _('Worker went offline');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Offline alert sent to') + ' ' + notificationsData[messageIndex][1];
                            } else {
                                status_description = _('Offline alert sent to') + ' Admin';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertInactive') {
                            iconType = 'status_off';
                            typeFilter = 'alertsFilter';
                            status_message = _('Worker became inactive');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Inactive alert sent to') + ' ' + notificationsData[messageIndex][1];
                            } else {
                                status_description = _('Inactive alert sent to') + ' Admin';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertOnline') {
                            iconType = 'status_on';
                            typeFilter = 'alertsFilter';
                            status_message = _('Worker came online');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Online alert sent to') + ' ' + notificationsData[messageIndex][1];
                            } else {
                                status_description = _('Online alert sent to') + ' Admin';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertAsic') {
                            iconType = 'alerts';
                            typeFilter = 'alertsFilter';
                            status_message = _('ASIC alert');
                            status_description = 'There was error: ' + notificationsData[messageIndex][0] + '.';
                        }
                        else if (notificationsData[typeIndex] == 'alertHashrate') {
                            iconType = 'hashrate';
                            typeFilter = 'alertsFilter';
                            status_message = _('Hashrate drop');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Hashrate drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                            } else {
                                status_description = _('Hashrate drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertConsumptionUp') {
                            iconType = 'consumption';
                            typeFilter = 'alertsFilter';
                            status_message = _('Consumption increase');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Consumption increase alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                            } else {
                                status_description = _('Consumption increase alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'alertConsumptionDown') {
                            iconType = 'consumption';
                            typeFilter = 'alertsFilter';
                            status_message = _('Consumption drop');
                            if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                status_description = _('Consumption drop alert sent to') + ' ' + notificationsData[messageIndex][1] + ' (' + notificationsData[messageIndex][0] + '%)';
                            } else {
                                status_description = _('Consumption drop alert sent to') + ' Admin (' + notificationsData[messageIndex][0] + '%)';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'switch') {
                            iconType = 'profit_switch';
                            typeFilter = 'profitSwitchFilter';
                            status_message = _('Profit switch');
                            var reward1 = '';
                            var reward2 = '';
                            if (typeof notificationsData[messageIndex][2] != 'undefined' && notificationsData[messageIndex][2] != -999999) {
                                reward1 = ' (' + (notificationsData[messageIndex][2] * currencyValue).toFixed(2) + ' ' + currency + ')';
                            }
                            if (typeof notificationsData[messageIndex][3] != 'undefined' && notificationsData[messageIndex][3] != -999999) {
                                reward2 = ' (' + (notificationsData[messageIndex][3] * currencyValue).toFixed(3) + ' ' + currency + ')';
                            }
                            status_description = '' + notificationsData[messageIndex][0] + reward1 + ' → ' + notificationsData[messageIndex][1] + reward2;
                        }
                        else if (notificationsData[typeIndex] == 'clientChangeGpu') {
                            iconType = 'client_switch';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Mining client changed (GPU)');
                            status_description = 'Now mining with ' + notificationsData[messageIndex][0] + '.';
                        }
                        else if (notificationsData[typeIndex] == 'clientChangeCpu') {
                            iconType = 'client_switch';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Mining client changed (CPU)');
                            status_description = 'Now mining with ' + notificationsData[messageIndex][0] + '.';
                        }
                        else if (notificationsData[typeIndex] == 'changeProfitSwitch') {
                            iconType = 'profit_switch';
                            typeFilter = 'manualActionFilter';
                            if (notificationsData[messageIndex][0] == 'enabled') {
                                status_message = _('Profit switch enabled');
                            } else if (notificationsData[messageIndex][0] == 'disabled') {
                                status_message = _('Profit switch disabled');
                            } else if (notificationsData[messageIndex][0] == 'updated') {
                                status_message = _('Profit switch updated');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'manual') {
                            if (notificationsData[messageIndex][0] == 'shutdown') {
                                iconType = 'shutdown';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Manual shut down');
                            } else if (notificationsData[messageIndex][0] == 'powercycle') {
                                iconType = 'power_cycle';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Manual power cycle');
                            } else if (notificationsData[messageIndex][0] == 'restart') {
                                iconType = 'restart';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Manual restart');
                            } else if (notificationsData[messageIndex][0] == 'reboot') {
                                iconType = 'reboot';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Manual reboot');
                            } else if (notificationsData[messageIndex][0] == 'stop') {
                                iconType = 'stop';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Mining stopped');
                            } else if (notificationsData[messageIndex][0] == 'start') {
                                iconType = 'start';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Mining started');
                            }else if (notificationsData[messageIndex][0] == 'enable') {
                                iconType = 'start';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Enable');
                            }else if (notificationsData[messageIndex][0] == 'reMiner') {
                                iconType = 'restart';
                                typeFilter = 'manualActionFilter';
                                status_message = _('Manual reMiner');
                            }
                        }
                        else if (notificationsData[typeIndex] == 'configChange') {
                            iconType = 'config';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Config updated');
                        }
                        else if (notificationsData[typeIndex] == 'clocktune') {
                            iconType = 'clocktune';
                            typeFilter = 'manualActionFilter';
                            status_message = _('Overclock updated');
                        }
                        else if (notificationsData[typeIndex] == 'consoleAlert') {
                            iconType = 'console';
                            typeFilter = 'consoleFilter';
                            status_description = notificationsData[messageIndex][2];

                            if (notificationsData[messageIndex][0].indexOf('Driver error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                var gpuListAddOn = '';
                                if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                    var gpuList = String(notificationsData[messageIndex][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                    status_description += gpuListAddOn;
                                }
                                status_message = _('Driver error') + ' (' + errorsCount + 'x)';
                            } else if (notificationsData[messageIndex][0].indexOf('Pool error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                status_message = _('Pool error') + ' (' + errorsCount + 'x)';
                            }else if (notificationsData[messageIndex][0].indexOf('Error report') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                status_message = _('Error report') + ' (' + errorsCount + 'x)';
                                status_description = notificationsData[messageIndex][3];
                            } else if (notificationsData[messageIndex][0].indexOf('Config error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                status_message = _('Config error') + ' (' + errorsCount + 'x)';
                            } else if (notificationsData[messageIndex][0].indexOf('GPU error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                var gpuListAddOn = '';
                                if (typeof notificationsData[messageIndex][1] != 'undefined' && notificationsData[messageIndex][1] != '') {
                                    var gpuList = String(notificationsData[messageIndex][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                    status_description += gpuListAddOn;
                                }
                                status_message = _('GPU error') + ' (' + errorsCount + 'x)';
                            } else if (notificationsData[messageIndex][0].indexOf('Mining client error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                status_message = _('Mining client error') + ' (' + errorsCount + 'x)';
                            } else if (notificationsData[messageIndex][0].indexOf('Authorization error') != -1) {
                                var errorsCount = notificationsData[messageIndex][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                status_message = _('Authorization error') + ' (' + errorsCount + 'x)';
                            }
                        }
                        else if (notificationsData[typeIndex] == 'biosFlash') {
                            iconType = 'bios_flashing';
                            if (notificationsData[messageIndex][0].indexOf('BIOS flasher') != -1) {
                                if (typeof notificationsData[messageIndex][2] != 'undefined' && notificationsData[messageIndex][2] != '') {
                                    status_message = _('BIOS flasher');
                                    status_description = notificationsData[messageIndex][2];
                                }
                            }
                        }
                        else if (notificationsData[typeIndex] == 'pauseAlerts') {
                            if (typeof notificationsData[messageIndex][0] != 'undefined' && notificationsData[messageIndex][0] != '') {
                                if (notificationsData[messageIndex][0] == "0") {
                                    iconType = 'alerts_on';
                                    status_message = _('Resume alerts');
                                    status_description = _('You will continue to receive alerts') + '.';
                                } else if (notificationsData[messageIndex][0] == "1") {
                                    iconType = 'alerts_off';
                                    status_message = _('Pause alerts');
                                    status_description = _('Alerts were paused permanently or until you turn them back on') + '.';
                                } else {
                                    iconType = 'alerts_off';
                                    var seconds = notificationsData[messageIndex][0];
                                    var timeStr = '';
                                    switch (seconds) {
                                        case '30':
                                            timeStr = _('30 minutes');
                                            break;
                                        case '60':
                                            timeStr = _('1 hour');
                                            break;
                                        case '360':
                                            timeStr = _('6 hours');
                                            break;
                                        case '720':
                                            timeStr = _('12 hours');
                                            break;
                                        case '1440':
                                            timeStr = _('24 hours');
                                            break;
                                        default:
                                            timeStr = _('24 hours');
                                            break;
                                    }
                                    status_message = _('Pause alerts');
                                    status_description = _('Alerts were paused for ') + ' ' + timeStr + '.';
                                }
                            }
                        }
                        else if (notificationsData[typeIndex] == 'pauseTriggers') {
                            if (typeof notificationsData[messageIndex][0] != 'undefined' && notificationsData[messageIndex][0] != '') {
                                if (notificationsData[messageIndex][0] == "0") {
                                    iconType = 'triggers_on';
                                    status_message = _('Resume triggers');
                                    status_description = _('Worker will continue to receive triggers') + '.';
                                } else if (notificationsData[messageIndex][0] == "1") {
                                    iconType = 'triggers_off';
                                    status_message = _('Pause triggers');
                                    status_description = _('Triggers were paused permanently or until you turn them back on') + '.';
                                } else {
                                    iconType = 'triggers_off';
                                    var seconds = notificationsData[messageIndex][0];
                                    var timeStr = '';
                                    switch (seconds) {
                                        case '30':
                                            timeStr = _('30 minutes');
                                            break;
                                        case '60':
                                            timeStr = _('1 hour');
                                            break;
                                        case '360':
                                            timeStr = _('6 hours');
                                            break;
                                        case '720':
                                            timeStr = _('12 hours');
                                            break;
                                        case '1440':
                                            timeStr = _('24 hours');
                                            break;
                                        default:
                                            timeStr = _('24 hours');
                                            break;
                                    }
                                    status_message = _('Pause triggers');
                                    status_description = _('Triggers were paused for') + ' ' + timeStr + '.';
                                }
                            }
                        }
                        if (status_message != '') {
                            notificationString = '<div class="tr ' + typeFilter + '"><div class="td flex_time">' + formattedTime + '</div><div data-responsive="' + _('Worker') + '" class="td rmv1 flex_worker">' + notificationsData[workerNameIndex] + '</div><div data-responsive="' + _('Event') + '" class="td rmv1 flex_event"><div class="icon ' + iconType + '"></div><b>' + status_message + '</b><br><small>' + status_description + '</small></div><div class="td rmv1 flex_action"><a href="/worker#' + worker + '" class="button green" title="">' + _mx('View worker') + '</a></div></div>' + notificationString;
                        }
                    }
                });
            });
            if(notificationString!=''){
                if(type==1){
                    $('.logs_box').html(notificationString);
                }else {
                    $('.logs_box').append(notificationString);
                }

                $('#loding_id .loading').hide()
                $('#loding_id .txt_x').show()
                $('#loding_id .txt_x1').hide()
                $('#loding_id').show()
            }else {
                if(JSON.stringify(res.log)=='{}'&&type==1){
                    $('.logs_box').html('');
                }
                $('#loding_id .loading').hide()
                $('#loding_id .txt_x').hide()
                $('#loding_id .txt_x1').show()
                $('#loding_id').show()
            }

        }
    })
}

function searchClick() {
    let list = $('.checkrow')
    let x=[]
    typeSearch=''
    cacheNumver=0
    $.each(list,function (i,it) {
        if($(it).hasClass('checked')){
            x.push($(it).attr('data-search'))
        }
    })
    typeSearch=x.join(',')
    getListMsg(1)
}





getSiteList()
//获取网吧列表
function getSiteList(){
    $.ajax({
        url:'/QUERY?SITE',
        dataType:'json',
        type:'get',
        success:function (res) {
            site_obj_list=res.SITE
            setDomeSite()
        }
    })
}

//生成选项列表
function setDomeSite() {
    let str=''
    $.each(site_obj_list,function (i,it) {
        if(it.name.indexOf(search_site_input)!=-1||search_site_input==''){
            if(select_site.indexOf(it.id)==-1){
                str+='<div class="item_stie_wk" onclick="clickSite('+it.id+',\''+it.name+'\',this)"><div class="checked"></div><div>'+it.name+'</div></div>'
            }else {
                str+='<div class="item_stie_wk" onclick="clickSite('+it.id+',\''+it.name+'\',this)"><div class="checked select"></div><div>'+it.name+'</div></div>'
            }

        }
    })
    $('.site_list_wk').html(str)
}

//事件选中
function clickSite(id,name,e) {
    if($($(e).find('.checked')).hasClass('select')){
        $($(e).find('.checked')).removeClass('select')
        $('#wx_'+id)[0].remove()
        select_site.splice(select_site.indexOf(id),1)
    }else {
        select_site.push(id)
        $($(e).find('.checked')).addClass('select')
        $('.my_del_wk .item_label').append('<div onclick="removeTag('+id+')" class="x_item_label" id="wx_'+id+'">'+name+'</div>')
    }
    if(select_site.length>0){
        $('#mx_ph').hide()
    }else {
        $('#mx_ph').show()
    }
}

//删除tag
function removeTag(id) {
    $('#wx_'+id)[0].remove()
    select_site.splice(select_site.indexOf(id),1)
    if(select_site.length>0){
        $('#mx_ph').hide()
    }else {
        $('#mx_ph').show()
    }
    setDomeSite()
}

//选择全部
function clickAll() {
    $.each(site_obj_list,function (i,it) {
        if(select_site.indexOf(it.id)==-1){
            select_site.push(it.id)
            $('.my_del_wk .item_label').append('<div onclick="removeTag('+it.id+')" class="x_item_label" id="wx_'+it.id+'">'+it.name+'</div>')
        }
    })
    setDomeSite()
}
//取消全部
function closeAll() {
    select_site=[]
    $('.my_del_wk .item_label').html('')
    setDomeSite()
}

function changeInput(e) {
    search_site_input=$(e).val()
    setDomeSite()
}
$('.my_del_wk').on('click',function () {
    $('.my_site_list').show()
})

$(document).on('click',function (e) {
    let mx=e.target
    if(!$(mx).is('.my_del_wk *')){
        $('.my_site_list').hide()
    }
})

function delLog() {
    if(select_site.length===0){
        setMsgTc('war','请选择场所',2000)
        return
    }
    $('.popupbackground').show()
    $('#del_log').show()
}

function delSubmit(e) {
    if($(e).hasClass('disx')){
        return
    }
    $(e).addClass('disx')
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    $.ajax({
        url:'/activity_api.php',
        type:'get',
        data:{
            del:select_site.join(',')
        },
        success:function () {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
              window.location.reload()
            }, 3000);
        }
    })
}

function closeMode() {
    $('.popupbackground').hide()
    $('#del_log').hide()
}

$('.popupbackground').on('click',function () {
    closeMode()
})
