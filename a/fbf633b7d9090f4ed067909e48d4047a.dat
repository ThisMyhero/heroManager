var tagStart, tagEnd, tagArea, tagSelected, inputTag;
var change = false;
var showAll = false;
var addressEditButton = 0;
var editingTag = '';
optionsValues = jQuery.parseJSON(optionsValues);
// var clientsListFrame = new PerfectScrollbar('#clientsListFrame', {
//     wheelSpeed: 0.2,
//     wheelPropagation: false,
//     minScrollbarLength: 20,
//     suppressScrollX: true
// });
// var coinsListFrame = new PerfectScrollbar('#coinsListFrame', {
//     wheelSpeed: 0.2,
//     wheelPropagation: false,
//     minScrollbarLength: 20,
//     suppressScrollX: true
// });
// clientsListFrame.update();
// coinsListFrame.update();
var ps = [];
var f = 0;
$('.config_dropdown .frame').each(function () {
    ps[f] = new PerfectScrollbar($(this)[0], {
        wheelSpeed: 0.1,
        wheelPropagation: false,
        minScrollbarLength: 20,
        suppressScrollX: true
    });
    f++;
});

$(document.body).on('click', '.addressEditButton', function (event) {
    addressEditButton = 1;
    var tag = $(this).parent().children('b').attr('data-tag');
    var address = $(this).parent().children('small').attr('data-address');
    editingTag = tag;
    if (typeof tag != 'undefined' && typeof address != 'undefined') {
        $(this).closest('.config_dropdown').children('.add_new_element').find('.input_area_with_tag').children('input').val(tag);
        $(this).closest('.config_dropdown').children('.add_new_element').find('.input_area').children('input').val(address);
        $(this).closest('.config_dropdown').children('.add_new_element').find('.input_area').children('input').focus();
    } else {
        tag = $(this).parent().attr('data-tag');
        tag = tag.replace('(WALLET:', '').replace('(POOL:', '').replace(')', '');
        address = $(this).parent().children('small').attr('data-address');
        if (typeof tag != 'undefined' && typeof address != 'undefined') {
            $(this).closest('#options').children('.add_new_element').find('.input_area_with_tag').children('input').val(tag);
            $(this).closest('#options').children('.add_new_element').find('.input_area').children('input').val(address);
            $(this).closest('#options').children('.add_new_element').find('.input_area').children('input').focus();
        }
    }
});
var firstOpenClients = true;
$('#defaultConfigSelect .selected_option').on('click', function () {
    $('.icons_dropdown > .icon img').attr('src', '');
    if (firstOpenClients) {
        $(".icons_dropdown .icon").each(function () {
            var $img = $(this).find('img');
            var icon = $img.data('icon');
            $img.attr('src', $img.attr('src').replace('no.png', icon + '.png'));
        });
        firstOpenClients = false;
    }
    var shown = 0;
    if ($(this).parent().children('.select_dropdown').hasClass('display')) {
        shown = 1;
    }
    $('.select_dropdown').removeClass('display');
    if (shown == 0) {
        $(this).parent().children('.select_dropdown').addClass('display');
        $('#filterCoin').focus();
    }
    clientsListFrame.update();
});
$(document).mousedown(function (e) {
    var elMain = $(e.target).closest('.select_dropdown');
    var elParent = $(e.target).closest('#defaultConfigSelect .selected_option');
    if (elMain.length == 0 && elParent.length == 0) {
        $(".select_dropdown").removeClass('display');
    }
    var elOptions = $(e.target).closest('#options');
    if (elOptions.length == 0 && !$('.tag').is(e.target)) {
        $("#options").removeClass('display');
    }
});
$('.coin_element .selected_coin').on('click', function () {
    var shown = 0;
    if ($(this).parent().children('.icons_dropdown').hasClass('display')) {
        shown = 1;
    }
    $('.icons_dropdown').removeClass('display');
    if (shown == 0) {
        $(this).parent().children('.icons_dropdown').addClass('display');
    }
    coinsListFrame.update();
});
$(document).mousedown(function (e) {
    var elMain = $(e.target).closest('.icons_dropdown');
    var elParent = $(e.target).closest('.coin_element .selected_coin');
    if (elMain.length == 0 && elParent.length == 0) {
        $(".icons_dropdown").removeClass('display');
    }
});
$('#filterCoin').on('focus', function () {
    $(this).parent().parent().addClass('focus');
});
$(document).mousedown(function (e) {
    var elMain = $(e.target).closest('.coin_element');
    if (elMain.length == 0) {
        $(".coin_element").removeClass('focus');
    }
});
$('.config_selected_option').on('click', function () {
    var shown = 0;
    if ($(this).parent().children('.config_dropdown').hasClass('display')) {
        shown = 1;
    }
    $('.config_dropdown').removeClass('display');
    if (shown == 0) {
        $(this).parent().children('.config_dropdown').children('.search_box').children('input').val('');
        $(this).parent().children('.config_dropdown').children('.frame').children('.row').show();
        $(this).parent().children('.config_dropdown').children('.frame').children('.subgroup').show();
        $('.frame').children('.empty_text').remove();
        $(this).parent().children('.config_dropdown').addClass('display');
        $(this).parent().children('.config_dropdown').children('.search_box').children('input').focus();
    }
    for (var i = 0; i < f; i++) {
        ps[i].update();
    }
    resetAddressEditButton();
});
$(document).mousedown(function (e) {
    var elMain = $(e.target).closest('.config_dropdown');
    var elParent = $(e.target).closest('.config_selected_option');
    if (elMain.length == 0 && elParent.length == 0) {
        $(".config_dropdown").removeClass('display');
    }
});
var filterCoin = '';
var filterAlgo = '';
$('#filterType,#filterSystem').on('change', function () {
    var filterType = $('#filterType').val();
    var filterSystem = $('#filterSystem').val();
    var filterClient = $('#filterClient').val().toUpperCase();
    $("#clientsListFrame > .tr[data-client]").hide();
    $("#clientsListFrame > .tr").each(function () {
        if (typeof $(this).data('type') != 'undefined' && ($(this).data('type').indexOf(filterType) >= 0 || ($(this).data('type') == '' && filterType != 'asic')) && $(this).data('system').indexOf(filterSystem) >= 0 && $(this).data('client').indexOf(filterClient) >= 0 && ($(this).data('algo').indexOf(';' + filterAlgo + ';') >= 0 || $(this).data('algo') == ';;;')) {
            $(this).show();
            clientsListFrame.update();
        }
    });
});
var filterPool = '';
$('#coinsListFrame .row').click(function () {
    filterCoin = $(this).find('.ticker').html();
    $('#filterCoin').val(filterCoin);
    filterAlgo = $(this).find('.algo').html();
    filterPool = $(this).find('.ticker[data-pool]').data('pool');
    var filterIcon = $(this).find('.icon').html();
    $('.selected_coin .icon').html(filterIcon).removeClass('noimage');
    var filterType = $('#filterType').val();
    var filterSystem = $('#filterSystem').val();
    var filterClient = $('#filterClient').val().toUpperCase();
    $('.icons_dropdown').removeClass('display');
    $("#clientsListFrame > .tr[data-client]").hide();
    $("#clientsListFrame > .tr").each(function () {
        if (typeof $(this).data('type') != 'undefined' && ($(this).data('type').indexOf(filterType) >= 0 || ($(this).data('type') == '' && filterType != 'asic')) && $(this).data('system').indexOf(filterSystem) >= 0 && $(this).data('client').indexOf(filterClient) >= 0 && ($(this).data('algo').indexOf(';' + filterAlgo + ';') >= 0 || $(this).data('algo') == ';;;')) {
            $(this).show();
            clientsListFrame.update();
        }
    });
});
$('#filterCoin').keyup(function (e) {
    var keyword = $(this).val().toLowerCase();
    $('.icons_dropdown').addClass('display');
    $("#coinsListFrame > .row").hide();
    $("#coinsListFrame > .row").each(function () {
        if (typeof $(this).data('filter') != 'undefined' && $(this).data('filter').toLowerCase().indexOf(keyword) >= 0) {
            $(this).show();
            coinsListFrame.update();
        }
    });
    $('.selected_coin .icon').addClass('noimage').html('');
    filterCoin = keyword;
    filterAlgo = '';
    filterPool = '';
    if (keyword == '' || $('#coinsListFrame > .row:visible').length > 1) {
        $("#clientsListFrame > .tr").show();
        clientsListFrame.update();
    } else {
        if (e.keyCode != 46 && e.keyCode != 8 && $('#coinsListFrame > .row:visible').length == 1) {
            $('#coinsListFrame > .row:visible').trigger("click");
        }
    }
});
$('#filterClient').keyup(function () {
    var filterType = $('#filterType').val();
    var filterSystem = $('#filterSystem').val();
    var filterClient = $('#filterClient').val().toUpperCase();
    $("#clientsListFrame > .tr[data-client]").hide();
    $("#clientsListFrame > .tr").each(function () {
        if (typeof $(this).data('type') != 'undefined' && ($(this).data('type').indexOf(filterType) >= 0 || ($(this).data('type') == '' && filterType != 'asic')) && $(this).data('system').indexOf(filterSystem) >= 0 && $(this).data('client').indexOf(filterClient) >= 0 && ($(this).data('algo').indexOf(';' + filterAlgo + ';') >= 0 || $(this).data('algo') == ';;;')) {
            $(this).show();
            clientsListFrame.update();
        }
    });
});
$('#clientsListFrame > [data-client]').click(function () {
    selectedMiningClient = $(this).data('client');
    $('#defaultConfig').html(selectedMiningClient);
    $('#defaultConfigSelect .select_dropdown').removeClass('display');
    $('#defaultConfigSelect .selected_option b').html(selectedMiningClient);
    $('#defaultConfigSelect .selected_option .tags').html('');
    $(this).find('.tag').each(function () {
        if ($('#defaultConfigSelect .selected_option .tags').html().indexOf($(this).html()) < 0) {
            $(this).clone().appendTo('#defaultConfigSelect .selected_option .tags');
        }
    });
    if (selectedMiningClient == 'ASIC') {
        $('#miner_delay').parent().hide();
    } else {
        $('#miner_delay').parent().show();
    }
    if (showAll == false) {
        $('.client_box').hide();
        $('.client_box').addClass('disabled');
        $('.client_box').children('.checkbox').removeClass('selected');
        $('.client_box').children('.checkbox').attr('data-tooltip', _('Excluded from update'));
        $('.client_box').children('.editbox').children('.textarea').attr('contenteditable', 'false');
    }
    $('#client_' + selectedMiningClient).show();
    $('#client_' + selectedMiningClient).removeClass('disabled');
    $('#client_' + selectedMiningClient).children('.checkbox').addClass('selected');
    $('#client_' + selectedMiningClient).children('.checkbox').attr('data-tooltip', _('Included in update'));
    $('#' + selectedMiningClient).attr('contenteditable', 'true');
    if (filterAlgo != '') {
        var $configField = $('.box').find('.client_box[data-client="' + selectedMiningClient + '"]');
        if ($configField.find('[data-mode="automaticConfig"]').hasClass('selected')) {
            var fCoin = filterCoin.replace(/[^a-z0-9]/gi, '');
            var fAlgo = '';
            var fPool = '';
            if (filterCoin.indexOf(' - ') >= 0 && filterCoin.indexOf('NiceHash') < 0) {
                $configField.find('.aPass').val('c=BTC');
                fCoin = 'BTC';
                fAlgo = filterCoin.split(' - ');
                fAlgo = fAlgo[0].replace(/[^a-z0-9]/gi, '').toUpperCase();
                fPool = filterPool;
                $configField.find('.aPool #poolTag').val(fAlgo);
            } else {
                $configField.find('.aPass').val('x');
                $configField.find('.aPool #poolTag').val(filterCoin);
                if (filterCoin.indexOf('NiceHash') >= 0) {
                    fCoin = 'BTC';
                    $configField.find('.aPool #poolTag').val(filterCoin.split(' - ')[0].replace(/[^a-z0-9]/gi, '').toUpperCase());
                }
            }
            $configField.find('.aCoin .config_dropdown').find('[data-coin]').each(function () {
                if (filterCoin == $(this).data('coin') && filterAlgo == $(this).data('algo')) {
                    var $selectedCoin = $configField.find('.aCoin .config_selected_option .row');
                    $selectedCoin.replaceWith('<div class="row" value="' + $(this).attr('value') + '" data-algo="' + $(this).data('algo') + '" data-coin="' + $(this).data('coin') + '"><div class="image">' + $(this).find('.image').html() + '</div><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + $(this).find('small').html() + '</small></div></div>');
                    return false;
                }
            });
            $configField.find('.aPool .config_dropdown').find('.row').each(function () {
                if ((fAlgo != '' && fAlgo == $(this).find('b').html() && ($(this).find('small').html().toLowerCase().indexOf(fPool.toLowerCase()) >= 0)) || (fAlgo == '' && filterCoin == $(this).find('b').html())) {
                    var $selectedPool = $configField.find('.aPool .config_selected_option .row');
                    if ($(this).find('small').html().indexOf('//') >= 0) {
                        var tempPool = $(this).find('small').html().split('//')[1];
                    } else {
                        var tempPool = $(this).find('small').html();
                    }
                    tempPool = truncate(tempPool, 30);
                    $selectedPool.replaceWith('<div class="row" value="(POOL:' + $(this).find('b').html() + ')"><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + tempPool + '</small></div></div>');
                    $configField.find('.aPool #poolTag').val('');
                    return false;
                }
            });
            $configField.find('.aWallet #walletTag').val(fCoin);
            $configField.find('.aWallet .config_dropdown').find('.row').each(function () {
                if (fCoin == $(this).find('b').html()) {
                    var $selectedWallet = $configField.find('.aWallet .config_selected_option .row');
                    $selectedWallet.replaceWith('<div class="row" value="(WALLET:' + $(this).find('b').html() + ')"><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + $(this).find('small').html() + '</small></div></div>');
                    $configField.find('.aWallet #walletTag').val('');
                    return false;
                }
            });
        }
    }
    getConfig(selectedMiningClient);
});

function resetAddressEditButton() {
    addressEditButton = 0;
    $('.input_area_with_tag').children('input').val('');
    $('.input_area').children('input').val('');
}

$(document.body).on('click', '.aCoin .config_dropdown .row[data-coin]', function (event) {
    console.log('coin',$(this)[0])
    $(this).parent().parent().parent().find('.config_selected_option .row').replaceWith('<div class="row" value="' + $(this).attr('value') + '" data-algo="' + $(this).data('algo') + '" data-coin="' + $(this).data('coin') + '"><div class="image">' + $(this).find('.image').html() + '</div><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + $(this).find('small').html() + '</small></div></div>');
    $(this).parent().children('.row').removeClass('selected');
    $(this).addClass('selected');
    $('.aCoin .config_dropdown').removeClass('display');
    getConfig($(this).closest('[data-client]').data('client'));
    resetAddressEditButton();
});
$(document.body).on('click', '.aPool .config_dropdown .frame_tags > .row', function (event) {
    if (!$(event.target).hasClass('addressEditButton')) {
        console.log('pool',$(this)[0])
        if ($(this).find('small').html().indexOf('//') >= 0) {
            var tempPool = $(this).find('small').html().split('//')[1];
        } else {
            var tempPool = $(this).find('small').html();
        }
        tempPool = truncate(tempPool, 30);
        $(this).parent().parent().parent().find('.config_selected_option .row').replaceWith('<div class="row" data-my-id="'+$(this).attr('my-data-id')+'" my-data-name="'+$(this).attr('my-data-name')+'"  value="(POOL:' + $(this).find('b').html() + ')"><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + tempPool + '</small></div></div>');
        $(this).parent().children('.row').removeClass('selected');
        $(this).addClass('selected');
        $('.aPool .config_dropdown').removeClass('display');
        getConfig($(this).closest('[data-client]').data('client'));
        resetAddressEditButton();
    }
});
$(document.body).on('click', '.aWallet .config_dropdown .frame_tags > .row', function (event) {
    if (!$(event.target).hasClass('addressEditButton')) {
        console.log('aWallet',$(this)[0])
        $(this).parent().parent().parent().find('.config_selected_option .row').replaceWith('<div class="row" data-my-id="'+$(this).attr('my-data-id')+'" my-data-name="'+$(this).attr('my-data-name')+'" value="(WALLET:' + $(this).find('b').html() + ')"><div class="text"><b>' + $(this).find('b').html() + '</b><small>' + $(this).find('small').html() + '</small></div></div>');
        $(this).parent().children('.row').removeClass('selected');
        $(this).addClass('selected');
        $('.aWallet .config_dropdown').removeClass('display');
        getConfig($(this).closest('[data-client]').data('client'));
        resetAddressEditButton();
    }
});
$('#defaultConfigSelectCPU').on('change', function () {
    selectedMiningClientCPU = this.value;
    $('#defaultConfigCPU').html(this.value);
    if (selectedMiningClientCPU != 'disabled') {
        $('#defaultConfigCPU').parent().parent().show();
        if (showAll == false) {
            $('.client_box_cpu').hide();
            $('.client_box_cpu').addClass('disabled');
            $('.client_box_cpu').children('.checkbox').removeClass('selected');
            $('.client_box_cpu').children('.checkbox').attr('data-tooltip', _('Excluded from update'));
            $('.client_box_cpu').children('.editbox').children('.textarea').attr('contenteditable', 'false');
        }
        $('#client_' + selectedMiningClientCPU).show();
        $('#client_' + selectedMiningClientCPU).removeClass('disabled');
        $('#client_' + selectedMiningClientCPU).children('.checkbox').addClass('selected');
        $('#client_' + selectedMiningClientCPU).children('.checkbox').attr('data-tooltip', _('Included in update'));
        $('#' + selectedMiningClientCPU).attr('contenteditable', 'true');
    } else {
        $('.client_box_cpu').hide();
        $('.client_box_cpu').addClass('disabled');
        $('.client_box_cpu').children('.checkbox').removeClass('selected');
        $('.client_box_cpu').children('.checkbox').attr('data-tooltip', _('Excluded from update'));
        $('.client_box_cpu').children('.editbox').children('.textarea').attr('contenteditable', 'false');
        $('#defaultConfigCPU').parent().parent().hide();
    }
});
$('.textarea').on("keydown click", function (event) {
    if ($(this).attr('contenteditable') != 'true') {
        return false;
    }
    c = event.keyCode || event.which;
    if (c == 57 && typeof inputTag !== 'undefined' && inputTag != '') {
        inputTag += ')';
        addTag();
        return false;
    }
    if ((c == 38 || c == 40 || c == 13) && $("#options .frame").html() != '') {
        if (c == 13 && $('#options').find('.selected').length > 0) {
            addTag();
            return false;
        }
        if ($('#options').find('.selected').length > 0) {
            var tagIndex = parseInt($('#options').find('.selected').index());
            $('#options').find('.selected').removeClass('selected');
            if (c == 38) {
                if (tagIndex > 0) {
                    $('#options li').eq(tagIndex - 1).addClass('selected');
                } else {
                    $('#options li').eq($("#options > .frame > li").length - 1).addClass('selected');
                }
            } else if (c == 40) {
                if (tagIndex < $("#options  > .frame > li").length - 1) {
                    $('#options li').eq(tagIndex + 1).addClass('selected');
                } else {
                    $('#options li').eq(0).addClass('selected');
                }
            }
        } else {
            $('#options li').eq(0).addClass('selected');
        }
        tagSelected = $('#options').find('.selected').attr('data-tag');
        return false;
    }
    $("#options").removeClass('display');
    $('.add_new_element .message_err').hide();
    $("#options .frame").html("");
    tagStart = '';
    tagEnd = '';
    tagArea = $(this).attr('id');
    var insideTag = false;
    inputTag = '';
    var inputContent = $('#' + tagArea).html();
    inputContent = inputContent.split('');
    var leftPosition, topPosition;
    if (c != 56 && c != 8 && c != 46) {
        var target = document.createTextNode("\u0001");
        document.getSelection().getRangeAt(0).insertNode(target);
        var inputCaretPos = $('#' + tagArea).html().indexOf("\u0001");
        target.parentNode.removeChild(target);
        var inputPosStart = inputCaretPos;
        var inputPosEnd = 0;
        for (i = inputPosStart - 1; i >= 0; i--) {
            if (inputContent[i] == ')') {
                break;
            }
            if (inputContent[i] == '(') {
                $org = $('#' + tagArea), $el = $org.clone();
                var html = '<span id="tempNode">\u0001</span>';
                $el.html($el.html().substr(0, i) + html + $el.html().substr(i));
                var x = $org.offset().left, y = $org.offset().top, width = $org.outerWidth() - 22,
                    height = $org.outerHeight() - 22;
                $el.css({'position': 'absolute', 'top': y, 'left': x, 'width': width, 'height': height, 'opacity': 0});
                $org.before($el);
                var $span = $el.find('#tempNode');
                var offset = $span.offset(), char_x = offset.left - $(this).scrollLeft(),
                    char_y = offset.top - $(this).scrollTop();
                $('span.cursor').css({'left': char_x, 'top': char_y});
                var insidePos = $span.position();
                var topPosition = y + insidePos.top;
                var leftPosition = x + insidePos.left;
                $el.remove();
                inputPosStart = i;
                insideTag = true;
                break;
            }
        }
        if (insideTag) {
            insideTag = false;
            for (i = inputPosStart + 1; i < inputContent.length; i++) {
                if (inputContent[i] == '(') {
                    insideTag = false;
                    break;
                }
                if (inputContent[i] == ')') {
                    inputPosEnd = i + 1;
                    insideTag = true;
                    break;
                }
            }
        }
        if (insideTag) {
            inputTag = $('#' + tagArea).html().substring(inputPosStart, inputPosEnd - 1);
        } else {
            inputTag = $('#' + tagArea).html().substring(inputPosStart, inputCaretPos);
        }
        tagStart = inputPosStart;
        tagEnd = inputPosEnd;
    }
    if (inputTag != '' && tagArea != '') {
        inputTag = inputTag.toUpperCase();
        if (inputTag.charAt(0) == '(' && inputTag.length > 2) {
            var top = topPosition + 5;
            var left = leftPosition;
            $('#options').css({top: top, left: left});
            var optionsClick = 0;
            $.each(options, function (index) {
                var selectedClass = '';
                if ((options[index].includes("POOL:") && inputTag.includes("POOL:")) || (options[index].includes("WALLET:") && inputTag.includes("WALLET:")) || (options[index].includes("MODE:") && inputTag.includes("MODE:"))) {
                    if (options[index].indexOf(':') > -1) {
                        var optionName = options[index].split(":")[1].slice(0, -1);
                    } else {
                        var optionName = options[index];
                    }
                    if (options[index] == inputTag + ')') {
                        selectedClass = ' selected';
                    }
                    if ((options[index].includes("POOL:") && inputTag.includes("POOL:")) || (options[index].includes("WALLET:") && inputTag.includes("WALLET:"))) {
                        var valStr = optionsValues[options[index]];
                        if ((options[index].includes("WALLET:") && inputTag.includes("WALLET:"))) {
                            if (valStr.length > 12) {
                                valStr = valStr.substr(0, 8) + '...' + valStr.substr(valStr.length - 4, 4);
                            }
                        }
                        $("#options .frame").append('<li data-tag="' + options[index] + '" class="config_tag' + selectedClass + '">' + optionName + '<small data-address="' + optionsValues[options[index]] + '">' + valStr + '</small><div class="icon edit addressEditButton"></div></li>');
                    } else {
                        $("#options .frame").append('<li data-tag="' + options[index] + '" class="config_tag' + selectedClass + '">' + optionName + '</li>');
                    }
                    optionsClick++;
                }
            });
            if (inputTag != '(WORKER') {
                if (optionsClick != 0) {
                    $('#options .search_box').show();
                    $('#options .frame .empty_addresseditor').remove();
                } else {
                    $('#options .search_box').hide();
                    $("#options .frame").append('<div class="empty_addresseditor">' + _('No tags in address editor') + '</div>');
                }
                resetAddressEditButton();
                $("#options .search_box input").val('');
                $("#options .frame li").show();
                $("#options").addClass('display');
                $("#options .add_new_element").hide();
                if (inputTag.includes("POOL:")) {
                    $("#addNewPool").show();
                }
                if (inputTag.includes("WALLET:")) {
                    $("#addNewWallet").show();
                }
                $("#options .search_box input").focus();
                psOptions.update();
            }
        }
    }
});

function addTag() {
    $("#options").removeClass('display');
    $('.add_new_element .message_err').hide();
    $('.popupbackground_empty').hide();
    $("#options .frame").html("");
    var str = $('#' + tagArea).html();
    var preStr = str.substring(0, tagStart);
    if (tagEnd == 0) {
        tagEnd = tagStart + inputTag.length;
    }
    var postStr = str.substring(tagEnd, str.length);
    if ((typeof tagSelected === 'undefined' || tagSelected.trim() == '') && typeof inputTag !== 'undefined' && inputTag.trim() != '') {
        $.each(options, function (index) {
            if (options[index] == inputTag.toUpperCase()) {
                tagSelected = inputTag.toUpperCase();
            }
        });
    }
    if (typeof tagSelected !== 'undefined' && tagSelected.trim() != '') {
        if (str.substr(tagEnd, 7) == '</mark>') {
            var result = preStr + tagSelected + '</mark>&#8291;' + str.substring(tagEnd + 7, str.length);
        } else if (str.substr(tagEnd, 8) == ')</mark>') {
            var result = preStr + tagSelected + '</mark>&#8291;' + str.substring(tagEnd + 8, str.length);
        } else {
            if (tagClick) {
                var subsustring = str.substring(tagEnd + 1, str.length);
                var preSpace = '';
                var suSpace = '';
                if (preStr[preStr.length - 1] != ' ' && preStr[preStr.length - 1] != '.' && preStr[preStr.length - 1] != ':' && preStr[preStr.length - 1] != '@' && preStr[preStr.length - 1] != '#' && preStr[preStr.length - 1] != '/' && preStr[preStr.length - 1] != '"' && preStr[preStr.length - 1] != "'") {
                    preSpace = ' ';
                }
                if (subsustring[0] != ' ' && subsustring[0] != '.' && subsustring[0] != ':' && subsustring[0] != '@' && subsustring[0] != '#' && subsustring[0] != '/' && subsustring[0] != '"' && subsustring[0] != "'") {
                    suSpace = ' ';
                }
                var result = (preStr + preSpace + '<mark class="tag">' + tagSelected + '</mark>&#8291;' + suSpace + subsustring).replace('<mark class="tag"><mark class="tag">', '<mark class="tag">').replace('<mark class="tag undefined"><mark class="tag">', '<mark class="tag">').replace('<mark class="tag"><mark class="tag undefined">', '<mark class="tag undefined">').replace('</mark></mark>', '</mark>');
            } else {
                var subsustring = str.substring(tagEnd - 1, str.length);
                var preSpace = '';
                var suSpace = '';
                if (preStr[preStr.length - 1] != ' ' && preStr[preStr.length - 1] != '.' && preStr[preStr.length - 1] != ':' && preStr[preStr.length - 1] != '@' && preStr[preStr.length - 1] != '#' && preStr[preStr.length - 1] != '/' && preStr[preStr.length - 1] != '"' && preStr[preStr.length - 1] != "'") {
                    preSpace = ' ';
                }
                if (subsustring[0] != ' ' && subsustring[0] != '.' && subsustring[0] != ':' && subsustring[0] != '@' && subsustring[0] != '#' && subsustring[0] != '/' && subsustring[0] != '"' && subsustring[0] != "'") {
                    suSpace = ' ';
                }
                var result = (preStr + preSpace + '<mark class="tag">' + tagSelected + '</mark>&#8291;' + suSpace + subsustring).replace('<mark class="tag"><mark class="tag">', '<mark class="tag">').replace('<mark class="tag undefined"><mark class="tag">', '<mark class="tag">').replace('<mark class="tag"><mark class="tag undefined">', '<mark class="tag undefined">').replace('</mark></mark>', '</mark>');
            }
        }
        tagSelected = '';
        inputTag = '';
        tagStart = 0;
        tagEnd = 0;
        tagClick = false;
        $('#' + tagArea).html(result);
        checkForUndefined();
    }
}

window.addEventListener("keydown", function (e) {
    if ([38, 40, 13].indexOf(e.keyCode) > -1 && $("#options .frame").html() != '') {
        e.preventDefault();
    }
}, false);
var tagClick = false;
$(document.body).on('click', '.config_tag', function (event) {
    if (!$(this).hasClass('partner') && !$(event.target).hasClass('addressEditButton')) {
        tagSelected = $(this).attr('data-tag');
        tagClick = true;
        addTag();
    }
});
$(document.body).on('keyup', '.optionsFilterField', function () {
    var filterValue = $(this).val().toLowerCase();
    $(this).parent().parent().children('.frame').children('.partner').remove();
    $(this).parent().parent().children('.frame').children('.empty_text').remove();
    if (filterValue == '') {
        $(this).parent().parent().children('.frame').children('.config_tag').show();
    } else {
        if ($(this).parents('#options').find('#addNewPool').is(":visible")) {
            var poolListHtml = $(this).parent().parent().children('.frame');
            $.post(window.location.href, {searchPools: filterValue}, function (response) {
                if (response != '0') {
                    altSearch = $.parseJSON(response);
                    var altResults = altSearch.length;
                    var altLoop = 0;
                    var altHtml = '';
                    $.each(altSearch, function (index, value) {
                        ++altLoop;
                        altHtml += '<li onclick="newPoolAdvanced(\'' + value.coin + '\',\'' + value.address + '\',this);" class="partner config_tag">' + value.coin + '<small>' + value.address + '</small></li>';
                        if (altResults == altLoop) {
                            poolListHtml.append(altHtml);
                        }
                    });
                    psOptions.update();
                }
            });
        }
        var countVisible = 0;
        $(this).parent().parent().children('.frame').children('.config_tag').each(function () {
            var rowTag = $(this).attr('data-tag').toLowerCase();
            var rowValue = $(this).children('small').html().toLowerCase();
            if (rowTag.indexOf(filterValue) == -1 && rowValue.indexOf(filterValue) == -1) {
                $(this).hide();
            } else {
                $(this).show();
                countVisible++;
            }
        });
        if (countVisible == 0) {
            $(this).parent().parent().children('.frame').prepend('<div class="empty_text">' + _('No tag name or address') + ' "' + filterValue + '" ' + '. ' + _('You can add new tag through form below.') + '</div>');
        }
    }
    psOptions.update();
});
$(document.body).on('keyup', '.coinNameFilterField', function () {
    var filterValue = $(this).val().toLowerCase();
    $('.frame').children('.empty_text').remove();
    if (filterValue == '') {
        $(this).parent().parent().children('.frame').children('.subgroup').show();
        $(this).parent().parent().children('.frame').children('.row').show();
    } else {
        var countVisible = 0;
        $(this).parent().parent().children('.frame').children('.subgroup').hide();
        $(this).parent().parent().children('.frame').children('.row').each(function () {
            var rowAlgo = $(this).attr('data-algo').toLowerCase();
            var rowCoin = $(this).attr('data-coin').toLowerCase();
            if (rowAlgo.indexOf(filterValue) == -1 && rowCoin.indexOf(filterValue) == -1) {
                $(this).hide();
            } else {
                $(this).show();
                countVisible++;
            }
        });
        if (countVisible == 0) {
            $(this).parent().parent().children('.frame').prepend('<div class="empty_text">' + _('This mining client does not support mining of') + ' "' + filterValue + '" ' + _(' coin or algorithm') + '. ' + _('Please select different mining client or use advanced configuration.') + '</div>');
        }
    }
    for (var i = 0; i < f; i++) {
        ps[i].update();
    }
});
$(document.body).on('keyup', '.poolNameFilterField', function () {
    var filterValue = $(this).val().toLowerCase();
    $(this).parent().parent().children('.frame').children('.empty_text').remove();
    $(this).parent().parent().children('.frame').children('.partner').remove();
    if (filterValue == '') {
        $(this).parent().parent().children('.frame').children('.row').show();
    } else {
        var poolListHtml = $(this).parent().parent().children('.frame');
        var aCoin = $(this).parents('#automaticConfig').find('.aCoin').find('.row').attr('data-coin');
        var aAlgo = $(this).parents('#automaticConfig').find('.aCoin').find('.row').attr('data-algo');
        $.post(window.location.href, {
            searchPools: filterValue,
            searchCoins: aCoin,
            searchAlgos: aAlgo
        }, function (response) {
            if (response != '0') {
                altSearch = $.parseJSON(response);
                var altResults = altSearch.length;
                var altLoop = 0;
                var altHtml = '';
                $.each(altSearch, function (index, value) {
                    ++altLoop;
                    altHtml += '<div class="partner row" onclick="newPool(\'' + value.coin + '\',\'' + value.address + '\',this);" value="" style=""><div class="text"><b data-tag="' + value.coin + '">' + value.coin + '</b><small data-address="' + value.address + '">' + value.address + '</small></div></div>';
                    if (altResults == altLoop) {
                        poolListHtml.append(altHtml);
                    }
                });
                for (var i = 0; i < f; i++) {
                    ps[i].update();
                }
            }
        });
        var countVisible = 0;
        $(this).parent().parent().children('.frame').children('.row').each(function () {
            var rowTag = $(this).children('.text').children('b').attr('data-tag').toLowerCase();
            var rowAddress = $(this).children('.text').children('small').attr('data-address').toLowerCase();
            if (rowTag.indexOf(filterValue) == -1 && rowAddress.indexOf(filterValue) == -1) {
                $(this).hide();
            } else {
                $(this).show();
                countVisible++;
            }
        });
        if (countVisible == 0) {
            $(this).parent().parent().children('.frame').prepend('<div class="empty_text">' + _('No pool with tag name or address') + ' "' + filterValue + '" ' + '. ' + _('You can add new pool through form below.') + '</div>');
        }
    }
    for (var i = 0; i < f; i++) {
        ps[i].update();
    }
});

function newPool(tag, address, listArea) {
    if (tag != '' && address != '') {
        $(listArea).parents('.config_dropdown').find('#poolTag').val(tag);
        $(listArea).parents('.config_dropdown').find('#poolAddress').val(address);
    }
}

function newPoolAdvanced(tag, address, listArea) {
    if (tag != '' && address != '') {
        $(listArea).parents('#options').find('#poolTag').val(tag);
        $(listArea).parents('#options').find('#poolAddress').val(address);
    }
}

$(document.body).on('keyup', '.walletNameFilterField', function () {
    var filterValue = $(this).val().toLowerCase();
    $(this).parent().parent().children('.frame').children('.empty_text').remove();
    if (filterValue == '') {
        $(this).parent().parent().children('.frame').children('.row').show();
    } else {
        var countVisible = 0;
        $(this).parent().parent().children('.frame').children('.row').each(function () {
            var rowTag = $(this).children('.text').children('b').attr('data-tag').toLowerCase();
            if (rowTag.indexOf(filterValue) == -1) {
                $(this).hide();
            } else {
                $(this).show();
                countVisible++;
            }
        });
        if (countVisible == 0) {
            $(this).parent().parent().children('.frame').prepend('<div class="empty_text">' + _('No wallet with tag name or address') + ' "' + filterValue + '" ' + '. ' + _('You can add new wallet through form below.') + '</div>');
        }
    }
    for (var i = 0; i < f; i++) {
        ps[i].update();
    }
});
$('.selectable .checkbox').click(function () {
    $(this).toggleClass('selected');
    if ($(this).hasClass('selected')) {
        $(this).attr('data-tooltip', _('Included in update'));
        $(this).closest('.selectable').removeClass('disabled');
        $(this).closest('.selectable').find('.textarea').attr('contenteditable', 'true');
        $(this).closest('.selectable').find('input').prop('disabled', false);
        $(this).closest('.selectable').find('select').prop('disabled', false);
    } else {
        $(this).attr('data-tooltip', _('Excluded from update'));
        $(this).closest('.selectable').addClass('disabled');
        $(this).closest('.selectable').find('.textarea').attr('contenteditable', 'false');
        $(this).closest('.selectable').find('input').prop('disabled', true);
        $(this).closest('.selectable').find('select').prop('disabled', true);
    }
    if($('#MiningClient').attr('data-client')==='MiningClient'){
        if($('#MiningClient').hasClass('disabled')){
            $('#mininEdit').css('pointer-events','none')
        }else {
            $('#mininEdit').css('pointer-events','auto')
        }
    }
});
$('.select_target input').click(function () {
    $('#select_target_menu').fadeIn('fast');
    $('.popupbackground_empty').show();
});
$('#select_target_menu .button, .popupbackground_empty').click(function () {
    // if ($('.select_target .tag').length == 1 && $('.select_target .tag').attr('data-group') == 'no') {
    //     if (window.location.href != "/my.minerstat.com/config/" + $('.select_target .tag').attr('data-selected-tag')) {
    //         change = false;
    //         // window.location.replace("/config#" + $('.select_target .tag').attr('data-selected-tag'))
    //     }
    // }
    let wID=[]
    let gID=[]
    let sID=[]
    $.each($('.select_target .tag'),function (k,it) {
        if($(it).attr('data-group')=='no'){
            if($(it).attr('data-is')=='no'){
                wID.push($(it).attr('data-my-id'))
            }else {
                sID.push($(it).attr('data-my-id'))
            }
        }else {
            gID.push($(it).attr('data-selected-tag'))
        }
    })
    $.post('/config?a=get',{worker:wID.length>0?wID.join(','):'',group:gID.length>0?gID.join(','):'',site:sID.length>0?sID.join(','):''},function (res) {
        if(res.data!=undefined){
            setDataForm(res.data)
        }
    })

    if ($('.select_target .tag').length > 0) {
        $('#configContent').show();
        $("#defaultConfigSelect").children('option').removeClass('unsupported');
    }
    $('#select_target_menu').fadeOut('fast');
    $('.popupbackground_empty').hide();
    $("#options").removeClass('display');
    $('.add_new_element .message_err').hide();
});

function resetConf(clientId) {
    $.post(window.location.href, {reset: clientId}, function (response) {
        if (response != '0') {
            $('#' + clientId).html(response.replace(/\n/g, '<br \\>'));
            checkForUndefined();
        }
    });
}


// $('.select_target input').keyup(function (e) {
//     var value = $('.select_target input').val();
//     value = value.replace(/[^a-zA-Z0-9_-]+/g, "");
//     $('.select_target input').val(value);
//     if ((e.which == 13 || e.which == 32) && value != '') {
//         $('.select_target input').before('<div class="tag" data-selected-tag="' + value + '" data-group="no">' + value + '<div class="icon close"></div></div>');
//         $('.select_target input').val('').focus();
//         $('#select_target_menu .button').click();
//     }
// });
$('.select_target').on("click", '.close, .tag', function (event) {
    $('#select_target_menu').fadeOut('fast');
    if ($(this).hasClass('tag')) {
        $('#select_target_menu div[data-target="' + $(this).attr('data-selected-tag') + '"]').children('.checkbox').removeClass('selected');
        $(this).remove();

    } else {
        $('#select_target_menu div[data-target="' + $(this).parent().attr('data-selected-tag') + '"]').children('.checkbox').toggleClass('selected');
        $(this).parent().remove();
    }

});

function selectAll(type) {
    $('#select_target_menu #' + type + ' .row .checkbox').each(function () {
        if (!$(this).hasClass('selected')) {
            $(this).addClass('selected');
            // var target = $(this).parent().attr('data-target');
            var target = $(this).parent().attr('data-target');
            var ifGroup =$(this).parent().attr('data-group');
            let myName=$(this).parent().attr('data-my-name')
            let myIs= $(this).parent().attr('data-is');
            if(myIs=='yes'){
                siteIds.push($(this).parent().attr('data-my-id'))
            }else {
                workersIds.push($(this).parent().attr('data-my-id'))
            }
            $('.select_target input').before('<div onclick="myGetList('+$(this).parent().attr('data-my-id')+')" id="'+$(this).parent().attr('data-my-id')+'" class="tag" data-is="'+$(this).parent().attr('data-is')+'" data-my-id="'+$(this).parent().attr('data-my-id')+'" data-selected-tag="' + target + '" data-group="' + ifGroup + '">' + myName + '<div class="icon close"></div></div>');
        }
    });
}

$('.buttons > .green').click(function () {
    let worker=[]
    let group=[]
    let site=[]
    $('.select_target .tag').each(function (i, data) {
        if($(this).attr('data-group')=='yes'){
            group.push($(this).attr('data-selected-tag'))
        }else {
            if($(this).attr('data-is')=='yes'){
                site.push($(this).attr('data-my-id'))
            }else {
                worker.push($(this).attr('data-my-id'))
            }

        }
    });
    if(worker.length==0&&site.length==0){
        $('.buttons > .message_err').html('Workers no null').show();
        return
    }else {
        $('.buttons > .message_err').html('').hide();
    }
    var $this = $(this);
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $(this).addClass('disabled');
    $('.buttons > .circle-loader > .checkmark').hide();
    $('.buttons > .circle-loader').removeClass('load-complete');
    $('.buttons > .circle-loader, .buttons > .message_err, .buttons > .message_suc').hide();
    $('.buttons > .circle-loader').show();
    checkForUndefined();

    var nonce = $('#nonce').val();
    let minerConfig=$('#workerList').val()
    let setting=$('#settingList').val()
    let auto=$('#autoList').val()
    let overclock=$('#overclockList').val()

    $.post('/config?a=set', {
        minerConfig:minerConfig,
        setting:setting,
        triggers:auto,
        overclock:overclock,
        worker: worker.length>0?worker.join(','):'',
        // group:group.length>0?group.join(','):'',
        site:site.length>0?site.join(','):'',
        nonce: nonce,
    }, function (response) {
        if (response.code == 0) {
            sessionStorage.setItem("lastUpdate", 0);
            change = false;
            $('.buttons > .circle-loader').addClass('load-complete');
            $('.buttons > .notification_row').addClass('finished');
            $('.buttons > .circle-loader > .checkmark').show();
            $('.buttons > .button').removeClass('disabled');
            if (workerLink != '') {
                $('.buttons > .message_suc').html(_('Finished') + '. <a href="/worker/' + workerLink + '">' + _("Open") + ' ' + workerLink + '' + '.</a>');
            } else {
                $('.buttons > .message_suc').html(_('Finished'));
            }
            $('.buttons > .message_suc').show();
        } else {
            $('.buttons > .circle-loader').hide();
            $('.buttons > .notification_row').addClass('finished');
            $this.removeClass('disabled');
            $('.buttons > .message_err').html(response).show();
        }
    });
});

function getConfig(client) {
    var $this = $('#client_' + client);
    var aCoin = $this.find('.aCoin').find('[data-coin]').data('coin');
    var aAlgo = $this.find('.aCoin').find('[data-algo]').data('algo');
    var aPool = $this.find('.aPool .row').attr('value');
    var aWallet = $this.find('.aWallet .row').attr('value');
    var aPass = $this.find('.aPass').val();
    var tempClient = {};
    tempClient[client] = {"coin": aCoin, "algo": aAlgo, "pool": aPool, "wallet": aWallet, "pass": aPass};
    var nonce = $('#nonce').val();
    $.post(window.location.href, {generateConfig: tempClient, nonce: nonce}, function (response) {
        if (response != '') {
            $this.closest("[class*=client_box]").find('.automatic_config').html(response).show();
            $this.closest("[class*=client_box]").find('.row_config_generated').show();
        } else {
            $this.closest("[class*=client_box]").find('.row_config_generated').hide();
        }
    });
}

$('.aPass').keyup(function () {
    getConfig($(this).closest('.client_box').data('client'));
});
$('.row_config_generated .edit').click(function () {
    $(this).closest("[class*=client_box]").find(".textarea").html($(this).closest("[class*=client_box]").find('.automatic_config').html());
    $(this).closest("[class*=client_box]").find("[data-mode='automaticConfig']").removeClass('selected');
    $(this).closest("[class*=client_box]").find("[data-mode='customConfig']").addClass('selected');
    $(this).closest("[class*=client_box]").find('#automaticConfig').hide();
    $(this).closest("[class*=client_box]").find('#customConfig').show();
    checkForUndefined();
});
$("#tag").keyup(function (e) {
    c = e.keyCode || e.which;
    var value = $('#tag').val();
    value = value.replace(/[^a-zA-Z0-9]+/g, "");
    value = value.substring(0, 10);
    $('#tag').val(value);
    if ((c == 13 || c == 32) && value != '') {
        $("#tags #tag").before('<div class="tag" data-value="' + value + '">' + value + ' <div class="icon close"></div></div>');
        $('#tag').val('').focus();
    }
});
$("#tag").focusout(function () {
    var value = $('#tag').val();
    value = value.replace(/[^a-zA-Z0-9]+/g, "");
    value = value.substring(0, 10);
    if (value.trim() != '') {
        $('#tag').val(value);
        $("#tags #tag").before('<div class="tag" data-value="' + value + '">' + value + ' <div class="icon close"></div></div>');
        $('#tag').val('').focus();
    }
});
$(document).on('click', '#tags .tag, #tags .close', function () {
    if ($(this).hasClass('.close')) {
        $(this).parent().remove();
    } else {
        $(this).remove();
    }
});

function checkForUndefined() {
    $('.row[data-client] .textarea').each(function () {
        if ($(this).text().indexOf('(POOL:') !== -1) {
            var regExp = /\((POOL:[^\s)]+)\)/g;
            var textField = $(this);
            if ($(this).text().match(regExp) != null) {
                $(this).text().match(regExp).forEach(function (element, index) {
                    if ($.inArray(element, options) === -1) {
                        textField.html(function (index, html) {
                            return html.split('<mark class="tag">' + element + '</mark>').join(element).split('<mark class="tag undefined">' + element + '</mark>').join(element).split(element).join('<mark class="tag undefined">' + element + '</mark>');
                        });
                    } else {
                        textField.html(function (index, html) {
                            return html.split('<mark class="tag">' + element + '</mark>').join(element).split('<mark class="tag undefined">' + element + '</mark>').join(element).split(element).join('<mark class="tag">' + element + '</mark>');
                        });
                    }
                });
            }
        }
        if ($(this).text().indexOf('(WALLET:') !== -1) {
            var regExp = /\((WALLET:[^\s)]+)\)/g;
            var textField = $(this);
            if ($(this).text().match(regExp) != null) {
                $(this).text().match(regExp).forEach(function (element, index) {
                    if ($.inArray(element, options) === -1) {
                        textField.html(function (index, html) {
                            return html.split('<mark class="tag">' + element + '</mark>').join(element).split('<mark class="tag undefined">' + element + '</mark>').join(element).split(element).join('<mark class="tag undefined">' + element + '</mark>');
                        });
                    } else {
                        textField.html(function (index, html) {
                            return html.split('<mark class="tag">' + element + '</mark>').join(element).split('<mark class="tag undefined">' + element + '</mark>').join(element).split(element).join('<mark class="tag">' + element + '</mark>');
                        });
                    }
                });
            }
        }
        if ($(this).text().indexOf('(WORKER)') !== -1) {
            $(this).html(function (index, html) {
                return html.split('<mark class="tag">(WORKER)</mark>').join('(WORKER)').split('(WORKER)').join('<mark class="tag">(WORKER)</mark>');
            });
        }
        if ($(this).text().indexOf('(AUTO)') !== -1) {
            $(this).html(function (index, html) {
                return html.split('<mark class="tag">(AUTO)</mark>').join('(AUTO)').split('(AUTO)').join('<mark class="tag">(AUTO)</mark>');
            });
        }
        if ($(this).html().indexOf('<mark class="tag') !== -1) {
            var regExp = /\<mark(.*?)<\/mark>+/g;
            var textField = $(this);
            $(this).html().match(regExp).forEach(function (element, index) {
                if (element.indexOf(">(") < 0 || element.indexOf(")<") < 0) {
                    textField.html(function (index, html) {
                        return html.replace(element, $(element).text());
                    });
                } else if (element.indexOf("(POOL:") < 0 && element.indexOf("(WALLET:") < 0 && element.indexOf("(AUTO)") < 0 && element.indexOf("(WORKER)") < 0 && element.indexOf("(MODE:") < 0 && element.indexOf("(EMAIL)") < 0) {
                    textField.html(function (index, html) {
                        return html.replace(element, $(element).text());
                    });
                } else if (element.indexOf(">(") > -1 && element.indexOf(")<") > -1) {
                    var elementTag = $(element).text();
                    elementTag = elementTag.replace(/[^a-z0-9:\-\_]/gi, '').toUpperCase();
                    if (element.indexOf("undefined") > -1) {
                        elementTag = '<mark class="tag undefined">(' + elementTag + ')</mark>&#8291;';
                    } else {
                        elementTag = '<mark class="tag">(' + elementTag + ')</mark>&#8291;';
                    }
                    textField.html(function (index, html) {
                        return html.replace(element, elementTag);
                    });
                } else {
                    textField.html(function (index, html) {
                        var elementTag = $(element).text();
                        if (element.indexOf("undefined") > -1) {
                            elementTag = '<mark class="tag undefined">' + elementTag + '</mark>&#8291;';
                        } else {
                            elementTag = '<mark class="tag">' + elementTag + '</mark>&#8291;';
                        }
                        return html.replace(element, elementTag);
                    });
                }
            });
        }
    });
}

checkForUndefined();
var cell = document.querySelectorAll('div[contenteditable]');
for (var i = 0; i < cell.length; i++) {
    cell[i].addEventListener("paste", function (e) {
        e.preventDefault();
        var text = e.clipboardData.getData("text/plain");
        if (text.indexOf('(POOL:') !== -1) {
            var regExp = /\((POOL:[^\s)]+)\)/g;
            text.match(regExp).forEach(function (element, index) {
                if ($.inArray(element, options) === -1) {
                    text = text.replace(element, '<mark class="tag undefined">' + element + '</mark>');
                } else {
                    text = text.replace(element, '<mark class="tag">' + element + '</mark>');
                }
            });
        }
        if (text.indexOf('(WALLET:') !== -1) {
            var regExp = /\((WALLET:[^\s)]+)\)/g;
            text.match(regExp).forEach(function (element, index) {
                if ($.inArray(element, options) === -1) {
                    text = text.replace(element, '<mark class="tag undefined">' + element + '</mark>');
                } else {
                    text = text.replace(element, '<mark class="tag">' + element + '</mark>');
                }
            });
        }
        if (text.indexOf('(WORKER)') !== -1) {
            var regExp = /\((WORKER)\)/g;
            text.match(regExp).forEach(function (element, index) {
                text = text.replace(element, '<mark class="tag">' + element + '</mark>');
            });
        }
        if (text.indexOf('(AUTO)') !== -1) {
            var regExp = /\((AUTO)\)/g;
            text.match(regExp).forEach(function (element, index) {
                text = text.replace(element, '<mark class="tag">' + element + '</mark>');
            });
        }
        if (text.indexOf('(EMAIL)') !== -1) {
            var regExp = /\((EMAIL)\)/g;
            text.match(regExp).forEach(function (element, index) {
                text = text.replace(element, '<mark class="tag">' + element + '</mark>');
            });
        }
        if (text.indexOf('(MODE:DUAL)') !== -1) {
            var regExp = /\((MODE:DUAL)\)/g;
            text.match(regExp).forEach(function (element, index) {
                text = text.replace(element, '<mark class="tag">' + element + '</mark>');
            });
        }
        if (text.indexOf('(MODE:SINGLE)') !== -1) {
            var regExp = /\((MODE:SINGLE)\)/g;
            text.match(regExp).forEach(function (element, index) {
                text = text.replace(element, '<mark class="tag">' + element + '</mark>');
            });
        }
        document.execCommand("insertHTML", false, text);
    });
}
var containerFixed = 1;
$(document).scroll(function () {
    if ($(window).scrollTop() < ($(document).height() - $(window).height() - 180)) {
        if (containerFixed == 0) {
            $('.scroll_up').fadeIn('fast');
            $('.scroll_down').fadeIn('fast');
            $('#saveContainer').hide();
            $('#saveContainer').addClass('floating');
            $('#saveContainer').fadeIn();
            $('#saveContainer > .floating_shadow').show();
            containerFixed = 1;
        }
    } else {
        if (containerFixed == 1) {
            $('.scroll_up').fadeOut('fast');
            $('.scroll_down').fadeOut('fast');
            $('#saveContainer').hide();
            $('#saveContainer').removeClass('floating');
            $('#saveContainer').show();
            $('#saveContainer > .floating_shadow').hide();
            containerFixed = 0;
        }
    }
});
$(function () {
    $('.scroll_down').click(function () {
        $('html, body').animate({scrollTop: ($(document).height() - $(window).height())}, 500);
    });
    $('.scroll_up').click(function () {
        $('html, body').animate({scrollTop: 0}, 500);
    });
});
var ps_templates = null;

function openTemplates(reset_button, client_name) {
    if ($(reset_button).parent().children('.reset_menu').hasClass('visible')) {
        $(reset_button).parent().children('.reset_menu').hide();
        $(reset_button).parent().children('.reset_menu').removeClass('visible');
    } else {
        $('.reset_menu').hide();
        $('.reset_menu').removeClass('visible');
        $(reset_button).parent().children('.reset_menu').show();
        $(reset_button).parent().children('.reset_menu').addClass('visible');
        if (ps_templates != null) {
            ps_templates.destroy();
            ps_templates = null;
        }
        if ($('#frame_' + client_name).length > 0) {
            ps_templates = new PerfectScrollbar('#frame_' + client_name, {
                wheelSpeed: 0.4,
                wheelPropagation: false,
                suppressScrollX: true,
                minScrollbarLength: 20
            });
            ps_templates.update();
            $('.searchTemplate').focus();
        }
    }
}

$('.searchTemplate').keyup(function () {
    var searchQuery = $(this).val();
    var miningClientName = $(this).attr('data-template');
    if (searchQuery == '') {
        $('#frame_' + miningClientName + ' .template').show();
        if (ps_templates != null) {
            ps_templates.update();
        }
    } else {
        searchQuery = searchQuery.toLowerCase();
        $('#frame_' + miningClientName + ' .template').each(function () {
            var profileStr = $(this).text();
            if (profileStr != '') {
                profileStr = profileStr.toLowerCase();
                profileStr = profileStr.replace('<small>', '----');
                profileStr = profileStr.replace('</small>', '');
                if (profileStr.indexOf(searchQuery) != -1) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            }
        });
        if (ps_templates != null) {
            ps_templates.update();
        }
    }
});

function openSaveTemplate(save_button) {
    if ($(save_button).parent().children('.reset_menu').hasClass('visible')) {
        $('.reset_menu .action_row .checkmark').hide();
        $('.reset_menu .action_row .circle-loader').removeClass('load-complete');
        $('.reset_menu .action_row .circle-loader').hide();
        $('.reset_menu .action_row .message_err').hide();
        $(save_button).parent().children('.reset_menu').hide();
        $(save_button).parent().children('.reset_menu').removeClass('visible');
    } else {
        $('.reset_menu .action_row .checkmark').hide();
        $('.reset_menu .action_row .circle-loader').removeClass('load-complete');
        $('.reset_menu .action_row .circle-loader').hide();
        $('.reset_menu .action_row .message_err').hide();
        $('.reset_menu').hide();
        $('.reset_menu').removeClass('visible');
        $(save_button).parent().children('.reset_menu').show();
        $(save_button).parent().children('.reset_menu').addClass('visible');
    }
}

function saveTemplate(clientId) {
    $('.reset_menu .action_row .checkmark').hide();
    $('.reset_menu .action_row .circle-loader').removeClass('load-complete');
    $('.reset_menu .action_row .circle-loader').show();
    $('.reset_menu .action_row .message_err').hide();
    $('.reset_menu .action_row .button').addClass('disabled');
    var nonce = $('#nonce').val();
    var configData = $('#' + clientId).html().replace('&#8291;', '').replace('\u200b', '').replace('  ', ' ');
    var templateName = $('#' + clientId).parent().find('.template_name').val();
    $.post('/config-templates/new', {
        clocktune: 0,
        data: configData,
        client: clientId,
        name: templateName,
        nonce: nonce
    }, function (response) {
        if (response > 0) {
            $('.reset_menu .action_row .circle-loader').addClass('load-complete');
            $('.reset_menu .action_row .checkmark').show();
            $('.reset_menu .action_row .button').removeClass('disabled');
        } else {
            $('.reset_menu .action_row .checkmark').hide();
            $('.reset_menu .action_row .circle-loader').removeClass('load-complete');
            $('.reset_menu .action_row .circle-loader').hide();
            $('.reset_menu .action_row .message_err').show();
            $('.reset_menu .action_row .button').removeClass('disabled');
        }
    });
}

$(document).mousedown(function (e) {
    var container = $(".reset_menu");
    if (!container.is(e.target) && container.has(e.target).length === 0 && !$('.reset_button').is(e.target) && !$('.reset_link').is(e.target)) {
        $('.reset_menu').hide();
        $('.reset_menu').removeClass('visible');
    }
});

function loadTemplate(templateId, clientId) {
    $.post(window.location.href, {reset: templateId, template: '1'}, function (response) {
        if (response != '0') {
            $('#' + clientId).html(response.replace(/\n/g, '<br \\>'));
            $('#' + clientId).html(response.replace('<br \="">', ''));
            checkForUndefined();
            $('.reset_menu').hide();
            $('.reset_menu').removeClass('visible');
        }
    });
}

MutationObserver = window.MutationObserver || window.WebKitMutationObserver;
$(".container .checkbox, .container .config_selected_option, .container .tabs, .container #tags").each(function () {
    var target = this;
    var observer = new MutationObserver(function (mutations) {
        mutations.forEach(function (mutation) {
            if ($(this).attr("id") != "saveContainer") {
                change = true;
            }
        });
    });
    observer.observe(target, {
        attributes: true,
        characterData: true,
        childList: true,
        subtree: true,
        attributeOldValue: true,
        characterDataOldValue: true
    });

});
$(".container input, .container .textarea").keyup(function () {
    if ($(this).attr("id") != "saveContainer") {
        change = true;
    }
});
$(".container select").change(function () {
    if ($(this).attr("id") != "saveContainer") {
        change = true;
    }
});
var pathTo = '';
// $('a').click(function () {
//     return function (e) {
//         if (!change) return true;
//         if (this.constructor !== HTMLAnchorElement) {
//             return true;
//         }
//         pathTo = this.href;
//         $('#click_away,.popupbackground').show();
//         return false;
//     };
// }());

function skipSaving() {
    change = false;
}

$('.popup .red').click(function () {
    window.location.href = pathTo;
});
$('.close,.popupbackground,.close_popup').click(function () {
    $('.popupbackground,.popup').hide();
});
$('.edit_box .tabs .tab').click(function () {
    var mode = $(this).data('mode');
    if (mode == 'automaticConfig') {
        $(this).closest('.row').find("[data-mode='customConfig']").removeClass('selected');
        $(this).addClass('selected');
        $(this).closest('.row').find('#customConfig').hide();
        $(this).closest('.row').find('#automaticConfig').show();
    } else {
        $(this).closest('.row').find("[data-mode='automaticConfig']").removeClass('selected');
        $(this).addClass('selected');
        $(this).closest('.row').find('#automaticConfig').hide();
        $(this).closest('.row').find('#customConfig').show();
    }
    var d = new Date();
    d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * 365);
    var expires = "expires=" + d.toLocaleTimeString();
    var client = $(this).parents('.client_box').data('client').toLowerCase();
    document.cookie = "cmode-" + client + "=" + mode + ";" + expires + ";path=/";
});

var tagLock = false;

$('#poolTag,#walletTag').on('change', function (event) {
    var str = $(this).val();
    str = str.replace(/[^A-Za-z-0-9_-]/g, "").substring(0, 20);
    if ($(this).val() != str) {
        $(this).val(str);
    }
});
$('#poolAddress,#walletAddress').on('change', function (event) {
    var str = $(this).val();
    str = str.replace(/\s/g, '');
    if ($(this).val() != str) {
        $(this).val(str);
    }
});
$('div[contenteditable]').keydown(function (e) {
    if (e.keyCode === 13) {
        document.execCommand('insertHTML', false, '<br>');
        return false;
    }
});
var truncate = function (fullStr, strLen, separator) {
    if (fullStr.length <= strLen) return fullStr;
    separator = separator || '...';
    var sepLen = separator.length, charsToShow = strLen - sepLen, frontChars = Math.ceil(11),
        backChars = Math.floor(12);
    return fullStr.substr(0, frontChars) +
        separator +
        fullStr.substr(fullStr.length - backChars);
};
$(document).ready(function () {
    $("#configContent .config_dropdown .image").each(function () {
        var $img = $(this).find('img');
        var icon = $img.data('icon');
        $img.attr('src', $img.attr('src').replace('no.png', icon + '.png'));
    });
});
$('#loadAllClients').on('click', function () {
    $('.client_box_cpu').show();
    $('.client_box').show();
    $('#loadAllClients').hide();
    $('#hideAllClients').show();
    showAll = true;
});
$('#hideAllClients').on('click', function () {
    $('.client_box').hide();
    $('.client_box_cpu').hide();
    $('#hideAllClients').hide();
    $('#loadAllClients').show();
    $('#client_' + selectedMiningClient).show();
    if (selectedMiningClientCPU != 'disabled') {
        $('#client_' + selectedMiningClientCPU).show();
    }
    showAll = false;
});
$('#configJump').on('click', function () {
    var defaultConfig = $('#defaultConfig').html();
    $('html, body').animate({scrollTop: $("#client_" + defaultConfig).offset().top}, 1000);
});
$('#configJumpCPU').on('click', function () {
    var defaultConfigCPU = $('#defaultConfigCPU').html();
    $('html, body').animate({scrollTop: $("#client_" + defaultConfigCPU).offset().top}, 1000);
});

window.onload=function () {
    getInfoList()
     if($('#MiningClient').hasClass('disabled')){
         $('#mininEdit').css('pointer-events','none')
     }else {
         $('#mininEdit').css('pointer-events','auto')
    }

}

let configList=[] //用于转换
let configListType='' //用于转换


let myWorkersListData=[]
let siteIds=[]
let workersIds=[]
//获取数据列表
function getInfoList() {
  $.getJSON('/query?SITE,sitecfg,WORKERS,overclock,WORKERCONFIG,TRIGGERS,MINERCONFIG,ALLCFG',function (res) {
      setSelectSiteDom(res.SITE)
      setSelectWorkers(res.WORKERS)
      setListDom(res)
      myWorkersListData=res
      if(localStorage.getItem('myWorkes')!=null&&window.location.href.indexOf('#mx')!=-1){
          setSelectList()
      }else {
          localStorage.removeItem('myWorkes')
          localStorage.removeItem('myType')
      }
      $('#select_target_menu #target_groups .row, #select_target_menu #target_workers .row, #select_target_menu #target_site .row').click(function () {

          var target = $(this).attr('data-target');
          var ifGroup = $(this).attr('data-group');
          let myName=$(this).attr('data-my-name')
          let myIs= $(this).attr('data-is');
          $(this).find('.checkbox').toggleClass('selected');
          if ($('.select_target .tag[data-selected-tag="'+target+'"]').length > 0) {
              $('.select_target .tag[data-selected-tag="' + target + '"]').remove();
          } else {
              if(myIs=='yes'){
                  siteIds.push($(this).attr('data-my-id'))
              }else {
                  workersIds.push($(this).attr('data-my-id'))
              }
              $('.select_target input').before('<div onclick="myGetList('+$(this).attr('data-my-id')+')" id="'+$(this).attr('data-my-id')+'" class="tag" data-is="'+$(this).attr('data-is')+'" data-my-id="'+$(this).attr('data-my-id')+'" data-selected-tag="' + target + '" data-group="' + ifGroup + '">' + myName + '<div class="icon close"></div></div>');
          }
      });

  })
}
//设置网吧dom节点
function setSelectSiteDom(data,isData) {
    isData==undefined?isData=[]:isData=isData
    let str=''
    $.each(data,function (i,it) {
        if (isData.indexOf(it.id+'')==-1){
            str+='<div class="row" data-target="'+it.name+it.id+'" data-my-name="'+it.name+'" data-my-id="'+it.id+'" data-group="no" data-is="yes">' +
                '    <div class="checkbox"></div>' +
                '    <label>'+it.name+'('+it.clients+')</label>' +
                '</div>'
        }else {
            str+='<div class="row" data-target="'+it.name+it.id+'" data-my-name="'+it.name+'" data-my-id="'+it.id+'" data-group="no" data-is="yes">' +
                '    <div class="checkbox selected"></div>' +
                '    <label>'+it.name+'('+it.clients+')</label>' +
                '</div>'
        }

    })
    $('#target_site').html(str)
}
//设置机器dom
function setSelectWorkers(data,isData) {
    isData==undefined?isData=[]:isData=isData
   let str=''
    $.each(data,function (key,it) {
        if(isData.indexOf(it.id+'')==-1){
            str+='<div class="row" data-target="'+it.name+it.id+'" data-my-name="'+it.name+' ('+it.siteName+')" data-my-id="'+it.id+'" data-group="no" data-is="no">' +
                '     <div class="checkbox"></div>' +
                '     <label>'+it.name+' ('+it.siteName+')</label>' +
                ' </div>'
        }else {
            str+='<div class="row" data-target="'+it.name+it.id+'" data-my-name="'+it.name+' ('+it.siteName+')" data-my-id="'+it.id+'" data-group="no" data-is="no">' +
                '     <div class="checkbox selected"></div>' +
                '     <label>'+it.name+' ('+it.siteName+')</label>' +
                ' </div>'
        }
    })
    $('#target_workers').html(str)
}

//数据回显
function setDataForm(data) {
    $('#workerList').val(data.minerConfig.toString())
    $('#settingList').val(data.setting.toString())
    $('#overclockList').val(data.overclock.toString())
    $('#autoList').val(data.triggers.toString())
}

//列表页跳转过来
function setSelectList() {
    let list = localStorage.getItem('myWorkes').split(',')
    let type = localStorage.getItem('myType')
    configList=list
    configListType=type
    let str=''
    let iStr=''
    if(type=='worker'){
        workersIds=list
        $.each(myWorkersListData.WORKERS,function (key,it) {
            if(list.indexOf(it.id)!==-1){
                str+='<div class="row" data-target="'+it.name+'" data-my-name="'+it.name+' ('+it.siteName+')" data-my-id="'+it.id+'" data-group="no" data-is="no">' +
                    '     <div class="checkbox selected"></div>' +
                    '     <label>'+it.name+' ('+it.siteName+')</label>' +
                    ' </div>'
            }else {
                str+='<div class="row" data-target="'+it.name+'" data-my-name="'+it.name+' ('+it.siteName+')" data-my-id="'+it.id+'" data-group="no" data-is="no">' +
                    '     <div class="checkbox"></div>' +
                    '     <label>'+it.name+' ('+it.siteName+')</label>' +
                    ' </div>'
            }
        })
        $('#target_workers').html(str)
        $.each(myWorkersListData.WORKERS,function (i,it) {
            if(list.indexOf(it.id)!==-1){
                iStr+='<div class="tag" data-my-id="'+it.id+'" data-selected-tag="'+it.name+'" data-group="no" data-is="no">'+it.name+' ('+it.siteName+')<div class="icon close"></div></div>'
            }
        })
    }else {
        siteIds=list
        $.each(myWorkersListData.SITE,function (i,it) {
            if(list.indexOf(it.id.toString())!==-1){
                str+='<div class="row" data-target="'+it.name+'" data-my-name="'+it.name+'" data-my-id="'+it.id+'" data-group="no" data-is="yes">' +
                    '    <div class="checkbox selected"></div>' +
                    '    <label>'+it.name+'('+it.clients+')</label>' +
                    '</div>'
            }else {
                str+='<div class="row" data-target="'+it.name+'" data-my-name="'+it.name+'" data-my-id="'+it.id+'" data-group="no" data-is="yes">' +
                    '    <div class="checkbox"></div>' +
                    '    <label>'+it.name+'('+it.clients+')</label>' +
                    '</div>'
            }
        })
        $('#target_site').html(str)

        $.each(myWorkersListData.SITE,function (i,it) {
            if(list.indexOf(it.id.toString())!==-1){
                iStr+='<div class="tag" data-my-id="'+it.id+'" data-selected-tag="'+it.name+'" data-group="no" data-is="yes">'+it.name+'<div class="icon close"></div></div>'
            }
        })
    }
    iStr+='<input type="text" placeholder="Add workers or groups ...">'
    $('.select_target').html(iStr)
    $('.select_target input').click(function () {
        $('#select_target_menu').fadeIn('fast');
        $('.popupbackground_empty').show();
    });
    getListDataM()
    localStorage.removeItem('myWorkes')
    localStorage.removeItem('myType')
}

//跳转获取参数
function getListDataM() {
    let wID=[]
    let gID=[]
    let sID=[]
    $.each($('.select_target .tag'),function (k,it) {
        if($(it).attr('data-group')=='no'){
            if($(it).attr('data-is')=='no'){
                wID.push($(it).attr('data-my-id'))
            }else {
                sID.push($(it).attr('data-my-id'))
            }
        }else {
            gID.push($(it).attr('data-selected-tag'))
        }
    })
    $.post('/config?a=get',{worker:wID.length>0?wID.join(','):'',group:gID.length>0?gID.join(','):'',site:sID.length>0?sID.join(','):''},function (res) {
        if(res.data!=undefined){
            setDataForm(res.data)
        }
    })

    if ($('.select_target .tag').length > 0) {
        $('#configContent').show();
        $("#defaultConfigSelect").children('option').removeClass('unsupported');
    }
    $('#select_target_menu').fadeOut('fast');
    $('.popupbackground_empty').hide();
    $("#options").removeClass('display');
    $('.add_new_element .message_err').hide();
}



//设置下拉列表模板
function setListDom(data) {
    let strOcList=' <option selected="selected" value="0">No profile</option>'
    $.each(data.OVERCLOCK,function (i,it) {
        if(it.desc!=''){
            strOcList+='<option value="'+it.id+'">'+it.video+' ('+it.desc+')</option>'
        }else {
            strOcList+='<option value="'+it.id+'">'+it.video+'</option>'
        }

    })
    $('#overclockList').html(strOcList)

    let strConfigList=' <option selected="selected" value="0">No profile</option>'
    $.each(data.MINERCONFIG,function (i,it) {
        strConfigList+='<option value="'+it.id+'">'+it.name+'</option>'
    })
    $('#workerList').html(strConfigList)

    let strSettingList=' <option selected="selected" value="0">No profile</option>'
    $.each(data.WORKERCONFIG,function (i,it) {
        strSettingList+='<option value="'+it.id+'">'+it.name+'</option>'
    })
    $('#settingList').html(strSettingList)

    let strAutoList=' <option selected="selected" value="0">No profile</option>'
    $.each(data.TRIGGERS,function (i,it) {
        strAutoList+='<option value="'+it.id+'">'+it.name+'</option>'
    })
    $('#autoList').html(strAutoList)
}

//搜索菜单
$('#searchMenu').on('input',function () {
    let sa=$(this).val()
    let siteS=[]
    let workerS=[]
    $.each(myWorkersListData.SITE,function (i,it) {
        if(it.name.toLowerCase().indexOf(sa.toLowerCase())!==-1){
            siteS.push(it)
        }
    })
    $.each(myWorkersListData.WORKERS,function (i,it) {
        if(it.name.toLowerCase().indexOf(sa.toLowerCase())!==-1 || it.siteName.toLowerCase().indexOf(sa.toLowerCase())!==-1){
            workerS.push(it)
        }
    })
    setSelectWorkers(workerS,workersIds)
    setSelectSiteDom(siteS,siteIds)
    $('#select_target_menu #target_groups .row, #select_target_menu #target_workers .row, #select_target_menu #target_site .row').click(function () {
        var target = $(this).attr('data-target');
        var ifGroup = $(this).attr('data-group');
        let myName=$(this).attr('data-my-name')
        let myIs= $(this).attr('data-is');
        $(this).find('.checkbox').toggleClass('selected');
        if ($('.select_target .tag[data-selected-tag="'+target+'"]').length > 0) {
            $('.select_target .tag[data-selected-tag="' + target + '"]').remove();
        } else {
            if(myIs=='yes'){
                siteIds.push($(this).attr('data-my-id'))
            }else {
                workersIds.push($(this).attr('data-my-id'))
            }
            $('.select_target input').before('<div onclick="myGetList('+$(this).attr('data-my-id')+')" id="'+$(this).attr('data-my-id')+'" class="tag" data-is="'+$(this).attr('data-is')+'" data-my-id="'+$(this).attr('data-my-id')+'" data-selected-tag="' + target + '" data-group="' + ifGroup + '">' + myName + '<div class="icon close"></div></div>');
        }
    });
})
$('.my_config_icon_edit').on('click',function () {
    let type=$($(this).prev()).attr('id')
    switch (type) {
        case 'workerList':
            $('#'+type+' option:selected').val()=='0'?window.location.href='/config-templates':window.location.href='/config-templates/new2?id='+$('#'+type+' option:selected').val()+'&s=edit'
            break
        case 'settingList':
            $('#'+type+' option:selected').val()=='0'?window.location.href='/site-config-templates':window.location.href='/site-config-tow?id='+$('#'+type+' option:selected').val()+'&s=edit'
            break
        case 'overclockList':
            $('#'+type+' option:selected').val()=='0'?window.location.href='/clocktune':window.location.href='/clocktune/new#s=edit&id='+$('#'+type+' option:selected').val()
            break
        case 'autoList':
            $('#'+type+' option:selected').val()=='0'?window.location.href='/auto-templates':window.location.href='/triggers?id='+$('#'+type+' option:selected').val()
            break
    }
    localStorage.setItem('myWorkes',configList.join(','))
    localStorage.setItem('myType',configListType)
})

//移除标签后执行
function myGetList(e) {
    setTimeout(function (res) {
        console.log(document.getElementById(e))
        if(document.getElementById(e)==null){
            getListDataM()
        }
    },300)
}