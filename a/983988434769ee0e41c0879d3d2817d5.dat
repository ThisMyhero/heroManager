var dailyProfitabilityColor = '#5767ff';
var chartTitle = $('.content.stats .data_row .element .value').css("color");
var titleColor = $('.page .content h1').css("color");
var borderColor = $('.divider').css("border-top-color");
var borderLightColor = $('.divider').css("border-top-color");
var navigatorBorder = $('.divider').css("border-top-color");
var navigatorFill = "rgba(87,103,255,0.2)";
var navigatorHandles = $('.page .menu .subscription_plan p').css("color");
var navigatorBackground = 'transparent';
var buttonColor = $('.page .content h1').css("color");
var buttonFillHover = $('.page .content h1').css("color");
var buttonColorHover = '#ffffff';
var buttonDisabledFill = "transparent";
var buttonDisabledColor = $('.subscription_plan small').css("color");
var buttonSelectedFill = buttonFillHover;
var buttonSelectedColor = '#ffffff';
var hiddenColor = 'transparent';
var tooltipBackgroundColor = $('header .user_menu').css("background-color");
var tooltipBoxShadow = $('header .user_menu').css("box-shadow");
var tooltipBorderColor = $('header .user_menu').css("background-color");
var tooltipDateColor = $('header .user_menu .link').css("color");
var tooltipDarkerColor = $('.content.stats .data_row .element .value').css("color");
var legendColor = $('.content.stats .data_row .element .value').css("color");
var legendHiddenColor = $('.page .menu .subscription_plan small').css("color");
var averageDailyColor = $('body').css("background-color");
var hotColor = titleColor;
var hotGradientFrom = "rgba(0, 0, 0, 0)";
var hotGradientTo = "rgba(0, 0, 0, 0.05)";
var titleSize = '18px';
var smallSize = $('.content.stats .data_row .element .change').css("font-size");
var fontWeightLight = '300';
var fontWeightBold = '600';
var selectorTop = 20;
var tooltipHeaderFontSize = '16px';
var workerNameCode=myGetHref()
if (theme == 'dark') {
    averageDailyColor = 'rgba(255,255,255,0.2)';
    buttonFillHover = 'rgba(255,255,255,0.1)';
    buttonSelectedFill = 'rgba(255,255,255,0.1)';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.05)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    dailyProfitabilityColor = '#6574ff';
}
if (theme == 'hacker') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    fontWeightLight = '500';
    smallSize = '11px';
    titleSize = '12px';
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    selectorTop = 36;
    fontWeightBold = '400';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#50b951';
    buttonColorHover = '#1a1a1a';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#50b951';
    buttonSelectedColor = '#1a1a1a';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    tooltipHeaderFontSize = '14px';
    tooltipDateColor = 'rgba(255,255,255,0.4)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    dailyProfitabilityColor = '#50b951';
}
if (theme == 'electric') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    titleSize = '16px';
    selectorTop = 26;
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#02dcff';
    buttonColorHover = '#001432';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#02dcff';
    buttonSelectedColor = '#001432';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    dailyProfitabilityColor = '#02dcff';
}
if (theme == 'radioactive') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    titleSize = '16px';
    selectorTop = 32;
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#ffdd00';
    buttonColorHover = '#1f262d';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#ffdd00';
    buttonSelectedColor = '#1f262d';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    dailyProfitabilityColor = '#ffdd00';
}
if (theme == 'office') {
    selectorTop = 32;
    borderColor = 'rgba(0,0,0,0.1)';
    borderLightColor = 'rgba(0,0,0,0.05)';
    navigatorHandles = '#e2e5ef';
    navigatorBorder = '#e2e5ef';
    navigatorFill = "rgba(0,0,0,0.05)";
}
var toFixedValue = 2;
var allowDecimalsValue = false;
if (currency == "BTC") {
    toFixedValue = 5;
    allowDecimalsValue = true;
}
var coinsList = [];
var colorsDefault = ['#FF5B56', '#FF6658', '#FF715B', '#FF7D5D', '#FF885F', '#FF9361', '#FF9E64', '#FFA966', '#FFB468', '#FFC06A', '#FFCB6D', '#FFD66F', '#FFD979', '#FFDB82', '#FFDE8C', '#FFE196', '#FFE4A0'];
var colorsNvidia = ['#52E296', '#50DE8D', '#4FDA84', '#4ED67C', '#4DD273', '#4CCE6A', '#4BCA62', '#4AC659', '#48C250', '#47BE48', '#46BA3F', '#45B636', '#44B22E', '#43AE25', '#42AA1C', '#41A714'];
var colorsAmd = ['#FE7C7C', '#FC7474', '#FA6C6C', '#F86565', '#F65D5D', '#F45656', '#F24E4E', '#F04747', '#EE3F3F', '#EC3838', '#EA3030', '#E82929', '#E62121', '#E41A1A', '#E21212', '#E00B0B'];
var colorsASIC = ['#5667FF', '#5B6BFC', '#606EFA', '#6472F7', '#6875F5', '#6C79F2', '#717CF0', '#7580ED', '#7983EB', '#7D87E8', '#828AE6', '#868EE3'];
var tempColors = colorsDefault;
if (workerType == 'nvidia') {
    tempColors = colorsNvidia;
}
if (workerType == 'amd') {
    tempColors = colorsAmd;
}
if (workerType == 'asic') {
    tempColors = colorsASIC;
}
var colorString = '';
var hotValue = convertTemperature(workersTempHot);
var hotValueStart = convertTemperature(workersTempHot);
var hotValueStop = convertTemperature(workersTempHot + (workersTempVeryHot - workersTempHot) / 2);
var veryHotValue = convertTemperature(workersTempVeryHot);
var veryHotValueStart = convertTemperature(workersTempVeryHot);
var veryHotValueStop = convertTemperature(100);
var softMaxValue = convertTemperature(100);
var softMinValue = convertTemperature(workersTempHot);
Highcharts.setOptions({
    lang: {
        shortMonths: [_('Jan'), _('Feb'), _('Mar'), _('Apr'), _('May'), _('Jun'), _('Jul'), _('Aug'), _('Sep'), _('Oct'), _('Nov'), _('Dec')],
        shortWeekdays: [_('Mon'), _('Tue'), _('Wed'), _('Thu'), _('Fri'), _('Sat'), _('Sun')],
        rangeSelectorZoom: _('Zoom')
    }
});

function updateWorkersList(workersArray) {
    var workersArrayLength = 0;
    $.each(workersArray, function (key, workers) {
        var worker = $('a[data-worker="' + key.toUpperCase() + '"]');
        if (worker.length > 0) {
            if (workers['info'].status == 'offline' && workers['info']['os'].status == 'online' && workers['info']['os'].uptime != null) {
                var status = 'Idle';
            } else {
                var status = workers['info'].status.charAt(0).toUpperCase() + workers['info'].status.slice(1);
            }
            worker.find('.workerlist_status').html('<div class="status ' + status.toLowerCase() + '"><div class="bullet"></div></div>');
            workersArrayLength++;
        }
    });
    if (workersArrayLength < 9) {
        $('.change_worker_menu').addClass('small');
    }
}

var workersList = '';
if (typeof (Storage) !== "undefined" && true) {
    workersList = sessionStorage.getItem(workerToken.toLowerCase() + ".workersList");
}
if (workersList == '' || workersList == null || cacheExpired) {
    // var apiUrlStats = '/api.minerstat.com/v2/stats/' + workerToken;
    var apiUrlStats = '/v2/stats?worker='+workerNameCode;
    if (demoAccount == 1) {
        apiUrlStats = '/v2/demo-worker';
    }
    $.getJSON(apiUrlStats, function (workersList) {
        if (typeof workersList[worker.toUpperCase()]['hardware'] !== undefined && typeof workersList[worker.toUpperCase()]['hardware'][0] !== undefined && workersList[worker.toUpperCase()]['hardware'][0].length != 0) {
            if (typeof (Storage) !== "undefined" && workersList != '') {
                sessionStorage.setItem(workerToken.toLowerCase() + ".workersList", JSON.stringify(workersList));
            }
        }
        updateWorkersList(workersList);
    });
} else {
    updateWorkersList(JSON.parse(workersList));
}
var fansData = [];
var powerData = [];
var driverErrorChart = 0;
$(function () {
    $('#changeWorker').click(function () {
        if (!$('#changeWorker').hasClass('disabled')) {
            $('.change_worker_menu').toggle();
            $('.switch_miner_menu').hide();
        }
        ps.update();
    });
    window.addEventListener("keydown", function (event) {
        if (event.defaultPrevented) {
            return;
        }
        switch (event.key) {
            case "ArrowLeft":
                preloaderShow();
                window.location.href = $('.content .container #previousWorker').attr('href');
                break;
            case "ArrowRight":
                preloaderShow();
                window.location.href = $('.content .container #nextWorker').attr('href');
                break;
            default:
                return;
        }
        event.preventDefault();
    }, true);
    // var apiUrl = '/api.minerstat.com/v2/stats-worker/' + workerToken + '/' + worker + '?timezone=' + workerTimezone;
    var apiUrl = '/v2/stats-worker'+'?timezone=' + workerTimezone+'&worker='+workerNameCode;
    if (demoAccount == 1) {
        apiUrl = '/v2/demo-worker-stats';
    }
    $.getJSON(apiUrl, function (data) {
        var workerData = data["data"];
        $('#miningName').html(data["data"][0])
        var colors = data["colors"];
        var temps = data["temperature"];
        var dataEff = data["efficiency"];
        if (workerData[2].length > 0) {
            var i = 0;
            $.each(temps, function (tempsName, tempsInfo) {
                if (typeof tempsName !== 'undefined') {
                    if (fansData[i] == null) {
                        fansData[i] = {};
                    }
                    if (powerData[i] == null) {
                        powerData[i] = {};
                    }
                    var tempsData = tempsInfo;
                    for (var j = 0; j < tempsData.length; j++) {
                        tempsData[j][1] = convertTemperature(tempsData[j][1]);
                        tempsData[j][0] *= 100000;
                        fansData[i][tempsData[j][0]] = 0;
                        powerData[i][tempsData[j][0]] = 0;
                        if (typeof tempsData[j][2] != 'undefined') {
                            fansData[i][tempsData[j][0]] = tempsData[j][2];
                        }
                        if (typeof tempsData[j][3] != 'undefined') {
                            powerData[i][tempsData[j][0]] = tempsData[j][3];
                        }
                        if (tempsData[j][1] > 1000) {
                            tempsData[j][1] = tempsData[j][1] / 1000;
                        }
                        if (tempsData[j][1] > 500) {
                            driverErrorChart = 1;
                        }
                    }
                    tempsData.sort(function (a, b) {
                        return a[0] - b[0];
                    })
                    chartTemps.addSeries({
                        animation: false,
                        name: '#' + tempsName,
                        data: tempsData,
                        tooltip: {valueDecimals: 0, valueSuffix: temperature},
                        showInNavigator: true,
                        dataLabels: {enabled: false},
                        dataGrouping: {approximation: "average", enabled: true, forced: true},
                        color: tempColors[tempsName],
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            lineColor: 'rgba(255,255,255,0)',
                            lineWidth: 0,
                            states: {hover: {lineWidth: 0}}
                        },
                        states: {
                            hover: {
                                enabled: true,
                                lineWidth: 2,
                                marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                            }
                        },
                        fillOpacity: 0,
                        fillColor: 'rgba(255,255,255,0)'
                    }, false);
                }
                i++;
            });
            for (var j = 0; j < powerData.length; j++) {
                var powerDataAverages = {};
                var avgCount = 0;
                var currentDate = 0;
                var previousDate = 0;
                $.each(powerData[j], function (timestamp, power) {
                    currentDate = getDayTimestamp(timestamp);
                    if (previousDate == 0) {
                        previousDate = currentDate;
                    }
                    if (previousDate != currentDate) {
                        powerDataAverages[previousDate] /= avgCount;
                        avgCount = 0;
                    }
                    if (powerDataAverages[currentDate] == null) powerDataAverages[currentDate] = 0;
                    if (power > 0 && (avgCount == 0 || (power / (powerDataAverages[currentDate] / avgCount) < 10 || (power / (powerDataAverages[currentDate] / avgCount) > 0 && avgCount < 3)))) {
                        powerDataAverages[currentDate] += power;
                        avgCount++;
                    }
                    previousDate = currentDate;
                });
                powerDataAverages[previousDate] /= avgCount;
                $.each(powerData[j], function (timestamp, power) {
                    if (power > 30 * powerDataAverages[getDayTimestamp(timestamp)] && powerDataAverages[getDayTimestamp(timestamp)] != 0 && power != 0) {
                        powerData[j][timestamp] = Math.round(powerDataAverages[getDayTimestamp(timestamp)]);
                    }
                });
            }
            chartTemps.redraw();
            for (var j = 0; j < dataEff.length; j++) {
                dataEff[j][0] *= 100000;
                dataEff[j][1] *= 100;
            }
            dataEff.sort(function (a, b) {
                return a[0] - b[0];
            })
            chartEff.addSeries({
                animation: false,
                name: ' ' + _('Efficiency'),
                data: dataEff,
                tooltip: {valueDecimals: 2, valueSuffix: '%'},
                color: dailyProfitabilityColor,
                showInNavigator: true,
                dataLabels: {enabled: false},
                dataGrouping: {approximation: "average", enabled: true, forced: true},
                connectNulls: false
            }, false);
            chartEff.redraw();
            var dataProfitability = {};
            var daysObj = {};
            var dataProfitabilityCoinsByDays = [];
            var coinsListObj = {};
            var top5today = [];
            var top5yesterday = [];
            var top5last3d = [];
            var top5last7d = [];
            var top5thisMonth = [];
            var top5last30d = [];
            var coinsTop5today = [];
            var coinsTop5yesterday = [];
            var coinsTop5last3d = [];
            var coinsTop5last7d = [];
            var coinsTop5thisMonth = [];
            var coinsTop5last30d = [];
            var firstDate = 999999999999;
            var currentDate = 0;
            var lastDate = 0;
            var numDaysTotal = 0;
            var data = workerData[2];
            var data_temp = [];
            var numDaysTotal = 0;
            for (var j = 0; j < data.length; j++) {
                dataProfitability[data[j][0]] = 0;
                if (data[j][0] > lastDate) lastDate = data[j][0];
                if (data[j][0] < firstDate) firstDate = data[j][0];
                for (var k = 0; k < data[j][1].length; k++) {
                    var coin = data[j][1][k][0];
                    if (coin != null && coin != 0 && coin != 'NO') {
                        coinsListObj[coin] = {};
                    }
                }
            }
            $.each(coinsListObj, function (coin, value) {
                colorString += coin + ",";
                $.each(dataProfitability, function (index2, value2) {
                    coinsListObj[coin][index2] = [0, 0];
                });
                coinsTop5today.push([coin, 0, 0]);
                coinsTop5yesterday.push([coin, 0, 0]);
                coinsTop5last3d.push([coin, 0, 0]);
                coinsTop5last7d.push([coin, 0, 0]);
                coinsTop5thisMonth.push([coin, 0, 0]);
                coinsTop5last30d.push([coin, 0, 0]);
            });
            currentDate = lastDate - lastDate % (24 * 6 * 6) + (24 * 6 * 6);
            while (currentDate > firstDate) {
                daysObj[numDaysTotal] = [currentDate, 0];
                numDaysTotal++;
                currentDate = currentDate - (24 * 6 * 6);
            }
            daysObj[numDaysTotal] = [firstDate, 0];
            numDaysTotal++;
            var data = workerData[2];
            for (var j = 0; j < data.length; j++) {
                var earningsData = data[j][1];
                var currentProfit = 0;
                if (earningsData != null) {
                    for (var k = 0; k < earningsData.length; k++) {
                        if (earningsData[k] != 0) {
                            currentProfit += parseFloat(earningsData[k][1]) * parseFloat(earningsData[k][2]);
                        }
                    }
                }
                dataProfitability[data[j][0]] += currentProfit;
                if (earningsData != null) {
                    for (var k = 0; k < earningsData.length; k++) {
                        if (earningsData[k] != 0) {
                            var coin = earningsData[k][0];
                            if (coin != null && coin != 0 && coin != 'NO') {
                                coinsListObj[coin][data[j][0]][1] += parseFloat(earningsData[k][1]);
                                coinsListObj[coin][data[j][0]][0] += parseFloat(earningsData[k][1]) * parseFloat(earningsData[k][2]);
                            }
                            currentProfit += parseFloat(earningsData[k][1]) * parseFloat(earningsData[k][2]);
                        }
                    }
                }
            }
            var counter = 0;
            var averages = {};
            var globalAverages = {};
            $.each(coinsListObj, function (index, value) {
                var coinArray = [];
                var currentDate = 0;
                var previousDate = 0;
                var avgCount = 0;
                $.each(value, function (index2, value2) {
                    index2 = index2 * 100000;
                    currentDate = getDayTimestamp(index2);
                    if (previousDate == 0) {
                        previousDate = currentDate;
                    }
                    if (previousDate != currentDate) {
                        averages[index][previousDate][0] /= avgCount;
                        averages[index][previousDate][1] /= avgCount;
                        avgCount = 0;
                    }
                    if (averages[index] == null) averages[index] = {};
                    if (averages[index][currentDate] == null) {
                        averages[index][currentDate] = [];
                        averages[index][currentDate][0] = 0;
                        averages[index][currentDate][1] = 0;
                    }
                    if (value2[0] > 0 && (avgCount == 0 || (value2[0] / (averages[index][currentDate] / avgCount) < 10 || (value2[0] / (averages[index][currentDate] / avgCount) > 0 && avgCount < 3)))) {
                        averages[index][currentDate][0] += value2[0];
                        averages[index][currentDate][1] += value2[1];
                        avgCount++;
                    }
                    previousDate = currentDate;
                });
                averages[index][previousDate][0] /= avgCount;
                averages[index][previousDate][1] /= avgCount;
                $.each(value, function (index2, value2) {
                    index2 = index2 * 100000;
                    if (value2[0] > 30 * averages[index][getDayTimestamp(index2)][0] && averages[index][getDayTimestamp(index2)][0] != 0 && value2[0] != 0) {
                        value2[0] = averages[index][getDayTimestamp(index2)][0];
                        value2[1] = averages[index][getDayTimestamp(index2)][1];
                    }
                    value2[0] = value2[0] * currencyValue;
                    coinArray.push([index2, value2[0], value2[1]]);
                });
                coinArray.sort(function (a, b) {
                    return a[0] - b[0];
                })
                coinsList.push([index, coinArray]);
            });
            for (var i = 0; i < coinsList.length; i++) {
                var coinImage = coinsList[i][0];
                if (coinImage.indexOf(" ") != -1) {
                    coinImage = coinImage.split(' ')[0];
                }
                chartWorkerProfitability.addSeries({
                    name: '' + coinsList[i][0] + ' ' + _('profitability'),
                    data: coinsList[i][1],
                    tooltip: {valueDecimals: 2, valueSuffix: currency + '/' + _('day'), pointFormat: coinsList[i][0]},
                    dataGrouping: {approximation: "average", enabled: true, forced: true},
                    visible: true,
                    showInNavigator: false,
                    color: colors[coinImage],
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    fillOpacity: 0,
                    fillColor: 'rgba(255,255,255,0)'
                }, false);
            }
            currentDate = 0;
            previousDate = 0;
            avgCount = 0;
            var dataProfitabilityArray = [];
            $.each(dataProfitability, function (index, value) {
                index = index * 100000;
                currentDate = getDayTimestamp(index);
                if (previousDate == 0) {
                    previousDate = currentDate;
                }
                if (previousDate != currentDate) {
                    globalAverages[previousDate] /= avgCount;
                    avgCount = 0;
                }
                if (globalAverages[currentDate] == null) globalAverages[currentDate] = 0;
                if (value > 0 && (avgCount == 0 || (value / (globalAverages[currentDate] / avgCount) < 10 || (value / (globalAverages[currentDate] / avgCount) > 0 && avgCount < 3)))) {
                    globalAverages[currentDate] += value;
                    avgCount++;
                }
                previousDate = currentDate;
            });
            maxDate = data[data.length - 1][0];
            globalAverages[previousDate] /= avgCount;
            $.each(dataProfitability, function (index, value) {
                index = index * 100000;
                value = value * currencyValue;
                if (value > 30 * globalAverages[getDayTimestamp(index)] && globalAverages[getDayTimestamp(index)] != 0 && value != 0) {
                    value = globalAverages[getDayTimestamp(index)];
                }
                dataProfitabilityArray.push([index, value]);
            });
            chartWorkerProfitability.addSeries({
                name: _('Daily profitability'),
                data: dataProfitabilityArray,
                tooltip: {valueDecimals: 2, valueSuffix: currency + '/' + _('day'), pointFormat: '-'},
                showInNavigator: true,
                navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)'},
                color: dailyProfitabilityColor,
                dataGrouping: {approximation: "average", enabled: true, forced: true},
                marker: {
                    enabled: false,
                    symbol: 'circle',
                    lineColor: 'rgba(255,255,255,0)',
                    lineWidth: 0,
                    states: {hover: {lineWidth: 0}}
                },
                states: {
                    hover: {
                        enabled: true,
                        lineWidth: 2,
                        marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                    }
                },
                fillOpacity: 1,
                fillColor: {
                    linearGradient: [0, 150, 0, 0],
                    stops: [[0, Highcharts.Color(dailyProfitabilityColor).setOpacity(0).get('rgba')], [1, Highcharts.Color(dailyProfitabilityColor).setOpacity(0.5).get('rgba')]]
                }
            }, false);
            chartWorkerProfitability.redraw();
            if (plan == 2) {
                chartWorkerProfitability.update({
                    rangeSelector: {
                        buttons: [{
                            type: 'hour',
                            count: 3,
                            text: '3h'
                        }, {type: 'hour', count: 12, text: '12h'}, {type: 'hour', count: 24, text: '1d'}, {
                            type: 'day',
                            count: 3,
                            text: '3d'
                        }, {type: 'day', count: 7, text: '7d'}, {type: 'all', text: _('All')}],
                        selected: 1,
                        verticalAlign: 'top',
                        buttonPosition: {align: 'right', x: 0, y: -65},
                    }
                });
            } else if (plan == 1) {
                chartWorkerProfitability.update({
                    rangeSelector: {
                        buttons: [{
                            type: 'hour',
                            count: 3,
                            text: '3h'
                        }, {type: 'hour', count: 12, text: '12h'}, {type: 'hour', count: 24, text: '1d'}, {
                            type: 'day',
                            count: 3,
                            text: '3d'
                        }, {type: 'all', text: _('All')}],
                        selected: 1,
                        verticalAlign: 'top',
                        buttonPosition: {align: 'right', x: 0, y: -65},
                    }
                });
            } else {
                chartWorkerProfitability.update({
                    rangeSelector: {
                        buttons: [{
                            type: 'hour',
                            count: 3,
                            text: '3h'
                        }, {type: 'hour', count: 12, text: '12h'}, {type: 'hour', count: 24, text: '1d'}, {
                            type: 'all',
                            text: _('All')
                        }], selected: 1, verticalAlign: 'top', buttonPosition: {align: 'right', x: 0, y: -65},
                    }
                });
            }
            for (var i = 0; i < coinsList.length; i++) {
                var coinName = coinsList[i][0];
                var data = coinsList[i][1];
                var currentTime = 0;
                var byCoinDays = [];
                var byCoinDaysExc = [];
                var tempSum = 0;
                var tempSumExc = 0;
                var counter = 0;
                var average = 0;
                var averageExc = 0;
                var dayCounter = numDaysTotal - 2;
                if (numDaysTotal == 1) {
                    dayCounter = numDaysTotal - 1;
                }
                var dayTimestamp = daysObj[dayCounter][0];
                for (var j = 0; j < data.length; j++) {
                    currentTime = data[j][0] / 100000;
                    if (currentTime >= dayTimestamp && dayCounter > 0) {
                        if (counter == 0 && tempSum == 0) {
                            counter = 1;
                        }
                        average = tempSum / counter;
                        averageExc = tempSumExc / counter;
                        byCoinDays.push(average);
                        byCoinDaysExc.push(averageExc);
                        tempSum = 0;
                        tempSumExc = 0;
                        counter = 0;
                        average = 0;
                        averageExc = 0;
                        dayCounter--;
                        dayTimestamp = daysObj[dayCounter][0];
                    }
                    tempSum += data[j][1];
                    tempSumExc += data[j][2];
                    counter++;
                }
                if (average == 0 && averageExc == 0 && counter != 0) {
                    average = tempSum / counter;
                    averageExc = tempSumExc / counter;
                    byCoinDays.push(average);
                    byCoinDaysExc.push(averageExc);
                }
                var byCoinDaysReverse = [];
                var byCoinDaysExcReverse = [];
                for (var j = byCoinDays.length - 1; j >= 0; j--) {
                    byCoinDaysReverse.push(byCoinDays[j]);
                    byCoinDaysExcReverse.push(byCoinDaysExc[j]);
                }
                dataProfitabilityCoinsByDays.push([coinName, byCoinDaysReverse, byCoinDaysExcReverse]);
            }
            var profToday = 0;
            var profYesterday = 0;
            var profYesterdayCompare = 0;
            var prof3d = 0;
            var prof3dCompare = 0;
            var prof7d = 0;
            var prof7dCompare = 0;
            var profThisMonth = 0;
            var profThisMonthCompare = 0;
            var prof30d = 0;
            var prof30dCompare = 0;
            var d = new Date();
            var day = d.getDate();
            var month = d.getMonth() + 1;
            var year = d.getYear();
            var daysOfMonth = 30;
            if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
                daysOfMonth = 31;
            } else if (month == 2) {
                daysOfMonth = 28;
                if (new Date(year, 1, 29).getDate() === 29) {
                    daysOfMonth = 29;
                }
            }
            for (var i = 0; i < dataProfitabilityCoinsByDays.length; i++) {
                var coin = dataProfitabilityCoinsByDays[i][0];
                var data = dataProfitabilityCoinsByDays[i][1];
                var exchangeRate = dataProfitabilityCoinsByDays[i][2];
                profToday += parseFloat(data[0]);
                if (data[1] != null) {
                    profYesterday += parseFloat(data[1]);
                }
                if (data[8] != null) {
                    profYesterdayCompare += parseFloat(data[8]);
                }
                for (var j = 0; j < 3; j++) {
                    if (data[j] != null) {
                        prof3d += parseFloat(data[j]);
                    }
                }
                for (var j = 3; j < 6; j++) {
                    if (data[j] != null) {
                        prof3dCompare += parseFloat(data[j]);
                    }
                }
                for (var j = 0; j < 7; j++) {
                    if (data[j] != null) {
                        prof7d += parseFloat(data[j]);
                    }
                }
                for (var j = 7; j < 14; j++) {
                    if (data[j] != null) {
                        prof7dCompare += parseFloat(data[j]);
                    }
                }
                for (var j = 0; j < day; j++) {
                    if (data[j] != null) {
                        profThisMonth += parseFloat(data[j]);
                    }
                }
                for (var j = 30; j < 30 + day; j++) {
                    if (data[j] != null) {
                        profThisMonthCompare += parseFloat(data[j]);
                    }
                }
                for (var j = 0; j < 30; j++) {
                    if (data[j] != null) {
                        prof30d += parseFloat(data[j]);
                    }
                }
                for (var j = 30; j < 60; j++) {
                    if (data[j] != null) {
                        prof30dCompare += parseFloat(data[j]);
                    }
                }
                if (coinsTop5today[i][0] == coin) {
                    coinsTop5today[i][1] += parseFloat(data[0]);
                    coinsTop5today[i][2] += parseFloat(exchangeRate[0]);
                }
                if (coinsTop5yesterday[i][0] == coin) {
                    if (data[1] != null) {
                        coinsTop5yesterday[i][1] += parseFloat(data[1]);
                        coinsTop5yesterday[i][2] += parseFloat(exchangeRate[1]);
                    }
                }
                if (coinsTop5last3d[i][0] == coin) {
                    for (var j = 0; j < 3; j++) {
                        if (data[j] != null) {
                            coinsTop5last3d[i][1] += parseFloat(data[j]);
                            coinsTop5last3d[i][2] += parseFloat(exchangeRate[j]);
                        }
                    }
                }
                if (coinsTop5last7d[i][0] == coin) {
                    for (var j = 0; j < 7; j++) {
                        if (data[j] != null) {
                            coinsTop5last7d[i][1] += parseFloat(data[j]);
                            coinsTop5last7d[i][2] += parseFloat(exchangeRate[j]);
                        }
                    }
                }
                if (coinsTop5thisMonth[i][0] == coin) {
                    for (var j = 0; j < day; j++) {
                        if (data[j] != null) {
                            coinsTop5thisMonth[i][1] += parseFloat(data[j]);
                            coinsTop5thisMonth[i][2] += parseFloat(exchangeRate[j]);
                        }
                    }
                }
                if (coinsTop5last30d[i][0] == coin) {
                    for (var j = 0; j < 30; j++) {
                        if (data[j] != null) {
                            coinsTop5last30d[i][1] += parseFloat(data[j]);
                            coinsTop5last30d[i][2] += parseFloat(exchangeRate[j]);
                        }
                    }
                }
            }
            $('#profToday').html(profToday.toFixed(toFixedValue) + ' ' + currency);
            $('#profYesterday').html(profYesterday.toFixed(toFixedValue) + ' ' + currency);
            $('#prof3d').html(prof3d.toFixed(toFixedValue) + ' ' + currency);
            $('#prof7d').html(prof7d.toFixed(toFixedValue) + ' ' + currency);
            $('#profThisMonth').html(profThisMonth.toFixed(toFixedValue) + ' ' + currency);
            $('#prof30d').html(prof30d.toFixed(toFixedValue) + ' ' + currency);
            var growth = 0;
            if (numDaysTotal > 1) {
                if (profYesterday != 0) {
                    growth = (100 * (profToday - profYesterday) / profYesterday).toFixed(2);
                    $('#profTodayCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#profTodayCompare').children('.icon').removeClass('arrow_none');
                        $('#profTodayCompare').children('.icon').addClass('arrow_up');
                        $('#profTodayCompare').children('.percent').removeClass('gray');
                        $('#profTodayCompare').children('.percent').addClass('green');
                    } else {
                        $('#profTodayCompare').children('.icon').removeClass('arrow_none');
                        $('#profTodayCompare').children('.icon').addClass('arrow_down');
                        $('#profTodayCompare').children('.percent').removeClass('gray');
                        $('#profTodayCompare').children('.percent').addClass('red');
                    }
                }
            }
            if (numDaysTotal > 8) {
                if (profYesterdayCompare != 0) {
                    growth = (100 * (profYesterday - profYesterdayCompare) / profYesterdayCompare).toFixed(2);
                    $('#profYesterdayCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#profYesterdayCompare').children('.icon').removeClass('arrow_none');
                        $('#profYesterdayCompare').children('.icon').addClass('arrow_up');
                        $('#profYesterdayCompare').children('.percent').removeClass('gray');
                        $('#profYesterdayCompare').children('.percent').addClass('green');
                    } else {
                        $('#profYesterdayCompare').children('.icon').removeClass('arrow_none');
                        $('#profYesterdayCompare').children('.icon').addClass('arrow_down');
                        $('#profYesterdayCompare').children('.percent').removeClass('gray');
                        $('#profYesterdayCompare').children('.percent').addClass('red');
                    }
                }
            }
            if (numDaysTotal > 6) {
                if (prof3dCompare != 0) {
                    growth = (100 * (prof3d - prof3dCompare) / prof3dCompare).toFixed(2);
                    $('#prof3dCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#prof3dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof3dCompare').children('.icon').addClass('arrow_up');
                        $('#prof3dCompare').children('.percent').removeClass('gray');
                        $('#prof3dCompare').children('.percent').addClass('green');
                    } else {
                        $('#prof3dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof3dCompare').children('.icon').addClass('arrow_down');
                        $('#prof3dCompare').children('.percent').removeClass('gray');
                        $('#prof3dCompare').children('.percent').addClass('red');
                    }
                }
            }
            if (numDaysTotal > 14) {
                if (prof7dCompare != 0) {
                    growth = (100 * (prof7d - prof7dCompare) / prof7dCompare).toFixed(2);
                    $('#prof7dCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#prof7dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof7dCompare').children('.icon').addClass('arrow_up');
                        $('#prof7dCompare').children('.percent').removeClass('gray');
                        $('#prof7dCompare').children('.percent').addClass('green');
                    } else {
                        $('#prof7dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof7dCompare').children('.icon').addClass('arrow_down');
                        $('#prof7dCompare').children('.percent').removeClass('gray');
                        $('#prof7dCompare').children('.percent').addClass('red');
                    }
                }
            }
            if (numDaysTotal > month + day) {
                if (profThisMonthCompare != 0) {
                    growth = (100 * (profThisMonth - profThisMonthCompare) / profThisMonthCompare).toFixed(2);
                    $('#profThisMonthCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#profThisMonthCompare').children('.icon').removeClass('arrow_none');
                        $('#profThisMonthCompare').children('.icon').addClass('arrow_up');
                        $('#profThisMonthCompare').children('.percent').removeClass('gray');
                        $('#profThisMonthCompare').children('.percent').addClass('green');
                    } else {
                        $('#profThisMonthCompare').children('.icon').removeClass('arrow_none');
                        $('#profThisMonthCompare').children('.icon').addClass('arrow_down');
                        $('#profThisMonthCompare').children('.percent').removeClass('gray');
                        $('#profThisMonthCompare').children('.percent').addClass('red');
                    }
                }
            }
            if (numDaysTotal > 60) {
                if (prof30dCompare != 0) {
                    growth = (100 * (prof30d - prof30dCompare) / prof30dCompare).toFixed(2);
                    $('#prof30dCompare').children('.percent').html(growth + "%");
                    if (growth >= 0) {
                        $('#prof30dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof30dCompare').children('.icon').addClass('arrow_up');
                        $('#prof30dCompare').children('.percent').removeClass('gray');
                        $('#prof30dCompare').children('.percent').addClass('green');
                    } else {
                        $('#prof30dCompare').children('.icon').removeClass('arrow_none');
                        $('#prof30dCompare').children('.icon').addClass('arrow_down');
                        $('#prof30dCompare').children('.percent').removeClass('gray');
                        $('#prof30dCompare').children('.percent').addClass('red');
                    }
                }
            }
            var coinsTop5todayDisplay = '';
            var coinsTop5yesterdayDisplay = '';
            var coinsTop5last3dDisplay = '';
            var coinsTop5last7dDisplay = '';
            var coinsTop5thisMonthDisplay = '';
            var coinsTop5last30dDisplay = '';
            var coinDisplay = '';
            var showCoins = 10;
            coinsTop5today = coinsTop5today.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5today.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5today[i][0]);
                coinsTop5todayDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5today[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5today[i][0]) + '.png">' + coinsTop5today[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5today[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5today.length - showCoins) break;
            }
            $('#topCoinsToday').html(coinsTop5todayDisplay);
            coinsTop5yesterday = coinsTop5yesterday.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5yesterday.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5yesterday[i][0]);
                coinsTop5yesterdayDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5yesterday[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5yesterday[i][0]) + '.png">' + coinsTop5yesterday[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5yesterday[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5yesterday.length - showCoins) break;
            }
            $('#topCoinsYesterday').html(coinsTop5yesterdayDisplay);
            coinsTop5last3d = coinsTop5last3d.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5last3d.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5last3d[i][0]);
                coinsTop5last3dDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5last3d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5last3d[i][0]) + '.png">' + coinsTop5last3d[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5last3d[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5last3d.length - showCoins) break;
            }
            $('#topCoinsLast3d').html(coinsTop5last3dDisplay);
            coinsTop5last7d = coinsTop5last7d.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5last7d.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5last7d[i][0]);
                coinsTop5last7dDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5last7d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5last7d[i][0]) + '.png">' + coinsTop5last7d[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5last7d[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5last7d.length - showCoins) break;
            }
            $('#topCoinsLast7d').html(coinsTop5last7dDisplay);
            coinsTop5thisMonth = coinsTop5thisMonth.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5thisMonth.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5thisMonth[i][0]);
                coinsTop5thisMonthDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5thisMonth[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5thisMonth[i][0]) + '.png">' + coinsTop5thisMonth[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5thisMonth[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5thisMonth.length - showCoins) break;
            }
            $('#topCoinsThisMonth').html(coinsTop5thisMonthDisplay);
            coinsTop5last30d = coinsTop5last30d.sort(function (a, b) {
                return a[1] - b[1];
            });
            for (var i = coinsTop5last30d.length - 1; i >= 0; i--) {
                coinDisplay = getUnitFromCrypto(coinsTop5last30d[i][0]);
                coinsTop5last30dDisplay += '<div class="row"><div class="coin" data-tooltip="' + coinsTop5last30d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/static-ssl.minerstat.farm/32/no.png\';"style="margin-right:5px;" src="/static-ssl.minerstat.farm/32/' + getIcon(coinsTop5last30d[i][0]) + '.png">' + coinsTop5last30d[i][2].toFixed(4) + ' ' + coinDisplay + '</div><div class="usd">' + coinsTop5last30d[i][1].toFixed(toFixedValue) + ' ' + currency + '</div></div>';
                if (i == coinsTop5last30d.length - showCoins) break;
            }
            $('#topCoinsLast30d').html(coinsTop5last30dDisplay);
            if (numDaysTotal < 2) {
                $('#profYesterday').parent().hide();
                $('#topCoinsYesterday').parent().hide();
                $('#prof3d').parent().hide();
                $('#topCoinsLast3d').parent().hide();
                $('#prof7d').parent().hide();
                $('#topCoinsLast5d').parent().hide();
                $('#profThisMonth').parent().hide();
                $('#topCoinsThisMonth').parent().hide();
                $('#prof30d').parent().hide();
                $('#topCoinsLast30d').parent().hide();
                $('.notEnoughData').css('display', 'flex');
            }
            preloaderHide();
        } else {
            $('.stats').html('<div class="empty_state"><div class="empty_icon wait_bubble"><div class="empty_icon wait_stats"></div></div><div class="title">' + _('Your first data will be ready soon') + '</div><div class="text">' + _('please check again in few minutes') + '</div></div>');
            preloaderHide();
        }
    });
});
Highcharts.setOptions({lang: {months: [_('January'), _('February'), _('March'), _('April'), _('May'), _('June'), _('July'), _('August'), _('September'), _('October'), _('November'), _('December')]}});
var chartWorkerProfitability = new Highcharts.chart('worker-profitability', {
    chart: {
        animation: false, alignTicks: false, type: 'areaspline', events: {
            redraw: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
    },
    title: {
        text: _mx4("Worker's profitability"),
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 10
    },
    legend: {
        itemMarginTop: 10,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        allowDecimals: allowDecimalsValue
    }],
    tooltip: {
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        formatter: function () {
            var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            var points = this.points;
            style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
            var countMining = 0;
            for (var i = 0; i < points.length; i++) {
                if (this.points[i].series.tooltipOptions.pointFormat == '-') {
                    style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + ((this.points[i].y).toFixed(toFixedValue)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + this.points[i].series.name + '</div>';
                } else {
                    var coin = points[i].series.tooltipOptions.pointFormat;
                    var cryptoData;
                    for (var j = 0; j < coinsList.length; j++) {
                        if (coin == coinsList[j][0]) {
                            cryptoData = coinsList[j][1];
                            break;
                        }
                    }
                    var find = points[i].x;
                    var cryptoMined = 0;
                    for (var j = 0; j < cryptoData.length; j++) {
                        if (Math.round(cryptoData[j][0] / (1000)) == Math.round(find / (1000))) {
                            cryptoMined = cryptoData[j][2];
                            break;
                        }
                    }
                    if (this.points[i].y > 0) {
                        style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + (((this.points[i].y)).toFixed(toFixedValue)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + cryptoMined.toFixed(6) + ' ' + this.points[i].series.tooltipOptions.pointFormat + '/' + _('day') + '</div>';
                        countMining++;
                    }
                }
            }
            if (countMining == 0) {
                style += '<div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('No data') + '</div>';
            }
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        areaspline: {
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 40,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -65},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: fontWeightBold}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: fontWeightBold}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize}
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": "#ffffff"}}}}]},
    credits: {enabled: false}
});
var chartEff = new Highcharts.chart('efficiency', {
    chart: {
        animation: false, alignTicks: false, type: 'spline', events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
    },
    title: {
        text: _mx('Efficiency'),
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 10
    },
    legend: {
        itemMarginTop: 10,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label + "%";
            }
        },
        softMax: 110,
        softMin: 80
    }],
    tooltip: {
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        formatter: function () {
            var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            var points = this.points;
            style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
            for (var i = 0; i < points.length; i++) {
                style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + ((this.points[i].y).toFixed(toFixedValue)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + this.points[i].series.name + '</div>';
            }
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        spline: {
            lineWidth: 3,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 40,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -65},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: fontWeightBold}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: fontWeightBold}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize},
        buttons: [{type: 'hour', count: 3, text: '3h'}, {type: 'hour', count: 12, text: '12h'}, {
            type: 'hour',
            count: 24,
            text: '1d'
        }, {type: 'day', count: 3, text: '3d'}, {type: 'all', text: _('All')}],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": "#ffffff"}}}}]},
    credits: {enabled: false}
});
var chartTemps = new Highcharts.chart('temperature', {
    chart: {
        alignTicks: false, type: 'spline', events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTop, backgroundColor: null
    },
    title: {
        text: _mx('Temperature'),
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 10
    },
    legend: {
        itemMarginTop: 10,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label + temperature;
            }
        },
        softMax: softMaxValue,
        softMin: softMinValue,
        plotLines: [{
            color: hotColor,
            label: {
                text: _('VERY HOT'),
                align: 'right',
                verticalAlign: 'top',
                style: {color: hotColor, fontSize: smallSize, fontWeight: fontWeightBold},
                x: 0,
                y: -5
            },
            width: 2,
            value: veryHotValue,
            zIndex: 100,
            dashStyle: 'ShortDot',
        }, {
            color: hotColor,
            label: {
                text: _('HOT'),
                align: 'right',
                verticalAlign: 'top',
                style: {color: hotColor, fontSize: smallSize, fontWeight: fontWeightBold},
                x: 0,
                y: -5
            },
            width: 2,
            value: hotValue,
            zIndex: 100,
            dashStyle: 'ShortDot',
        }],
        plotBands: [{
            color: {
                linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1},
                stops: [[0, hotGradientFrom], [1, hotGradientTo]]
            }, from: veryHotValueStart, to: veryHotValueStop
        }, {
            color: {linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1}, stops: [[0, hotGradientFrom], [1, hotGradientTo]]},
            from: hotValueStart,
            to: hotValueStop
        }]
    }],
    tooltip: {
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        formatter: function () {
            var points = this.points;
            var width = '200px';
            if (driverErrorChart != 0) {
                width = '280px';
            }
            if (points.length > 6) {
                width = '370px';
                if (driverErrorChart != 0) {
                    width = '450px';
                }
            }
            var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:' + width + 'px;">';
            style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:12px;color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
            if (points.length > 6) {
                style += '<div style="width:' + width + ';display:flex;flex-wrap:wrap;flex-direction:row;justify-content:flex-start;">';
                style += '<div style="width:50%;">';
                for (var i = 0; i < points.length; i++) {
                    if (i == Math.round((points.length) / 2)) {
                        style += '</div>';
                        style += '<div style="width:50%;">';
                    }
                    var tempOutput = Math.round(this.points[i].y) + " " + temperature;
                    if (this.points[i].y > 1000) {
                        this.points[i].y = this.points[i].y / 1000;
                    }
                    if (this.points[i].y > 500) {
                        tempOutput = _('Driver error');
                    }
                    var fans = '';
                    if (typeof fansData[i] != 'undefined' && typeof fansData[i][this.points[i].x] != 'undefined' && fansData[i][this.points[i].x] != null && fansData[i][this.points[i].x] > 0) {
                        fans = fansData[i][this.points[i].x];
                        if (fans > 100) {
                            fans = ' / ' + fans + ' RPM';
                        } else {
                            fans = ' / ' + fans + '%';
                        }
                    }
                    var power = '';
                    if (typeof powerData[i] != 'undefined' && typeof powerData[i][this.points[i].x] != 'undefined' && powerData[i][this.points[i].x] != null && powerData[i][this.points[i].x] > 0) {
                        power = ' / ' + powerData[i][this.points[i].x] + 'W';
                    }
                    style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:14px;line-height:1;"><div style="background:' + this.points[i].color + ';width:12px;height:2px;border-radius:5px;display:inline-table;margin:-2px 8px 0 0;"></div>' + this.points[i].series.name + ': <span style="font-weight:600;vertical-align:baseline;">' + tempOutput + fans + power + '</span></div>';
                }
                style += '</div>';
                style += '</div>';
            } else {
                for (var i = 0; i < points.length; i++) {
                    var tempOutput = Math.round(this.points[i].y) + " " + temperature;
                    if (this.points[i].y > 1000) {
                        this.points[i].y = this.points[i].y / 1000;
                    }
                    if (this.points[i].y > 500) {
                        tempOutput = _('Driver error');
                    }
                    var fans = '';
                    if (typeof fansData[i] != 'undefined' && typeof fansData[i][this.points[i].x] != 'undefined' && fansData[i][this.points[i].x] != null && fansData[i][this.points[i].x] > 0) {
                        fans = fansData[i][this.points[i].x];
                        if (fans > 100) {
                            fans = ' / ' + fans + ' RPM';
                        } else {
                            fans = ' / ' + fans + '%';
                        }
                    }
                    var power = '';
                    if (typeof powerData[i] != 'undefined' && typeof powerData[i][this.points[i].x] != 'undefined' && powerData[i][this.points[i].x] != null && powerData[i][this.points[i].x] > 0) {
                        power = ' / ' + powerData[i][this.points[i].x] + 'W';
                    }
                    style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:14px;line-height:1;"><div style="background:' + this.points[i].color + ';width:12px;height:2px;border-radius:5px;display:inline-table;margin:-2px 8px 0 0;"></div>' + this.points[i].series.name + ': <span style="font-weight:600;vertical-align:baseline;">' + tempOutput + fans + power + '</span></div>';
                }
            }
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        spline: {
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 40,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -65},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: fontWeightBold}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: fontWeightBold}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize},
        buttons: [{type: 'hour', count: 3, text: '3h'}, {type: 'hour', count: 12, text: '12h'}, {
            type: 'hour',
            count: 24,
            text: '1d'
        }, {type: 'day', count: 3, text: '3d'}, {type: 'all', text: 'All'}],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": "#ffffff"}}}}]},
    credits: {enabled: false}
});
window.addEventListener('load', mExternalJsLoadFunc, false);

function mExternalJsLoadFunc() {
    ps = new PerfectScrollbar('.fancyScroll');
}

function getDayTimestamp(aTimestamp) {
    return aTimestamp - aTimestamp % (24 * 60 * 60 * 1000);
}
function myGetHref() {
    let str=window.location.href
    return  str.split('#')[1]
}
function toLinkWorkerInfo() {
   window.location.replace(`/worker#${myGetHref()}`)
}