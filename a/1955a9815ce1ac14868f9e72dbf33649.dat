var workerDriverNvidia = '';
var workerDriverAmd = '';
var workerKernel = '';
var workerUbuntu = '';
var workerMobo = '';
var workerBios = '';
var workerPackage = '';
var workerDrive = '';
var workerMac = '';
var workerCpuType = '';
var workerClientVersion = '';
var workerClientCpuVersion = '';
var workerClockTune = '';
var displayClockTuneValues = '';
var chartColors = '';
var chartType = '';
var workerTimezone = '';
var workerName = '';
var workerId = '';
var workerOffset = 0;
var workerToken = '';
var workerType = '';
var workerSystem = '';
var workersTempHot = 0;
var workersTempVeryHot = 0;
var btcExchange = 0;
var demoAccount = 0;
var workerRemoteIp = '';
var theme = '';
var access = '';
var myAllLock=false;
var miningWallet = '';
var clockTuneJson = '';
workerToken=$('#myHeadId').html()
var textLog=''//日志文本对象
var workerNameCode=myGetHref()
var myHardware=[]//显卡对象
var myOcHardware={}//超频数据对象
var rollState=true//滚动状态
$('#editConfig').attr('onclick','linkConfig('+workerNameCode+')')
var myapiUrl = '/uapi.php?token=' + workerToken + '&worker=' + workerNameCode;
$.ajaxSettings.async = false;
var ockxBock='none"'
if(my_wy_key==0){
    ockxBock='none"'
    $("#_xn_firm").css('pointer-events','none')
    $('.menu').remove()
    $('.content').css('width','100%')
}else {
    $("#_xn_firm").attr('href','/workers')
    ockxBock='block"'
}
hideBtnAll()
function hideBtnAll(){
    $('#static_href').hide()
    $('#notificationsButton').hide()//消息
    $('#editConfig').hide()//配置
    $('#s_tx').hide()//统计
    $('#forbidden').hide()//禁用机器
    $('#snapshoot').show()//快照
    $('#newDataHtml').show()//网页挖矿数据
    $('#clockTune').hide()//超频模板
    $('#restartSoftware').hide()//重启软件
    $('#restartMiner').hide()//重启软件
    $('#rebootMachine').hide()//重启机器
    $('#stopMining').hide()//停止挖矿
    $('#shutdownMachine').hide()//关机
    $('#rouseMachine').hide()//唤醒机器
    $('#startMining').hide()//启动挖矿
    $('#startUsing').hide()//启用
}
$.getJSON(myapiUrl,function (res) {
    let mx=res[workerNameCode]['var']
    // let mx=res['WORKER001']['var']
    let mx2=res[workerNameCode]['var2']
    myHardware=res[workerNameCode]['hardware']
    // myOcHardware=res[workerNameCode]?.oc
    if(res[workerNameCode].oc!=undefined){
        myOcHardware=res[workerNameCode].oc
    }else {
        myHardware=undefined
    }
    workerDriverNvidia=mx.workerDriverNvidia
    workerDriverAmd=mx.workerDriverAmd
    workerKernel=mx.workerKernel
    workerUbuntu=mx.workerUbuntu
    workerMobo=mx.workerMobo
    workerBios=mx.workerBios
    workerPackage=mx.workerPackage
    workerDrive=mx.workerDrive
    workerMac=mx.workerMac
    workerCpuType=mx.workerCpuType
    workerClientVersion=mx.workerClientVersion
    workerClientCpuVersion=mx.workerClientCpuVersion
    workerClockTune=mx.workerClockTune
    clockTuneJson = jQuery.parseJSON(workerClockTune);
    displayClockTuneValues=mx.displayClockTuneValues
    chartColors=mx.chartColors
    chartType=mx.chartType
    workerTimezone=mx.workerTimezone
    workerName=mx.workerName
    $('#myHeadName').html(workerName)
    workerId=mx.workerId
    workerOffset=mx.workerOffset
    workerToken=mx.workerToken
    workerType=mx.workerType
    workerSystem=mx.workerSystem
    workersTempHot=mx.workersTempHot
    workersTempVeryHot=mx.workersTempVeryHot
    // btcExchange=mx.btcExchange
    btcExchange=1
    demoAccount=mx.demoAccount
    workerRemoteIp=mx.workerRemoteIp
    theme=mx.theme
    access=mx['access']
    miningWallet=mx.miningWallet
    currency=mx2.currency
    currencyValue=mx2.currencyValue
    userPermission=mx2.userPermission
    temperature=mx2.temperature
    userPrimaryPermission=mx2.userPrimaryPermission
    $.ajaxSettings.async = true;
    dataRefresh(true);
})
var dailyProfitabilityColor = $('.button.blue').css("background-color");
if (dailyProfitabilityColor == 'rgba(0, 0, 0, 0)') {
    dailyProfitabilityColor = $('header .user .identity .id').css("color");
}
var wasHidden = 0;
var chartTitle = $('.number').css("color");
var titleColor = $('h1').css("color");
var borderColor = '#e2e5ef';
var borderLightColor = '#e2e5ef';
var navigatorBorder = $('.page .menu .subscription_plan small').css("border-top-color");
var navigatorFill = "rgba(87,103,255,0.2)";
var navigatorHandles = $('.text label').css("color");
var navigatorBackground = 'transparent';
var hotColor = titleColor;
var hotGradientFrom = "rgba(0, 0, 0, 0)";
var hotGradientTo = "rgba(0, 0, 0, 0.05)";
var buttonColor = $('.page .content h1').css("color");
var buttonFillHover = $('.page .content h1').css("color");
var buttonColorHover = $('.button.blue').css("color");
var buttonDisabledFill = "transparent";
var buttonDisabledColor = $('.small_button').css("color");
var buttonSelectedFill = buttonFillHover;
var buttonSelectedColor = buttonColorHover;
var hiddenColor = 'transparent';
var tooltipBackgroundColor = $('header .user_menu').css("background-color");
var tooltipBoxShadow = $('header .user_menu').css("box-shadow");
var tooltipBorderColor = $('header .user_menu').css("background-color");
var tooltipDateColor = $('header .user_menu .link').css("color");
var tooltipDarkerColor = $('.number').css("color");
var tooltipSubtitleColor = $('.number').css("color");
var legendColor = $('.number').css("color");
var legendHiddenColor = '#c2c4d0';
var titleSize = $('.content.worker .header .left h1').css("font-size");
var smallSize = $('.content.worker .row_stats .element .text label').css("font-size");
var fontWeightLight = '300';
var fontWeightBold = '600';
var selectorTop = 20;
var selectorTopHardware = 24;
var tooltipHeaderFontSize = '16px';
var powerColor = '#5767ff';
var tooltipExtraColor = '#46474f';
var tooltipExtraBold = '700';
var tooltipExtraSize = '13px';
var timestampsArray = [];
var dataAlerts = [];
var dataAlertsDescriptions = {};
var openedChip = -1;
var tooltipVeryHotColor = '#ff5b56';
var tooltipHotColor = '#ffd66f';
var tooltipGrayColor = '#bfc1d0';
var tooltipTagsBackground = '#f8f9fc';
var tooltipTagsColor = '#6b6d7a';
var tooltipTagsColorDark = '#46474f';
var tooltipTagsSize = '10px';
var tooltipSmallSize = '12px';
var tooltipTabColor = '#ffffff';
var tooltipLighterShade = '#878996';
var columnBorderColor = '#ffffff';
var rejectedColor = '#ff5b56';
var rejectedColorHover = 'rgba(255,91,86,0.6)';
var highlightedCard = -1;
var globalAcceptedShares = 0;
var globalRejectedShares = 0;
var globalUndetectedHardware = 0;
var globalClientUptime = 0;
var globalHashrate = 0;
var globalProfitability = 0;
var globalCoin = '';
var rejectedHeight = '10%';
var rejectedTop = '90%';
var tout;
var chartTypeStr = 'column';
if (chartType == '1') {
    chartTypeStr = 'spline';
}
var colorsRainbow = ['#6d7bf7', '#52cca5', '#ff9970', '#ff95c4', '#49bdff', '#dd84fa', '#fa6262', '#d5b068', '#ba50b6', '#98bd74', '#77cee4', '#dec995', '#fc4cb8', '#a77b69', '#b7d0a6', '#d7a8a8'];
var colorsDefault = ['#FF5B56', '#FF6658', '#FF715B', '#FF7D5D', '#FF885F', '#FF9361', '#FF9E64', '#FFA966', '#FFB468', '#FFC06A', '#FFCB6D', '#FFD66F', '#FFD979', '#FFDB82', '#FFDE8C', '#FFE196'];
var colorsNvidia = ['#52E296', '#50DE8D', '#4FDA84', '#4ED67C', '#4DD273', '#4CCE6A', '#4BCA62', '#4AC659', '#48C250', '#47BE48', '#46BA3F', '#45B636', '#44B22E', '#43AE25', '#42AA1C', '#41A714'];
var colorsAmd = ['#FE7C7C', '#FC7474', '#FA6C6C', '#F86565', '#F65D5D', '#F45656', '#F24E4E', '#F04747', '#EE3F3F', '#EC3838', '#EA3030', '#E82929', '#E62121', '#E41A1A', '#E21212', '#E00B0B'];
var colorsASIC = ['#5667FF', '#5B6BFC', '#606EFA', '#6472F7', '#6875F5', '#6C79F2', '#717CF0', '#7580ED', '#7983EB', '#7D87E8', '#828AE6', '#868EE3'];
var tempColors = colorsDefault;
if (workerType == 'nvidia') {
    tempColors = colorsNvidia;
}
if (workerType == 'amd') {
    tempColors = colorsAmd;
}
if (workerType == 'asic') {
    tempColors = colorsASIC;
}
if (chartColors == '1') {
    tempColors = colorsRainbow;
}
if (theme == 'dark') {
    averageDailyColor = 'rgba(255,255,255,0.2)';
    buttonFillHover = 'rgba(255,255,255,0.1)';
    buttonSelectedFill = 'rgba(255,255,255,0.1)';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.2)';
    borderLightColor = 'rgba(255,255,255,0.1)';
    tooltipSubtitleColor = 'rgba(255,255,255,0.4)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    powerColor = '#6574ff';
    legendHiddenColor = '#5b6478';
    tooltipExtraColor = '#ffffff';
    tooltipExtraBold = '600';
    tooltipExtraSize = '13px';
    tooltipVeryHotColor = '#ff5b56';
    tooltipHotColor = '#ffd66f';
    tooltipGrayColor = 'rgba(255,255,255,0.2)';
    tooltipTagsBackground = 'rgba(255,255,255,0.08)';
    tooltipTagsColor = 'rgba(255,255,255,0.6)';
    tooltipTagsColorDark = '#ffffff';
    tooltipSmallSize = '12px';
    tooltipTagsSize = '10px';
    tooltipTabColor = '#343d52';
    tooltipLighterShade = 'rgba(255,255,255,0.5)';
    columnBorderColor = '#343d52';
}
if (theme == 'hacker') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    fontWeightLight = '500';
    smallSize = '11px';
    titleSize = '12px';
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    selectorTop = 36;
    fontWeightBold = '400';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#50b951';
    buttonColorHover = '#1a1a1a';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#50b951';
    buttonSelectedColor = '#1a1a1a';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    tooltipHeaderFontSize = '14px';
    tooltipDateColor = 'rgba(255,255,255,0.4)';
    tooltipSubtitleColor = 'rgba(255,255,255,0.4)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    powerColor = '#50b951';
    tooltipExtraColor = '#50b951';
    tooltipExtraBold = '600';
    tooltipExtraSize = '12px';
    tooltipVeryHotColor = '#ff5b56';
    tooltipHotColor = '#ffd66f';
    tooltipGrayColor = 'rgba(255,255,255,0.2)';
    tooltipTagsBackground = 'rgba(255,255,255,0.05)';
    tooltipTagsColor = 'rgba(255,255,255,0.6)';
    tooltipTagsColorDark = '#50b951';
    tooltipSmallSize = '10px';
    tooltipTagsSize = '10px';
    tooltipTabColor = '#1a1a1a';
    tooltipLighterShade = 'rgba(255,255,255,0.4)';
    columnBorderColor = '#1a1a1a';
}
if (theme == 'electric') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    titleSize = '16px';
    selectorTop = 26;
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#02dcff';
    buttonColorHover = '#001432';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#02dcff';
    buttonSelectedColor = '#001432';
    tooltipDateColor = 'rgba(255,255,255,0.4)';
    tooltipSubtitleColor = 'rgba(255,255,255,0.4)';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    powerColor = '#02dcff';
    tooltipExtraColor = '#fff';
    tooltipExtraBold = '600';
    tooltipExtraSize = '13px';
    tooltipVeryHotColor = '#ff5b56';
    tooltipHotColor = '#ffd66f';
    tooltipGrayColor = 'rgba(255,255,255,0.2)';
    tooltipTagsBackground = 'rgba(255,255,255,0.08)';
    tooltipTagsColor = 'rgba(255,255,255,0.6)';
    tooltipTagsColorDark = '#ffffff';
    tooltipSmallSize = '12px';
    tooltipTagsSize = '10px';
    tooltipTabColor = '#001432';
    tooltipLighterShade = 'rgba(255,255,255,0.4)';
    columnBorderColor = '#0d203c';
}
if (theme == 'radioactive') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    selectorTop = 32;
    titleSize = '16px';
    chartTitle = '#ffffff';
    tooltipDarkerColor = '#ffffff';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#ffdd00';
    buttonColorHover = '#1f262d';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#ffdd00';
    buttonSelectedColor = '#1f262d';
    tooltipDateColor = 'rgba(255,255,255,0.4)';
    tooltipSubtitleColor = 'rgba(255,255,255,0.4)';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    hotColor = '#ffffff';
    hotGradientFrom = "rgba(255, 255, 255, 0)";
    hotGradientTo = "rgba(255, 255, 255, 0.1)";
    powerColor = '#ffdd00';
    tooltipExtraColor = '#fff';
    tooltipExtraBold = '600';
    tooltipExtraSize = '13px';
    tooltipVeryHotColor = '#ff5b56';
    tooltipHotColor = '#ffd66f';
    tooltipGrayColor = 'rgba(255,255,255,0.2)';
    tooltipTagsBackground = 'rgba(255,255,255,0.08)';
    tooltipTagsColor = 'rgba(255,255,255,0.6)';
    tooltipTagsColorDark = '#ffffff';
    tooltipSmallSize = '12px';
    tooltipTagsSize = '10px';
    tooltipTabColor = '#1f262d';
    tooltipLighterShade = 'rgba(255,255,255,0.4)';
    columnBorderColor = '#31373d';
}
if (theme == 'office') {
    selectorTop = 32;
    borderColor = 'rgba(0,0,0,0.1)';
    borderLightColor = 'rgba(0,0,0,0.05)';
    navigatorHandles = '#e2e5ef';
    navigatorBorder = '#e2e5ef';
    navigatorFill = "rgba(0,0,0,0.05)";
    tooltipSubtitleColor = '#b0b2c4';
    buttonSelectedFill = '#69515d';
    buttonFillHover = '#69515d';
    powerColor = '#69515d';
}
var averages = {};
var poolData = {};
var acceptedSharesData = {};
var mineralPools = {} //矿池算力对象
var devFeeArr={}//开发费对象
var rejectedSharesData = {};
var tempType = 'mini';
var hashrateType = 'mini';
var toFixedValue = 2;
if (currency == "BTC") {
    toFixedValue = 5;
}
var favicon = new Favico({animation: 'none', type: 'rectangle'});
var hotValue = convertTemperature(workersTempHot);
var hotValueStart = convertTemperature(workersTempHot);
var hotValueStop = convertTemperature(workersTempHot + (workersTempVeryHot - workersTempHot) / 2);
var veryHotValue = convertTemperature(workersTempVeryHot);
var veryHotValueStart = convertTemperature(workersTempVeryHot);
var veryHotValueStop = convertTemperature(100);
var softMaxValue = convertTemperature(100);
var softMinValue = convertTemperature(workersTempHot);
var selectedTab = 'temperatures';
var hardwareChartsLoaded = 0;
var hardwareChartsAvailable = 0;

if (displayClockTuneValues == '1') {
    $('#table_gpus').addClass('clocktune_extended');
}
var loadingBiosId = -1;
if ($('.activity_menu').length > 0) {
    var ps = new PerfectScrollbar('.activity_menu .frame', {
        wheelSpeed: 1,
        minScrollbarLength: 20,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.clocktune_menu').length > 0) {
    var ps_clocktune = new PerfectScrollbar('.clocktune_menu .frame', {
        wheelSpeed: 1,
        minScrollbarLength: 20,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.text_frame').length > 0) {
    var ps_console = new PerfectScrollbar('.console_text .text_frame', {
        wheelSpeed: 1,
        minScrollbarLength: 20,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.switch_miner_menu').length > 0) {
    var ps_switch_miner = new PerfectScrollbar('.switch_miner_menu .frame', {
        wheelSpeed: 1,
        minScrollbarLength: 20,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.clocktune_popup .frame').length > 0) {
    var ps_clocktune_height = new PerfectScrollbar('.clocktune_popup .frame', {
        wheelSpeed: 0.6,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('#addNewTask .frame').length > 0) {
    var ps_tasks_menu = new PerfectScrollbar('#addNewTask .frame', {
        wheelSpeed: 0.6,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('#tasksList .frame').length > 0 && !$('#tasksList .frame').hasClass('frame_opened')) {
    var ps_tasks_list = new PerfectScrollbar('#tasksList .frame', {
        wheelSpeed: 0.6,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
var countingGPUs = 0;
Highcharts.setOptions({
    lang: {
        shortMonths: [_mx('Jan'), _mx('Feb'), _mx('Mar'), _mx('Apr'), _mx('May'), _mx('Jun'), _mx('Jul'), _mx('Aug'), _mx('Sep'), _mx('Oct'), _mx('Nov'), _mx('Dec')],
        shortWeekdays: [_mx('Mon'), _mx('Tue'), _mx('Wed'), _mx('Thu'), _mx('Fri'), _mx('Sat'), _mx('Sun')],
        rangeSelectorZoom: _('Zoom')
    }
});
var workersList = '';
var globalStatus = 'offline';
var globalChartStatus = 1;
var globalNotifications = '';
var globalHardwareData = {};
var powerData = [];
var activityCounter = 0;

var realDataLoaded = 0;
var activityLoaded = 0;
var hashChartsLoaded = 0;
var tempChartsLoaded = 0;
var isWorkerValid = true;

function dataRefresh(cache) {
    clearTimeout(tout);
    if (wasHidden == 0) {
        loadRealTimeData(cache);
    }
    if (activityCounter % 3 == 0) {
        loadActivityLog();
    }
    if (activityCounter == 0) {
        loadCharts(cache);
    }
    activityCounter++;
    if (activityCounter >= 30) {
        activityCounter = 0;
    }
    if (globalStatus == 'offline' && wasHidden == 0) {
        tout = setTimeout(function () {
            dataRefresh(false);
        }, 2.5 * 1000);
    } else if (globalStatus == 'idle' && wasHidden == 0) {
        tout = setTimeout(function () {
            dataRefresh(false);
        }, 2.5 * 1000);
    } else {
        tout = setTimeout(function () {
            dataRefresh(false);
        }, 10 * 1000);
    }
}

function loadRealTimeData(cache) {
    var apiUrl = '/uapi.php?token=' + workerToken + '&worker=' + workerNameCode;
    $.getJSON(apiUrl, function (workersList) {
        myHardware=workersList[workerNameCode]['hardware']
        if(workersList[workerNameCode].oc!=undefined){
            myOcHardware=workersList[workerNameCode].oc
        }else {
            myOcHardware=undefined
        }
        currencyValue=workersList[workerNameCode].var2.currencyValue
        if (typeof workersList[workerNameCode.toUpperCase()] != 'undefined') {
            if (workersList[workerNameCode.toUpperCase()]['info'].status != 'offline' || workersList[workerNameCode.toUpperCase()]['info']['os'].status != 'offline' || (workersList[workerNameCode.toUpperCase()]['info'].status == 'offline' && workersList[workerNameCode.toUpperCase()]['info'].status_reason != "" && workersList[workerNameCode.toUpperCase()]['info'].status_reason != "SWITCHING" && workersList[workerNameCode.toUpperCase()]['info'].status_reason != "INITIALIZING" && workersList[workerNameCode.toUpperCase()]['info'].status_reason != "BOOTING")) {
                globalStatus = 'online';
                if (workersList[workerNameCode.toUpperCase()]['info'].status == 'offline' && workersList[workerNameCode.toUpperCase()]['info']['os'].status == 'online') {
                    globalStatus = 'idle';
                }
                $('.profitSwitchError').show();
                $('.walletError').show();
                $(".invalidTagsError").show();
            } else {
                globalStatus = 'offline';
                emptyState();
            }
            loadData(workersList[workerNameCode.toUpperCase()], cache);
        } else {
            globalStatus = 'offline';
            emptyState();
        }
        realDataLoaded = 1;
        hideLoader();
    });
}

function loadCharts(cache) {
    var typeLoad = '';
    if (tempType == 'mini' && hashrateType == 'mini') {
        typeLoad = 'mini';
    }
    // var hashtempApiUrl = '/static-ssl.minerstat.farm/temp_api.php?token=' + workerToken + '&worker=' + workerName + '&timezone=' + workerTimezone + '&type=' + typeLoad;
    var hashtempApiUrl = '/temp_api.php?token=' + workerToken + '&worker=' + workerNameCode + '&timezone=' + workerTimezone + '&type=' + typeLoad;
    $.getJSON(hashtempApiUrl, function (hashTempDataApi) {
        var apiData = hashTempDataApi;
        if (apiData != '' && apiData != null && (apiData.resultsTemp.length > 0 || Object.keys(apiData.resultsHash).length > 0 || globalStatus != 'offline')) {
            if (typeof apiData.resultsTemp != 'undefined' && apiData.resultsTemp.length > 0) {
                hardwareChartsAvailable = 1;
                $('#chartEmpty').hide();
                changeTab(selectedTab);
                loadTempChart(JSON.stringify(apiData));
                $('.loader_frame_temp').hide();
            } else {
                hardwareChartsAvailable = 0;
                $('.chartArea').hide();
                $('#chartEmpty').show();
                $('.loader_frame_temp').hide();
            }
            if (typeof apiData.resultsHash != 'undefined' && Object.keys(apiData.resultsHash).length > 0) {
                $('#hashrate').parent().removeClass('disabled');
                $('.box_graph > .divider').show();
                $('.hashrate_filters').show();
                $('#no_hashrate').hide();
                $('#hashrate').show();
                loadHashChart(JSON.stringify(apiData));
                $('.loader_frame_graph').hide();
            } else {
                $('#hashrate').parent().addClass('disabled');
                $('.box_graph > .divider').hide();
                $('.hashrate_filters').hide();
                $('#no_hashrate').show();
                $('#hashrate').hide();
                $('.loader_frame_graph').hide();
            }
        } else {
            $('.box_graph').addClass('disabled');
            $('#chartEmpty,#no_hashrate').show();
            $('#hashrate,.chartArea').hide();
            $('.box_graph > .divider').hide();
            $('.hashrate_filters').hide();
            $('.loader_frame_graph').hide();
            $('.loader_frame_temp').hide();
            $('.tour_tooltip_popup').hide();
            globalChartStatus = 0;
            emptyState();
        }
        setMyDelay(apiData)
    });
}

//延迟数据实体化
function setMyDelay(data) {
    //延时数据回载
    myDelayDataList=data.resultsLatency
    let myIndex=0
    let myMaxDate=0;
    // for (let x=0;x<mygraphHashrateTour.series.length;x++){
    //     mygraphHashrateTour.series[x].remove()
    // }
    // if(mygraphHashrateTour.series[0]!==undefined){
    //     mygraphHashrateTour.series=[]
    // }
    $.each(data.resultsLatency,function (i,it) {
        myIndex++
        let myDelay=[]
        $.each(it, function (timestamp, data) {
            myDelay.push([parseInt(data[0])* 100000,data[1],data[2],data[3]]);
            if (timestamp > myMaxDate) {
                myMaxDate = timestamp;
            }
        });
        myDelay.sort(function (a, b) {
            return a[0] > b[0]
        });
        for (let x=0;x<mygraphHashrateTour.series.length;x++){
            if( mygraphHashrateTour.series[x].name==i){
                mygraphHashrateTour.series[x].remove()
            }
        }
        // console.log('myDelay',myDelay)
        mygraphHashrateTour.addSeries({
            name: i,
            data: myDelay,
            color: data.colors[i]+'f7',
            showInNavigator: true,
            navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)', connectNulls: false},
            dataLabels: {enabled: false},
            connectNulls: false,
            animation: false,
            dataGrouping: {
                enabled: false,
                units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                groupPixelWidth: 15,
                approximation: 'high'
            },
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillOpacity: 1,
            fillColor: {
                linearGradient: [0, 150, 0, 0],
                stops: [[0, Highcharts.Color( data.colors[i]).setOpacity(0).get('rgba')], [1, Highcharts.Color(data.colors[i]).setOpacity(0.5).get('rgba')]]
            }
        },false)
        mygraphHashrateTour.redraw();
        mygraphHashrateTour.reflow();
    })

}
var notificationsDisplays = {};
var lastLogTime = 0;

function loadActivityLog() {
    // var latestActivityAPI = '/static-ssl.minerstat.farm/activity_api.php?token=' + workerToken + '&worker=' + workerName + '&timezone=' + workerTimezone;
    var latestActivityAPI = '/activity_api.php?token=' + workerToken + '&worker=' + workerNameCode + '&timezone=' + workerTimezone;
    $.getJSON(latestActivityAPI, function (activityData) {
        globalNotifications = JSON.stringify(activityData);
        var lastSeen = localStorage.getItem(workerName + "_alert");
        if (!(typeof lastSeen != 'undefined' && lastSeen > 0)) {
            lastSeen = 0;
        }
        var signalShow = 0;
        lastSeen = parseInt(lastSeen) + parseInt(workerOffset * 60 * 60);
        var notifications = activityData;
        if (notifications != null && notifications.length > 0) {
            notifications.sort(function (a, b) {
                return b[0] - a[0];
            })
            var monthNames = [_mx("Jan"), _mx("Feb"), _mx("Mar"), _mx("Apr"), _mx("May"), _mx("Jun"), _mx("Jul"), _mx("Aug"), _mx("Sep"), _mx("Oct"), _mx("Nov"), _mx("Dec")];
            var notificationString = '';
            var highestLogTime = 0;
            for (var i = 0; i < notifications.length; i++) {
                if (notifications[i] != null) {
                    if (notifications[i][0] > highestLogTime) {
                        highestLogTime = notifications[i][0]
                    }
                }
            }
            if (lastLogTime < highestLogTime) {
                lastLogTime = highestLogTime;
                var titleDisplayed = 0;
                var now = Math.round((new Date()).getTime() / 1000);
                var previousDay = 0;
                for (var i = 0; i < notifications.length; i++) {
                    var isSuitableForAlert = 0
                    if (notifications[i] != null) {
                        var d = new Date((notifications[i][0]) * 1000);
                        var dNow = new Date((now - parseInt(workerOffset * 60 * 60)) * 1000);
                        var day = d.getUTCDate();
                        var suffix = _('th');
                        if (day % 10 == 1 && day != 11) suffix = _('st');
                        if (day % 10 == 2 && day != 12) suffix = _('nd');
                        if (day % 10 == 3 && day != 13) suffix = _('rd');
                        var month = d.getUTCMonth();
                        var year = d.getUTCFullYear();
                        var hours = d.getUTCHours();
                        var minutes = "0" + d.getUTCMinutes();
                        var seconds = "0" + d.getUTCSeconds();
                        if (day != previousDay) {
                            if (d.getUTCDate() == dNow.getUTCDate() && d.getUTCMonth() == dNow.getUTCMonth()) {
                                notificationString += '<div class="day_title day_title_with_line"><span class="name">' + _('Today') + '</span></div>';
                            } else if (d.getUTCDate() == dNow.getUTCDate() - 1 && d.getUTCMonth() == dNow.getUTCMonth()) {
                                notificationString += '<div class="day_title day_title_with_line"><span class="name">' + _('Yesterday') + '</span></div>';
                            } else {
                                notificationString += '<div class="day_title day_title_with_line"><span class="name">' + day + suffix + ' ' + monthNames[month] + ' ' + year + '</span></div>';
                            }
                            previousDay = day;
                        }
                        var formattedTime = day + suffix + ' ' + monthNames[month] + ' ' + year + ' ' + hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
                        var notificationsData = notifications[i][1];
                        var status_message = '';
                        var iconType = '';
                        if (notificationsData[0] == 'triggerTemp') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = '<b>' + _('Temperature trigger - Change fans') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and fans were set to') + ' ' + action + '%.</p>';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Shut down') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Reboot') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Power cycle') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Restart') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Start mining') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Stop mining') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Webhook') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Temperature trigger - Execute') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = '<b>' + _('Temperature trigger - ClockTune') + '</b><p>' + _("Temperature reached") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerMem') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = '<b>' + _('Memory temperature trigger - Change fans') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and fans were set to') + ' ' + action + '%.</p>';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Shut down') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Reboot') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Power cycle') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Restart') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Start mining') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Stop mining') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Webhook') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - Execute') + '</b><p>' + _('Memory temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = '<b>' + _('Memory temperature trigger - ClockTune') + '</b><p>' + _("Memory temperature reached") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerGpuCount') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Shut down') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Reboot') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Power cycle') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Stop mining') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Webhook') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('GPU count trigger - Execute') + '</b><p>' + _('The number of detected GPUs was') + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerUnresponsive') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Email') != -1) {
                                status_message = '<b>' + _('Unresponsive trigger') + '</b><p>' + _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('so we have sent you an e-mail') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Unresponsive trigger - Webhook') + '</b><p>' + _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Unresponsive trigger - Execute') + '</b><p>' + _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerTime') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (notificationsData[1][0].indexOf(':') == -1) {
                                notificationsData[1][0] = notificationsData[1][0] + ':00';
                            }
                            if (action.indexOf('Fans') != -1) {
                                action = action.replace('Fans ', '');
                                status_message = '<b>' + _('Time trigger - Change fans') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and fans were set to') + ' ' + action + '%.</p>';
                            } else if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Time trigger - Shut down') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Time trigger - Reboot') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Time trigger - Restart') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('ClockTune') != -1) {
                                status_message = '<b>' + _('Time trigger - ClockTune') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Time trigger - Start mining') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Time trigger - Stop mining') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Time trigger - Webhook') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Time trigger - Execute') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Time trigger - Template') + '</b><p>' + _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerIdle') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Idle trigger - Shut down') + '</b><p>' + _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Idle trigger - Reboot') + '</b><p>' + _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Idle trigger - Restart') + '</b><p>' + _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Idle trigger - Webhook') + '</b><p>' + _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Idle trigger - Execute') + '</b><p>' + _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerInactive') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Shut down') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Reboot') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Power cycle') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Restart') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Webhook') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Inactive trigger - Execute') + '</b><p>' + _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerHashrate') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Shut down') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Reboot') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and the machine was rebooted') + '.<p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Restart') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Power cycle') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Start mining') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Stop mining') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Webhook') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Hashrate trigger - Execute') + '</b><p>' + _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerEfficiency') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Shut down') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Reboot') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Restart') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Start mining') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Stop mining') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Webhook') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Execute') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Efficiency trigger - Template') + '</b><p>' + _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerConsumption') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Shut down') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Reboot') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Power cycle') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Restart') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Start mining') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Stop mining') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Webhook') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Execute') + '</b><p>' + _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerConsumptionIncrease') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Shut down') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Reboot') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Power cycle') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Restart') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Start mining') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Stop mining') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Webhook') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Consumption trigger - Execute') + '</b><p>' + _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerRejected') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Shut down') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Reboot') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Power cycle') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Restart') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Start mining') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Stop mining') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Webhook') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Execute') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Rejected shares trigger - Template') + '</b><p>' + _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerShareCount') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Shut down') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Reboot') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Power cycle') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Restart') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Start mining') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Stop mining') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Webhook') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Execute') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Shares count trigger - Template') + '</b><p>' + _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerPoolError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Pool error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerConfigError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Config error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Config error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Config error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Config error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Config error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Config error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Config error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Config error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Config error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerAuthError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Auth error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerDriverError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Driver error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerGpuError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('GPU error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerClientError') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Shutdown') != -1) {
                                status_message = '<b>' + _('Client error trigger - Shut down') + '</b><p>' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was shut down') + '.</p>';
                            } else if (action.indexOf('Reboot') != -1) {
                                status_message = '<b>' + _('Client error trigger - Reboot') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was rebooted') + '.</p>';
                            } else if (action.indexOf('Power cycle') != -1) {
                                status_message = '<b>' + _('Client error trigger - Power cycle') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + ' ' + _('and machine got power cycle') + '.</p>';
                            } else if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Client error trigger - Restart') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining client was restarted') + '.</p>';
                            } else if (action.indexOf('Start') != -1) {
                                status_message = '<b>' + _('Client error trigger - Start mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining started') + '.</p>';
                            } else if (action.indexOf('Stop') != -1) {
                                status_message = '<b>' + _('Client error trigger - Stop mining') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining stopped') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Client error trigger - Webhook') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Client error trigger - Execute') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and script was executed') + '.</p>';
                            } else if (action.indexOf('Template') != -1) {
                                status_message = '<b>' + _('Client error trigger - Template') + '</b><p>' + ' ' + notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and config template was loaded') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'triggerEarnings') {
                            isSuitableForAlert = 1;
                            iconType = 'triggers';
                            var action = notificationsData[1][1];
                            if (action.indexOf('Restart') != -1) {
                                status_message = '<b>' + _('Earnings trigger - Restart') + '</b><p>' + _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('so we have restarted profit switch') + '.</p>';
                            } else if (action.indexOf('Webhook') != -1) {
                                status_message = '<b>' + _('Earnings trigger - Webhook') + '</b><p>' + _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.</p>';
                            } else if (action.indexOf('Execute') != -1) {
                                status_message = '<b>' + _('Earnings trigger - Execute') + '</b><p>' + _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.</p>';
                            }
                        } else if (notificationsData[0] == 'scheduler') {
                            isSuitableForAlert = 1;
                            iconType = 'scheduler';
                            if (notificationsData[1] == 'Start') {
                                status_message = '<b>' + _('Scheduler has started') + '</b>';
                            } else if (notificationsData[1] == 'End') {
                                status_message = '<b>' + _('Scheduler has ended') + '</b>';
                            }
                        } else if (notificationsData[0] == 'alertTemp') {
                            isSuitableForAlert = 1;
                            iconType = 'temp';
                            status_message = '<b>' + _('High temperature') + '</b><p>' + _('Temperature reached') + ' ' + convertTemperature(notificationsData[1][0]) + temperature + '.</p>';
                        } else if (notificationsData[0] == 'alertEfficiency') {
                            isSuitableForAlert = 1;
                            iconType = 'efficiency';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Efficiency drop alert sent to') + ' ' + notificationsData[1][1] + ' (' + notificationsData[1][0] + '%)</b>';
                            } else {
                                status_message = '<b>' + _('Efficiency drop alert sent to') + ' Admin (' + notificationsData[1][0] + '%)</b>';
                            }
                        } else if (notificationsData[0] == 'alertOffline') {
                            isSuitableForAlert = 1;
                            iconType = 'status_off';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Offline alert sent to') + ' ' + notificationsData[1][1] + '</b>';
                            } else {
                                status_message = '<b>' + _('Offline alert sent to') + ' Admin</b>';
                            }
                        } else if (notificationsData[0] == 'alertInactive') {
                            isSuitableForAlert = 1;
                            iconType = 'status_off';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Inactive alert sent to') + ' ' + notificationsData[1][1] + '</b>';
                            } else {
                                status_message = '<b>' + _('Inactive alert sent to') + ' Admin</b>';
                            }
                        } else if (notificationsData[0] == 'alertOnline') {
                            isSuitableForAlert = 1;
                            iconType = 'status_on';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Online alert sent to') + ' ' + notificationsData[1][1] + '</b>';
                            } else {
                                status_message = '<b>' + _('Online alert sent to') + ' Admin</b>';
                            }
                        } else if (notificationsData[0] == 'alertAsic') {
                            isSuitableForAlert = 1;
                            iconType = 'alerts';
                            status_message = '<b>' + _('ASIC alert') + '</b><p>There was error: ' + notificationsData[1][0] + '.</p>';
                        } else if (notificationsData[0] == 'alertHashrate') {
                            isSuitableForAlert = 1;
                            iconType = 'hashrate';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Hashrate drop alert sent to') + ' ' + notificationsData[1][1] + ' (' + notificationsData[1][0] + '%)</b>';
                            } else {
                                status_message = '<b>' + _('Hashrate drop alert sent to') + ' Admin (' + notificationsData[1][0] + '%)</b>';
                            }
                        } else if (notificationsData[0] == 'alertConsumptionUp') {
                            isSuitableForAlert = 1;
                            iconType = 'consumption';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Consumption increase alert sent to') + ' ' + notificationsData[1][1] + ' (' + notificationsData[1][0] + '%)</b>';
                            } else {
                                status_message = '<b>' + _('Consumption increase alert sent to') + ' Admin (' + notificationsData[1][0] + '%)</b>';
                            }
                        } else if (notificationsData[0] == 'alertConsumptionDown') {
                            isSuitableForAlert = 1;
                            iconType = 'consumption';
                            if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                status_message = '<b>' + _('Consumption drop alert sent to') + ' ' + notificationsData[1][1] + ' (' + notificationsData[1][0] + '%)</b>';
                            } else {
                                status_message = '<b>' + _('Consumption drop alert sent to') + ' Admin (' + notificationsData[1][0] + '%)</b>';
                            }
                        } else if (notificationsData[0] == 'switch') {
                            iconType = 'profit_switch';
                            var reward1 = '';
                            var reward2 = '';
                            if (typeof notificationsData[1][2] != 'undefined' && notificationsData[1][2] != -999999) {
                                reward1 = ' (' + (notificationsData[1][2] * currencyValue).toFixed(2) + ' ' + currency + ')';
                            }
                            if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != -999999) {
                                reward2 = ' (' + (notificationsData[1][3] * currencyValue).toFixed(2) + ' ' + currency + ')';
                            }
                            status_message = '<b>' + _('Profit switch') + '</b><p>' + notificationsData[1][0] + reward1 + ' → ' + notificationsData[1][1] + reward2;
                        } else if (notificationsData[0] == 'clientChangeGpu') {
                            iconType = 'client_switch';
                            status_message = '<b>' + _('Mining client changed (GPU)') + '</b><p>Now mining with ' + notificationsData[1][0] + '.</p>';
                        } else if (notificationsData[0] == 'clientChangeCpu') {
                            iconType = 'client_switch';
                            if (notificationsData[1][0] == '') {
                                status_message = '<b>' + _('CPU mining disabled') + '</b>';
                            } else {
                                status_message = '<b>' + _('CPU mining enabled') + '</b><p>Now mining with ' + notificationsData[1][0] + '.</p>';
                            }
                        } else if (notificationsData[0] == 'changeProfitSwitch') {
                            iconType = 'profit_switch';
                            if (notificationsData[1][0] == 'enabled') {
                                status_message = '<b>' + _('Profit switch enabled') + '</b>';
                            } else if (notificationsData[1][0] == 'disabled') {
                                status_message = '<b>' + _('Profit switch disabled') + '</b>';
                            } else if (notificationsData[1][0] == 'updated') {
                                status_message = '<b>' + _('Profit switch updated') + '</b>';
                            }
                        } else if (notificationsData[0] == 'manual') {
                            if (notificationsData[1][0] == 'shutdown') {
                                iconType = 'shutdown';
                                status_message = '<b>' + _('Manual shut down') + '</b>';
                            } else if (notificationsData[1][0] == 'powercycle') {
                                iconType = 'power_cycle';
                                status_message = '<b>' + _('Power cycle') + '</b>';
                            } else if (notificationsData[1][0] == 'restart') {
                                iconType = 'restart';
                                status_message = '<b>' + _('Manual restart') + '</b>';
                            } else if (notificationsData[1][0] == 'reboot') {
                                iconType = 'reboot';
                                status_message = '<b>' + _('Manual reboot') + '</b>';
                            } else if (notificationsData[1][0] == 'stop') {
                                iconType = 'stop';
                                status_message = '<b>' + _('Mining stopped') + '</b>';
                            } else if (notificationsData[1][0] == 'start') {
                                iconType = 'start';
                                status_message = '<b>' + _('Mining started') + '</b>';
                            }
                            else if (notificationsData[1][0] == 'reMiner') {
                                iconType = 'restart';
                                status_message = '<b>' + _('Mining reMiner') + '</b>';
                            }else if (notificationsData[1][0] == 'enable') {
                                iconType = 'start';
                                status_message = '<b>' + _('Mining enable') + '</b>';
                            }
                        } else if (notificationsData[0] == 'configChange') {
                            iconType = 'config';
                            status_message = '<b>' + _('Config updated') + '</b>';
                            if (notificationsData[1][1] == '') {
                                notificationsData[1][1] = 'Owner';
                            }
                            if (notificationsData[1][0].indexOf('wallet') != -1) {
                                status_message = '<b>' + _('Updated wallet address') + '</b>' + '<p class="subtext">' + _('Changed by') + ' ' + notificationsData[1][1] + '</p>';
                            } else if (notificationsData[1][0].indexOf('pool') != -1) {
                                status_message = '<b>' + _('Updated pool address') + '</b>' + '<p class="subtext">' + _('Changed by') + ' ' + notificationsData[1][1] + '</p>';
                            } else {
                                if (typeof notificationsData[1][1] != 'undefined') {
                                    status_message = '<b>' + _('Config updated') + '</b>' + '<p class="subtext">' + _('Changed by') + ' ' + notificationsData[1][1] + '</p>';
                                }
                            }
                        } else if (notificationsData[0] == 'clocktune') {
                            iconType = 'clocktune';
                            status_message = '<b>' + _('ClockTune updated') + '</b>';
                        } else if (notificationsData[0] == 'consoleAlert') {
                            isSuitableForAlert = 1;
                            iconType = 'console';
                            if (notificationsData[1][0].indexOf('Driver error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                var gpuListAddOn = '';
                                if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                    var gpuList = String(notificationsData[1][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                }
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Driver error') + ' (' + errorsCount + 'x)</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-driver-error" title="' + _('Driver error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Driver error') + ' (' + errorsCount + 'x)</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('Pool error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Pool error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-pool-error" title="' + _('Pool error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Pool error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('Error report') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Error report') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-pool-error" title="' + _('Pool error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Pool error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('System message') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('System message') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    status_message = '<b>' + _('System message') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>';
                                }
                            } else if (notificationsData[1][0].indexOf('Config error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Config error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-config-error" title="' + _('Config error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Config error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('GPU error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                var gpuListAddOn = '';
                                if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                    var gpuList = String(notificationsData[1][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                }
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('GPU error') + ' (' + errorsCount + 'x)</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-gpu-error" title="' + _('GPU error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('GPU error') + ' (' + errorsCount + 'x)</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('Mining client error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                var gpuListAddOn = '';
                                if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                    var gpuList = String(notificationsData[1][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                }
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Mining client error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-mining-client-error" title="' + _('Mining client error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Mining client error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + gpuListAddOn + errorButton;
                                }
                            } else if (notificationsData[1][0].indexOf('Authorization error') != -1) {
                                var errorsCount = notificationsData[1][0].split(" (");
                                errorsCount = errorsCount[1];
                                errorsCount = errorsCount.replace(')', '');
                                if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                    var cssHidden = 'hidden';
                                    var buttonText = _('Show log');
                                    if (notificationsDisplays[notifications[i][0]] == 1) {
                                        cssHidden = '';
                                        buttonText = _('Hide log');
                                    }
                                    status_message = '<b>' + _('Authorization error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                } else {
                                    var errorButton = '<a target="_blank" href="/minerstat.com/help/console-authorization-error" title="' + _('Authorization error') + '" class="button_error">' + _('Learn more') + '</a>';
                                    status_message = '<b>' + _('Authorization error') + ' (' + getRepeatedTimes(errorsCount) + ')' + '</b><p class="subtext">' + notificationsData[1][2] + '</p>' + errorButton;
                                }
                            }
                        } else if (notificationsData[0] == 'biosFlash') {
                            isSuitableForAlert = 1;
                            iconType = 'bios_flashing';
                            if (notificationsData[1][0].indexOf('BIOS flasher') != -1) {
                                var gpuListAddOn = '';
                                if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                    var gpuList = String(notificationsData[1][1]).split(",");
                                    jQuery.each(gpuList, function (i, gpuId) {
                                        gpuListAddOn += '<div class="tag">' + _('GPU') + ' #' + gpuId + '</div>';
                                    });
                                    if (gpuListAddOn.length > 2) {
                                        gpuListAddOn = '<div class="tags">' + gpuListAddOn + '</div>';
                                    }
                                }
                                if (typeof notificationsData[1][2] != 'undefined' && notificationsData[1][2] != '') {
                                    if (typeof notificationsData[1][3] != 'undefined' && notificationsData[1][3] != '') {
                                        var cssHidden = 'hidden';
                                        var buttonText = _('Show log');
                                        if (notificationsDisplays[notifications[i][0]] == 1) {
                                            cssHidden = '';
                                            buttonText = _('Hide log');
                                        }
                                        status_message = '<b>' + _('BIOS flasher') + '</b><p>' + notificationsData[1][2] + '</p>' + gpuListAddOn + '<a onclick="toggleDisplay(this,' + notifications[i][0] + ');" class="button_error">' + buttonText + '</a>' + '<div id="invisible_' + notifications[i][0] + '" class="invisible ' + cssHidden + '">' + notificationsData[1][3] + '</div>';
                                    } else {
                                        status_message = '<b>' + _('BIOS flasher') + '</b><p>' + notificationsData[1][2] + '</p>' + gpuListAddOn;
                                    }
                                }
                            }
                        } else if (notificationsData[0] == 'pauseAlerts') {
                            isSuitableForAlert = 0;
                            if (typeof notificationsData[1][0] != 'undefined' && notificationsData[1][0] != '') {
                                if (notificationsData[1][0] == "0") {
                                    iconType = 'alerts_on';
                                    status_message = '<b>' + _('Resume alerts') + '</b><p>' + _('You will continue to receive alerts') + '.</p>';
                                } else if (notificationsData[1][0] == "1") {
                                    iconType = 'alerts_off';
                                    status_message = '<b>' + _('Pause alerts') + '</b><p>' + _('Alerts were paused permanently or until you turn them back on') + '.</p>';
                                } else {
                                    iconType = 'alerts_off';
                                    var seconds = notificationsData[1][0];
                                    var timeStr = '';
                                    switch (seconds) {
                                        case '30':
                                            timeStr = _('30 minutes');
                                            break;
                                        case '60':
                                            timeStr = _('1 hour');
                                            break;
                                        case '360':
                                            timeStr = _('6 hours');
                                            break;
                                        case '720':
                                            timeStr = _('12 hours');
                                            break;
                                        case '1440':
                                            timeStr = _('24 hours');
                                            break;
                                        default:
                                            timeStr = _('24 hours');
                                            break;
                                    }
                                    status_message = '<b>' + _('Pause alerts') + '</b><p>' + _('Alerts were paused for ') + ' ' + timeStr + '.</p>';
                                }
                            }
                        } else if (notificationsData[0] == 'pauseTriggers') {
                            isSuitableForAlert = 0;
                            if (typeof notificationsData[1][0] != 'undefined' && notificationsData[1][0] != '') {
                                if (notificationsData[1][0] == "0") {
                                    iconType = 'triggers_on';
                                    status_message = '<b>' + _('Resume triggers') + '</b><p>' + _('Worker will continue to receive triggers') + '.</p>';
                                } else if (notificationsData[1][0] == "1") {
                                    iconType = 'triggers_off';
                                    status_message = '<b>' + _('Pause triggers') + '</b><p>' + _('Triggers were paused permanently or until you turn them back on') + '.</p>';
                                } else {
                                    iconType = 'triggers_off';
                                    var seconds = notificationsData[1][0];
                                    var timeStr = '';
                                    switch (seconds) {
                                        case '30':
                                            timeStr = _('30 minutes');
                                            break;
                                        case '60':
                                            timeStr = _('1 hour');
                                            break;
                                        case '360':
                                            timeStr = _('6 hours');
                                            break;
                                        case '720':
                                            timeStr = _('12 hours');
                                            break;
                                        case '1440':
                                            timeStr = _('24 hours');
                                            break;
                                        default:
                                            timeStr = _('24 hours');
                                            break;
                                    }
                                    status_message = '<b>' + _('Pause triggers') + '</b><p>' + _('Triggers were paused for') + ' ' + timeStr + '.</p>';
                                }
                            }
                        }
                        var unreadClass = '';
                        if (notifications[i][0] > lastSeen && isSuitableForAlert == 1) {
                            unreadClass = ' unread';
                            signalShow = 1;
                        }
                        if (status_message != '') {
                            notificationString += '<div class="row' + unreadClass + '"><div class="icon_box"><div class="icon ' + iconType + '"></div></div><div class="text"><time>' + formattedTime + '</time><p>' + status_message + '</p></div></div>';
                        }
                    }
                }
                $('#activityList').html(notificationString);
                $('#activityList').parent().show();
                $('#activityListEmpty').hide();
                if (typeof ps != 'undefined') {
                    ps.update();
                }
                if (signalShow == 1) {
                    $('#notificationsButton .signal_new').show();
                    favicon.badge($('.activity_menu .unread').length);
                }
            }
        } else {
            $('#activityList').parent().hide();
            $('#activityListEmpty').show();
        }
        activityLoaded = 1;
        hideLoader();
    });
}

function getRepeatedTimes(aNum) {
    if (aNum == '1') {
        return aNum + ' ' + _('time');
    } else {
        return aNum + ' ' + _('times');
    }
}

function hideLoader() {
    if (realDataLoaded == 1 && activityLoaded == 1) {
        if (userPermission == 'technical' || userPrimaryPermission == 'technical') {
            $('.financialData').hide();
        }
        preloaderHide();
    }
}

function toggleDisplay(thisEl, timestamp) {
    if ($('#invisible_' + timestamp).hasClass('hidden')) {
        $(thisEl).html(_('Hide log'));
        $('#invisible_' + timestamp).removeClass('hidden');
        notificationsDisplays[timestamp] = 1;
    } else {
        $(thisEl).html(_('Show log'));
        $('#invisible_' + timestamp).addClass('hidden');
        notificationsDisplays[timestamp] = 0;
    }
}

function emptyState() {
    if (globalStatus == 'offline' && globalChartStatus == 0) {
        if ($(".change_worker_menu .frame a").length <= 1) {
            $('#changeWorker').removeClass('disabled').addClass('disabled');
            $('#changeWorker').attr('data-tooltip-disabled', $('#changeWorker').attr('data-tooltip')).removeAttr('data-tooltip');
        }
        $('#worker_status').removeClass('online offline idle error benchmarking flashing switching initializing booting').addClass('offline').html(_('Offline'));
        // $('#main_content').hide();
        $('#switchMiner,#restartSoftware,#rebootMachine,#shutdownMachine,#startMining,#stopMining').removeClass('disabled').addClass('disabled');
        $('#switchMiner').attr('data-tooltip-disabled', $('#switchMiner').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#restartSoftware').attr('data-tooltip-disabled', $('#restartSoftware').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#rebootMachine').attr('data-tooltip-disabled', $('#rebootMachine').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#shutdownMachine').attr('data-tooltip-disabled', $('#shutdownMachine').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#empty_content').css('display', 'flex');
        if (typeof $('textarea.copy_element') != 'undefined' && typeof $('textarea.copy_element')[0] != 'undefined') {
            $('textarea.copy_element').css('height', 'auto').css('height', $('textarea.copy_element')[0].scrollHeight);
        }
        preloaderHide();
    }
}

function isValidJSONString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return true;
}

function copyValue(type, ip, thisEl) {
    var inputc = thisEl.appendChild(document.createElement("input"));
    inputc.value = ip;
    inputc.focus();
    inputc.select();
    document.execCommand('copy');
    inputc.parentNode.removeChild(inputc);
    $(thisEl).attr('data-tooltip', _('Copied!'));
}

$(document.body).on('mouseover', '#local_ip', function (event) {
    var ipReal = $('#copylocalIPstr').attr('data-ip-real');
    if (typeof ipReal != 'undefined') {
        if (ipReal.length > 15) {
            ipReal = ipReal.substr(0, 12) + '...';
        }
        $('#copylocalIPstr').html(ipReal);
    }
});
$(document.body).on('mouseout', '#local_ip', function (event) {
    var ipMask = $('#copylocalIPstr').attr('data-ip-mask');
    if (typeof ipMask != 'undefined') {
        $('#copylocalIPstr').html(ipMask);
        $('#copyLocalIP').attr('data-tooltip', _mx3('Copy'));
        $('#copyRemoteIP').attr('data-tooltip', _mx3('Copy'));
    }
});
$(document.body).on('mouseover', '#remote_ip', function (event) {
    var ipReal = $('#copyremoteIPstr').attr('data-ip-real');
    if (typeof ipReal != 'undefined') {
        if (ipReal.length > 15) {
            ipReal = ipReal.substr(0, 12) + '...';
        }
        $('#copyremoteIPstr').html(ipReal);
    }
});
$(document.body).on('mouseout', '#remote_ip', function (event) {
    var ipMask = $('#copyremoteIPstr').attr('data-ip-mask');
    if (typeof ipMask != 'undefined') {
        $('#copyremoteIPstr').html(ipMask);
        $('#copyLocalIP').attr('data-tooltip', _mx3('Copy'));
        $('#copyRemoteIP').attr('data-tooltip', _mx3('Copy'));
    }
});
var currLocalIp = '';
var currRemoteIp = '';

function loadData(workerData, cache) {
    $('.other_status').hide();
    $('#algo_mining').show();
    var hws = 0;
    var avgTemp = 0;
    var avgFan = 0;
    var maxFan = 0;
    var maxFanPercentage = 0;
    var maxTemp = 0;
    var apiTemp = '';
    var powerTitleAddon = '';
    if (typeof workerData['info'].uptime != 'undefined' && workerData['info'].uptime != null) {
        var uptimeStrArray = (workerData['info'].uptime).split(' ');
        var uptimeSeconds = 0;
        $.each(uptimeStrArray, function (timeI, timeD) {
            if (timeD.indexOf('d') != -1) {
                uptimeSeconds = uptimeSeconds + parseInt(timeD) * 24 * 60 * 60;
            }
            if (timeD.indexOf('h') != -1) {
                uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60 * 60;
            }
            if (timeD.indexOf('m') != -1) {
                uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60;
            }
            if (timeD.indexOf('s') != -1) {
                uptimeSeconds = uptimeSeconds + parseInt(timeD);
            }
        });
    }
    if (workerData['info']['consumption'] != 0) {
        powerTitleAddon = ' (' + workerData['info']['consumption'] + 'W)';
    }
    if (workerData['info']['note'] == '1') {

        $('.header .notes').removeClass('disabled').attr('data-tooltip', _mx3('Note'));
    } else {
        $('.header .notes').addClass('disabled').attr('data-tooltip', _mx('Without notes'));
    }
    if (workerData['info']['os'].localip != '0.0.0.0') {
        if (workerData['info']['os'].localip == 'hidden') {
            workerData['info']['os'].localip = workerRemoteIp;
        }
        if (currLocalIp != workerData['info']['os'].localip) {
            currLocalIp = workerData['info']['os'].localip;
            var localIpDisplay = '***.***.***.***';
            if (workerData['info']['type'] != "asic") {
                if (workerData['info']['system'] == "windows" || workerData['info']['system'] == "win") {
                    $('#local_ip').html('<span id="copylocalIPstr" data-ip-mask="' + workerData['info']['os'].localip + '" data-ip-real="' + workerData['info']['os'].localip + '">' + workerData['info']['os'].localip + '</span><div data-tooltip="'+_mx3('Copy')+'" id="copyLocalIP" style="margin-left: 4px" onclick="copyValue(\'local\',\'' + workerData['info']['os'].localip + '\',this);" class="icon duplicate"></div>');
                } else {
                    $('#local_ip').html('<a data-tooltip="' + _('Open local terminal') + '" href="/' + workerData['info']['os'].localip + ':4200" target="_blank" id="copylocalIPstr"   data-ip-mask="' + workerData['info']['os'].localip + '" data-ip-real="' + workerData['info']['os'].localip + '">' + workerData['info']['os'].localip + '</a>' + '<div data-tooltip="'+_mx3('Copy')+'" id="copyLocalIP" style="margin-left: 4px" onclick="copyValue(\'local\',\'' + workerData['info']['os'].localip + '\',this);" class="icon duplicate"></div>');
                    $('.local_console').attr('href', '/' + workerData['info']['os'].localip + ':4200');
                }
            } else {
                $('#local_ip').html('<a data-tooltip="' + _('Open Web') + '" href="/' + workerData['info']['os'].localip + '" target="_blank" id="copylocalIPstr" data-ip-mask="' + workerData['info']['os'].localip + '" data-ip-real="' + workerData['info']['os'].localip + '">' + workerData['info']['os'].localip + '</a><div data-tooltip="'+_mx3('Copy')+'" id="copyLocalIP" style="margin-left: 4px" onclick="copyValue(\'local\',\'' + workerData['info']['os'].localip + '\',this);" class="icon duplicate"></div>');
            }
        }
        $('#ips').show();
    }
    $('#algo_mining table').html('<tr><th>' + _mx('Crypto') + '</th><th class="rmv1 clientInfo">' + _mx('Client') + '</th><th class="rmv1">' + _mx('Uptime') + '</th><th class="rmv1">' + _mx3('Speed') + '</th><th class="rmv2">' + _mx('Efficiency') + '</th><th class="rmv2 financialData">' + _mx('Est. monthly') + '</th><th class="rmv1">' + _mx('Pools') + '</th></tr>');

    if (globalStatus != 'offline') {
        $('#table_gpus').removeClass('hardwareOffline');
        if (access == 'guest') {
            $('#table_gpus').html('<tr><th class="id_width">#</th><th>' + _('Hardware') + ' - ' + workerType + '</th><th class="errorsInfo rmv2"></th><th class="speedInfo rmv2">' + _mx3('Speed') + '</th><th class="powerInfo rmv2">' + _mx('Power') + powerTitleAddon + '</th><th class="rmv2">' + _mx2('Temp') + '</th><th class="rmv2">' + _mx('Fans') + '</th><th class="clocktuneInfo rmv2">'+_mx('Core')+'</th><th class="clocktuneInfo rmv2">'+_mx('Mem')+'</th><th class="loadInfo rmv2">' + _mx('Load') + '</th><th class="chipsData rmv2">' + _('ASIC status') + '</th></tr>');
        } else {
            var clocktuneshow = '';
            if (displayClockTuneValues == '1') {
                clocktuneshow = ' shown';
            }
            $('#table_gpus').html('<tr><th class="id_width">#</th><th>' + _('Hardware') + ' - ' + workerType + '</th><th class="errorsInfo rmv2"></th><th class="speedInfo rmv2">' + _mx3('Speed') + '</th><th class="powerInfo rmv2">' + _mx('Power') + powerTitleAddon + '</th><th class="rmv2">' + _mx2('Temp') + '</th><th class="rmv2">' + _mx('Fans') + '</th><th class="clocktuneInfo rmv2">'+_mx('Core')+'</th><th class="clocktuneInfo rmv2">'+_mx('Mem')+'</th><th class="loadInfo rmv2">' + _mx('Load') + '</th><th class="tuningButtons rmv2"><div class="icon clocktune_show' + clocktuneshow + '" onclick="displayClockTuneValuesTable();" data-tooltip="' + _mx('Show set values') + '"></div><div class="icon clocktune" style="display: '+ockxBock+'" data-tooltip="' + _mx('Overclocking') + '"></div></th><th class="chipsData rmv2">' + _('ASIC status') + '</th></tr>');
        }
        $('#algo_mining table').parent().removeClass('disabled');
        $('.profitSwitchError').show();
        $('.walletError').show();
        $(".invalidTagsError").show();
    } else {
        var clocktuneshow = '';
        if (displayClockTuneValues == '1') {
            clocktuneshow = ' shown';
        }
        $('#table_gpus').html('<tr><th class="id_width">#</th><th>' + _('Hardware') + ' - ' + workerType + '</th><th class="errorsInfo rmv2"></th><th class="speedInfo rmv2">' + _mx3('Speed') + '</th><th class="powerInfo rmv2">' + _mx('Power') + powerTitleAddon + '</th><th class="rmv2">' + _mx2('Temp') + '</th><th class="rmv2">' + _mx('Fans') + '</th><th class="clocktuneInfo rmv2">'+_mx('Core')+'</th><th class="clocktuneInfo rmv2">'+_mx('Mem')+'</th><th class="loadInfo rmv2">' + _mx('Load') + '</th><th class="tuningButtons rmv2"><div class="icon clocktune_show' + clocktuneshow + '" onclick="displayClockTuneValuesTable();" data-tooltip="' + _mx('Show set values') + '"></div><div class="icon clocktune" style="display: '+ockxBock+'" data-tooltip="' + _mx('Overclocking') + '"></div></th></tr>');
        // $('#table_gpus').addClass('hardwareOffline');
        $('#table_gpus').removeClass('hardwareOffline');
        $('#algo_mining table').parent().addClass('disabled');
    }
    if (workerData['info'].type == 'amd') {
        tempColors = colorsAmd;
    } else if (workerData['info'].type == 'nvidia') {
        tempColors = colorsNvidia;
    } else {
        tempColors = colorsASIC;
    }
    if (chartColors == '1') {
        tempColors = colorsRainbow;
    }
    // if (workerData['info'].status == 'offline' && workerData['info']['os'].status == 'online' && workerData['info'].status_reason != 'SWITCHING' && workerData['info'].status_reason != 'INITIALIZING' && workerData['info'].status_reason != 'BOOTING') {
    if (workerData['info'].status == 'idle') {
        var status = _('Idle');
        var statusClass = 'idle';
    } else {
        if (workerData['info'].status == 'online') {
            var status = _('Online');
            var statusClass = 'online';
            $('#rouseMachine').hide()
        } else if (workerData['info'].status == 'offline') {
            var status = _('Offline');
            $('#rouseMachine').show()
            var statusClass = 'offline';
        }else if(workerData['info'].status == 'unable'){
            $('#rouseMachine').hide()
            var status = _mx2('unable');
            var statusClass = 'unable';
        }else if(workerData['info'].status == 'disable'){
            $('#rouseMachine').hide()
            var status = _mx2('disable');
            var statusClass = 'disable';
        }else if(workerData['info'].status == 'anyhowmining'){
            var status = _mx2('win10 AnyhowMining');
            var statusClass = 'online';
        }else if(workerData['info'].status == 'anyhow_idle'){
            var status = _mx2('Gameing');
            var statusClass = 'online';
        }
    }

    //isEnable=判断是否禁用
    if(workerData['info']['isEnable']==1){
        $('#startUsing').hide()
        $('#forbidden').show()
    }else {
        $('#startUsing').show()
        $('#forbidden').hide()
    }

    if ((typeof workerData['hardware'] == 'undefined' || typeof workerData['hardware'][0] == 'undefined') && globalStatus != 'offline') {
        var status = _('Undetected hardware');
        var statusClass = 'error';
        globalUndetectedHardware = 1;
    } else {
        globalUndetectedHardware = 0;
    }
    if (typeof workerData['info'].status_reason != 'undefined') {
        if (workerData['info'].status_reason == 'SWITCHING' && !(workerData['info'].status == 'offline' && workerData['info']['os'].status == 'offline')) {
            var status = _('Switching');
            var statusClass = 'switching';
        } else if (workerData['info'].status_reason == 'INITIALIZING' && !(workerData['info'].status == 'offline' && workerData['info']['os'].status == 'offline')) {
            var status = _('Initializing');
            var statusClass = 'switching';
        } else if (workerData['info'].status_reason == 'BOOTING' && !(workerData['info'].status == 'offline' && workerData['info']['os'].status == 'offline')) {
            var status = _('Booting');
            var statusClass = 'switching';
        } else if (workerData['info'].status_reason == 'INVALIDTAG') {
            var status = _('Invalid tag used');
            var statusClass = 'offline';
        } else if (workerData['info'].status_reason == 'BENCHMARKING') {
            var status = _('Benchmarking');
            var statusClass = 'benchmarking';
        } else if (workerData['info'].status_reason == 'FLASHING') {
            var status = _('BIOS flashing');
            var statusClass = 'flashing';
        } else if (workerData['info'].status_reason == 'UNAUTHORIZED') {
            var status = _('Wrong username/password');
            var statusClass = 'error';
        } else if (workerData['info'].status_reason == 'OUTOFMEMORY') {
            var status = _('Out of memory');
            var statusClass = 'error';
        }
    }
    if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'BENCHMARK') {
        var status = _('Benchmarking');
        var statusClass = 'benchmarking';
    }
    let myState=(statusClass=='offline'||statusClass=='unable'||statusClass=='disable')?'offline':statusClass
    $('#worker_status').removeClass('online offline idle error benchmarking flashing switching initializing booting').addClass(myState).html(_mx(status));
    if (statusClass != 'offline') {
        $('#stopMining').hide();
        $('#startMining').hide();
        if (workerData['info']['type'] != "asic") {
            if (statusClass == 'idle') {
                $('#startMining').show();
            } else {
                $('#stopMining').show();
            }
        }
        var sumWatt = 0;
        if (workerData['info']['type'] == 'asic') {
            $('#shutdownMachine,#rebootMachine,#restartSoftware,#switchMiner,#startMining,#stopMining').removeClass('disabled');
            $('#switchMiner').attr('data-tooltip', $('#switchMiner').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#restartSoftware').attr('data-tooltip', $('#restartSoftware').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#rebootMachine').attr('data-tooltip', $('#rebootMachine').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#shutdownMachine').attr('data-tooltip', $('#shutdownMachine').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#stopMining').attr('data-tooltip', $('#stopMining').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#startMining').attr('data-tooltip', $('#startMining').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#restartSoftware').removeClass('disabled').addClass('disabled');
            $('#restartSoftware').attr('data-tooltip-disabled', $('#restartSoftware').attr('data-tooltip')).removeAttr('data-tooltip');
            $('#shutdownMachine').removeClass('disabled').addClass('disabled');
            $('#shutdownMachine').attr('data-tooltip-disabled', $('#shutdownMachine').attr('data-tooltip')).removeAttr('data-tooltip');
            $('#startMining').removeClass('disabled').addClass('disabled');
            $('#startMining').attr('data-tooltip-disabled', $('#startMining').attr('data-tooltip')).removeAttr('data-tooltip');
            $('#stopMining').removeClass('disabled').addClass('disabled');
            $('#stopMining').attr('data-tooltip-disabled', $('#stopMining').attr('data-tooltip')).removeAttr('data-tooltip');
            $('#clockTune').removeClass('disabled').addClass('disabled');
            $('#clockTune').attr('data-tooltip-disabled', $('#clockTune').attr('data-tooltip')).removeAttr('data-tooltip');
        } else {
            $('#shutdownMachine,#rebootMachine,#restartSoftware,#switchMiner,#startMining,#stopMining').removeClass('disabled');
            $('#switchMiner').attr('data-tooltip', $('#switchMiner').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#restartSoftware').attr('data-tooltip', $('#restartSoftware').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#rebootMachine').attr('data-tooltip', $('#rebootMachine').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#shutdownMachine').attr('data-tooltip', $('#shutdownMachine').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#stopMining').attr('data-tooltip', $('#stopMining').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
            $('#startMining').attr('data-tooltip', $('#startMining').attr('data-tooltip-disabled')).removeAttr('data-tooltip-disabled');
        }
        var powerDefined = 0;
        var speedDefined = 0;
        var clocktuneDefined = 0;
        var loadDefined = 0;
        var clocktuneButtonsDefined = 0;
        var chipsButtonDefined = 0;
        var hardwareInfoDefined = 0;
        var powerTooltip = '';
        var fanSuffix = '%';
        var chipsDataPopup = '';
        var is4GB = false;
        var isHardwareError = false;
        if (displayClockTuneValues == '1') {
            $('#table_gpus').addClass('clocktune_extended');
        } else {
            $('#table_gpus').removeClass('clocktune_extended');
        }
        $.each(workerData['hardware'], function (key, data) {
            var hardwareName = data.name;
            if (typeof hardwareName == 'undefined') {
                hardwareName = _('Unknown');
            }
            if (hardwareName.indexOf(' 4GB') != -1 || hardwareName.indexOf(' 2GB') != -1 || hardwareName.indexOf(' 3GB') != -1) {
                is4GB = true;
            }
            var hardwarePower = data.power;
            var hardwareSpeed = data.speed;
            var hardwareTemp = data.temp;
            var hardwareTemp2 = data.temp2;
            var hardwareTemp2Str = '';
            var hardwareFan = data.fan;
            var currentTemp = 0;
            if (hardwareTemp == null) hardwareTemp = 0;
            if (hardwareTemp2 == null) hardwareTemp2 = 0;
            if (hardwareTemp2 > 0) {
                hardwareTemp2Str = ' | ' + convertTemperature(hardwareTemp2) + temperature;
            }
            if (hardwareTemp > avgTemp && hardwareTemp < 500) {
                avgTemp = hardwareTemp;
            }
            if (typeof hardwareSpeed !== 'undefined') {
                speedDefined = 1;
                hardwareSpeed = convertHashrate(speedToHash(hardwareSpeed, workerData['mining']['hashrate']['hashrate_unit']), 'H/s');
            } else {
                hardwareSpeed = '-';
            }
            if (typeof hardwarePower !== 'undefined') {
                sumWatt += hardwarePower;
                powerDefined = 1;
                hardwarePower = hardwarePower + ' W';
                powerTooltip += '<div>#' + key + ': ' + workerData['hardware'][key]['power'] + ' W</div>';
            } else {
                hardwarePower = '-';
                powerTooltip += '<div><span class="red">#' + key + ': -</span></div>';
            }
            if (typeof hardwareFan == 'undefined') hardwareFan = 0;
            if (hardwareFan > maxFan) {
                maxFan = hardwareFan;
            }
            fanSuffix = '%';
            if (maxFan > 100) {
                fanSuffix = ' RPM';
            }
            if (hardwareTemp >= workerData['info']['hot'] && hardwareTemp < workerData['info']['veryHot']) {
                hardwareTemp = '<div data-tooltip="' + _('Hot') + '" class="icon warning"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
            } else if (hardwareTemp >= workerData['info']['veryHot']) {
                if (hardwareTemp >= 500) {
                    hardwareTemp = '<div data-tooltip="' + _('Driver error') + '" class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
                } else {
                    hardwareTemp = '<div data-tooltip="' + _mx2('Very hot') + '" class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
                }
            } else if (hardwareTemp > 0) {
                hardwareTemp = convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
            } else {
                hardwareTemp = '-';
            }
            if (typeof data.memTemp != 'undefined' && data.memTemp != 0 && data.memTemp != '') {
                hardwareTemp += '<div class="hardwareTags"><div class="hardwareTag"><b>Mem</b> ' + convertTemperature(data.memTemp) + temperature + '</div></div>';
            }
            if (typeof hardwareName != 'undefined') {
                hardwareName = '<span class="hardwareName">' + hardwareName + '</span>';
            }
            var hardwareInfo = '';
            var gpuCore = '';
            var gpuMem = '';
            var gpuLoad = '';
            if (typeof data.bus !== 'undefined' || typeof data.bios !== 'undefined' || typeof data.type !== 'undefined') {
                hardwareInfo = '<div class="hardwareTags">';
                if (typeof data.bus !== 'undefined') {
                    hardwareInfo += '<div class="hardwareTag breakable"><b>Bus</b> ' + data.bus + '</div>';
                }
                if (typeof data.bios !== 'undefined') {
                    if (workerData['info']['type'] == 'amd' && (workerData['info']['system'] == 'msos' || workerData['info']['system'] == 'linux')) {
                        if (loadingBiosId == hws) {
                            hardwareInfo += '<div class="hardwareTag breakable clickable disabled disabled_with_loader" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download loading"></div></div>';
                        } else if (loadingBiosId != -1) {
                            hardwareInfo += '<div class="hardwareTag breakable clickable disabled" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download"></div></div>';
                        } else {
                            hardwareInfo += '<div class="hardwareTag breakable clickable" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download"></div></div>';
                        }
                    } else {
                        hardwareInfo += '<div class="hardwareTag breakable"><b>Bios</b>' + data.bios + '</div>';
                    }
                }
                if (typeof data.type !== 'undefined') {
                    hardwareInfo += '<div class="hardwareTag breakable"><b>Memory</b>' + data.type + '</div>';
                }
                hardwareInfo += '</div>';
                hardwareInfoDefined = 1;
            }
            if (typeof data.core !== 'undefined') {
                gpuCore = data.core + ' MHz';
                clocktuneDefined = 1;
            }
            if (typeof data.memory !== 'undefined') {
                gpuMem = data.memory + ' MHz';
                clocktuneDefined = 1;
            }
            if (typeof data.load !== 'undefined') {
                gpuLoad = data.load + '%';
                loadDefined = 1;
            }
            var hideShwPow = '';
            if (gpuCore == '' && gpuMem == '' && hardwarePower == '-') {
                hideShwPow = ' style="display:none;"';
            }
            var powerLimitsInfo = '';
            if (typeof data.powerMin != 'undefined' && data.powerMin != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Min</b> ' + data.powerMin + ' W</div>';
            }
            if (typeof data.powerStock != 'undefined' && data.powerStock != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Stock</b> ' + data.powerStock + ' W</div>';
            }
            if (typeof data.powerMax != 'undefined' && data.powerMax != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.powerMax + ' W</div>';
            }
            if (typeof data.powerCap != 'undefined' && data.powerCap != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Cap</b> ' + data.powerCap + ' W</div>';
            }
            var memoryLimitsInfo = '';
            if ((typeof data.memoryMax != 'undefined' && data.memoryMax != '') || (typeof data.mvdd != 'undefined' && data.mvdd != '')) {
                memoryLimitsInfo = '<div class="hardwareTags">';
                if (typeof data.memoryMax != 'undefined' && data.memoryMax != '') {
                    memoryLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.memoryMax + '</div>';
                }
                if (typeof data.mvdd != 'undefined' && data.mvdd != '') {
                    memoryLimitsInfo += '<div class="hardwareTag"><b>MVDD</b> ' + data.mvdd + ' mV</div>';
                }
                memoryLimitsInfo += '</div>';
            }
            var coreLimitsInfo = '';
            if ((typeof data.coreMax != 'undefined' && data.coreMax != '') || (typeof data.vddc != 'undefined' && data.vddc != '')) {
                coreLimitsInfo = '<div class="hardwareTags">';
                if (typeof data.coreMax != 'undefined' && data.coreMax != '') {
                    coreLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.coreMax + '</div>';
                }
                if (typeof data.vddc != 'undefined' && data.vddc != '') {
                    coreLimitsInfo += '<div class="hardwareTag"><b>VDD</b> ' + data.vddc + ' mV</div>';
                }
                coreLimitsInfo += '</div>';
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'BENCHMARKING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'BENCHMARK')) {
                hardwareSpeed = '-';
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'FLASHING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'FLASHING')) {
                hardwareSpeed = '-';
            }
            var chipsData = '';
            if (typeof data.chips != 'undefined' && data.chips != '') {
                chipsButtonDefined = 1;
                var hardwareChips = data.chips;
                var chipO = 0;
                var chipX = 0;
                var chipsDataTemp = '<div class="chip_block">';
                for (var chip = 0; chip < hardwareChips.length; chip++) {
                    if (hardwareChips[chip] == 'o') {
                        chipO++;
                        chipsDataTemp += '<div class="chip"></div>';
                    } else if (hardwareChips[chip] == 'x') {
                        chipX++;
                        chipsDataTemp += '<div class="chip failed"></div>';
                    } else {
                        chipsDataTemp += '</div><div class="chip_block">';
                    }
                }
                chipsDataTemp += '</div>';
                var openedChipCSS = '';
                if (openedChip == key) {
                    openedChipCSS = ' style="display:block;"';
                }
                if (chipX != 0) {
                    chipsData = '<div data-tooltip="' + _('Chip error') + '" class="icon hot"></div>' + chipO + '/' + (chipX + chipO);
                } else {
                    chipsData = chipO + '/' + chipO;
                }
                chipsData += '<div data-tooltip="' + _('Show chips') + '" class="icon chips" onclick="openChipData(' + key + ')"></div><div class="chips_popup" id="chip_' + key + '" ' + openedChipCSS + '><div class="chips_row">' + chipsDataTemp + '</div></div>';
            }
            globalCoin = workerData['mining']["crypto"];
            globalProfitability = workerData['revenue']["usd_day"];
            var gpuShares = '';
            var gpuSharesAddOn = '';
            if (typeof data.accepted != 'undefined' || typeof data.rejected != 'undefined') {
                var gpuAccepted = 0;
                var gpuRejected = 0;
                if (typeof data.accepted != 'undefined') {
                    gpuAccepted = data.accepted;
                }
                if (typeof data.rejected != 'undefined') {
                    gpuRejected = data.rejected;
                }
                var hardwareEfficiency = 0;
                if (gpuAccepted > 0) {
                    hardwareEfficiency = Math.round(1000 * gpuAccepted / (gpuAccepted + gpuRejected)) / 10;
                    if (hardwareEfficiency == 100.0) {
                        hardwareEfficiency = 100;
                    }
                }
                hardwareEfficiency = hardwareEfficiency + '%';
                gpuShares = '<div class="hardwareTags"><div data-tooltip="' + _mx('Efficiency') + ' &middot; ' + _('Accepted') + ' &middot; ' + _('Rejected') + '" class="hardwareTag"><b>' + hardwareEfficiency + ' ' + _('eff.') + '</b> ' + gpuAccepted + ' &middot; ' + gpuRejected + '</div></div>';
                if ((gpuRejected + gpuAccepted) > 0 && gpuAccepted / (gpuRejected + gpuAccepted) < 0.98 && gpuAccepted / (gpuRejected + gpuAccepted) > 0.8) {
                    gpuSharesAddOn = '<a href="/minerstat.com/help/what-is-mining-efficiency" target="_blank" data-tooltip="' + _('Low efficiency') + '" class="icon warning"></a>';
                } else if ((gpuRejected + gpuAccepted) > 0 && gpuAccepted / (gpuRejected + gpuAccepted) <= 0.8) {
                    gpuSharesAddOn = '<a href="/minerstat.com/help/what-is-mining-efficiency" target="_blank" data-tooltip="' + _('Very low efficiency') + '" class="icon hot"></a>';
                }
            }
            var errorsList = '';
            var hideShwErr = ' display:none;';
            if (typeof data.alertSlow != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertThermal != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-thermal-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertPower != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-power-break-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertTemp != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-software-thermal-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            var powerEff = 0;
            var powerEffUnit = 'H/W';
            var powerEffInfo = '';
            if (hardwareSpeed != '-' && hardwarePower != '-') {
                var hardwareSpeedValue = hardwareSpeed.split(' ')[0];
                var hardwareSpeedUnit = hardwareSpeed.split(' ')[1].replace('/s', '');
                var hardwarePowerValue = hardwarePower.split(' ')[0];
                powerEff = Math.round(1000 * hardwareSpeedValue / hardwarePowerValue) / 1000;
                powerEffUnit = hardwareSpeedUnit + '/W';
                powerEffInfo = '<div data-tooltip="' + _mx('Power efficiency') + '" class="hardwareTag"><b>' + _('Eff.') + '</b> ' + powerEff + ' ' + powerEffUnit + '</div>';
            }
            var powerInfo = '';
            if (powerLimitsInfo != '' || powerEffInfo != '') {
                powerInfo = '<div class="hardwareTags">' + powerLimitsInfo + powerEffInfo + '</div>';
            }
            var pState = '';
            if (typeof data.pstate != 'undefined' && data.pstate != '') {
                pState = '<b data-tooltip="Power state">[' + data.pstate + ']</b> ';
            }
            var extraClass = '';
            var highlightedClass = '';
            if (highlightedCard == hws) {
                highlightedClass = ' highlight';
            }
            var gpuDisabled = '';
            if (workerData['info']['type'] != "asic" && hardwareSpeed == '-') {
                gpuDisabled = ' disabled_gpu';
            }
            if (gpuDisabled != '' || highlightedClass != '') {
                extraClass = ' class="' + gpuDisabled + highlightedClass + '"';
            }
            var extraRow = '';
            if (displayClockTuneValues == '1') {
                var targetFan = '';
                var targetFanMin = '';
                var targetFanMax = '';
                var targetTemp = '';
                var targetMemoryTemp = '';
                var targetPowerLimit = '';
                var targetCoreClock = '';
                var targetLockedCoreClock = '';
                var targetMemoryClock = '';
                var targetVDDC = '';
                var targetMVDD = '';
                if (typeof clockTuneJson.fan != 'undefined' && clockTuneJson.fan != '') {
                    parameterValues = (clockTuneJson.fan).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetFan = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetFan == '' && lastValue != '') {
                        targetFan = lastValue;
                    }
                    if (targetFan != '') {
                        targetFan = '<div class="target_values_group"><div data-tooltip="' + _('Target value for static fans') + '" class="target_values"><b>STATIC</b>' + targetFan + fanSuffix + '</div></div>';
                    }
                }
                if (typeof clockTuneJson.fanMin != 'undefined' && typeof clockTuneJson.fanMax != 'undefined' && clockTuneJson.fanMin != '' && clockTuneJson.fanMax != '') {
                    targetFan = '<div class="target_values_group"><div data-tooltip="' + _('Target value for auto fans') + '" class="target_values"><b>AUTO</b>' + clockTuneJson.fanMin + fanSuffix + '-' + clockTuneJson.fanMax + fanSuffix + '</div></div>';
                }
                if (typeof clockTuneJson.targetTemp != 'undefined' && clockTuneJson.targetTemp != '' && clockTuneJson.targetTemp < 100) {
                    targetTemp = convertTemperature(clockTuneJson.targetTemp) + temperature;
                }
                if (typeof clockTuneJson.memTemp != 'undefined' && clockTuneJson.memTemp != '' && clockTuneJson.memTemp < 100) {
                    targetMemoryTemp = convertTemperature(clockTuneJson.memTemp) + temperature;
                }
                if (targetTemp != '') {
                    if (targetMemoryTemp != '' && typeof data.memTemp != 'undefined' && data.memTemp != 0 && data.memTemp != '') {
                        targetTemp = '<div class="target_values_group"><div data-tooltip="' + _('Target value for temp.') + '" class="target_values">' + targetTemp + '</div><div data-tooltip="' + _('Target value for mem. temp.') + '" class="target_values"><b>MEM</b>' + targetMemoryTemp + '</div></div>';
                    } else {
                        targetTemp = '<div class="target_values_group"><div data-tooltip="' + _('Target value for temp.') + '" class="target_values">' + targetTemp + '</div></div>';
                    }
                }
                var powerLimitUnit = 'W';
                var setBefore = 0;
                if (typeof clockTuneJson.powerlimit != 'undefined' && clockTuneJson.powerlimit != '') {
                    parameterValues = (clockTuneJson.powerlimit).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetPowerLimit = parameterValue;
                            setBefore = 1;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetPowerLimit == '' && lastValue != '') {
                        targetPowerLimit = lastValue;
                        setBefore = 1;
                    }
                    if ((workerType == 'nvidia' && workerSystem == 'windows') || (workerType == 'amd' && workerSystem == 'windows')) {
                        powerLimitUnit = '%';
                    }
                }
                if (typeof clockTuneJson.powerlimitwatt != 'undefined' && clockTuneJson.powerlimitwatt != '') {
                    powerLimitUnit = 'W';
                    parameterValues = (clockTuneJson.powerlimitwatt).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws && (targetPowerLimit == '' || (setBefore == 1 && targetPowerLimit == 'skip') || (targetPowerLimit != '' && parameterValue != 'skip'))) {
                            targetPowerLimit = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetPowerLimit == '' || (setBefore == 1 && targetPowerLimit == 'skip')) {
                        targetPowerLimit = lastValue;
                    }
                }
                if (targetPowerLimit != '') {
                    targetPowerLimit = '<div class="target_values_group"><div data-tooltip="' + _mx('Target value for power limit') + '" class="target_values"><b>PL</b>' + targetPowerLimit + powerLimitUnit + '</div></div>';
                }
                if (typeof clockTuneJson.coreclock != 'undefined' && clockTuneJson.coreclock != '') {
                    parameterValues = (clockTuneJson.coreclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetCoreClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetCoreClock == '' && lastValue != '') {
                        targetCoreClock = lastValue;
                    }
                    if (targetCoreClock != '') {
                        if (workerType == 'nvidia' && targetCoreClock >= 0) {
                            targetCoreClock = '+' + targetCoreClock;
                        }
                        targetCoreClock = '<div data-tooltip="' + _mx('Target value for core clock') + '" class="target_values"><b>CC</b>' + targetCoreClock + ' MHz' + '</div>';
                    }
                }
                if (typeof clockTuneJson.lockedcoreclock != 'undefined' && clockTuneJson.lockedcoreclock != '') {
                    parameterValues = (clockTuneJson.lockedcoreclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetLockedCoreClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetLockedCoreClock == '' && lastValue != '') {
                        targetLockedCoreClock = lastValue;
                    }
                    if (targetLockedCoreClock != '' && targetLockedCoreClock != 'skip') {
                        targetLockedCoreClock = '<div data-tooltip="' + _('Target value for locked core clock') + '" class="target_values"><b>LCC</b>' + targetLockedCoreClock + ' MHz' + '</div>';
                    }
                }
                if (targetLockedCoreClock != '' && targetLockedCoreClock != 'skip') {
                    targetCoreClock = targetLockedCoreClock;
                }
                if (typeof clockTuneJson.memoryclock != 'undefined' && clockTuneJson.memoryclock != '') {
                    parameterValues = (clockTuneJson.memoryclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetMemoryClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetMemoryClock == '' && lastValue != '') {
                        targetMemoryClock = lastValue;
                    }
                    if (targetMemoryClock != '') {
                        if (workerType == 'nvidia' && targetMemoryClock >= 0) {
                            targetMemoryClock = '+' + targetMemoryClock;
                        }
                        targetMemoryClock = '<div data-tooltip="' + _mx('Target value for memory clock') + '" class="target_values"><b>MC</b>' + targetMemoryClock + ' MHz' + '</div>';
                    }
                }
                if (typeof clockTuneJson.vddc != 'undefined' && clockTuneJson.vddc != '') {
                    parameterValues = (clockTuneJson.vddc).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetVDDC = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetVDDC == '' && lastValue != '') {
                        targetVDDC = lastValue;
                    }
                    if (targetVDDC != '') {
                        targetVDDC = '<div data-tooltip="' + _('Target value for VDD') + '" class="target_values"><b>VDD</b>' + targetVDDC + ' mV' + '</div>';
                    }
                }
                if (typeof clockTuneJson.mvdd != 'undefined' && clockTuneJson.mvdd != '') {
                    parameterValues = (clockTuneJson.mvdd).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetMVDD = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetMVDD == '' && lastValue != '') {
                        targetMVDD = lastValue;
                    }
                    if (targetMVDD != '') {
                        targetMVDD = '<div data-tooltip="' + _('Target value for MVDD') + '" class="target_values"><b>MVDD</b>' + targetMVDD + ' mV' + '</div>';
                    }
                }
                if (targetCoreClock != '' || targetVDDC != '') {
                    targetCoreClock = '<div class="target_values_group">' + targetCoreClock + targetVDDC + '</div>'
                }
                if (targetMemoryClock != '' || targetMVDD != '') {
                    targetMemoryClock = '<div class="target_values_group">' + targetMemoryClock + targetMVDD + '</div>'
                }
                extraRow = '<tr class="clocktune_extended"><td class="id_width"></td><td></td><td class="speedInfo rmv2"></td><td class="errorsInfo rmv2"></td><td class="powerInfo rmv2">' + targetPowerLimit + '</td><td class="rmv2">' + targetTemp + '</td><td class="rmv2">' + targetFan + '</td><td class="clocktuneInfo rmv2">' + targetCoreClock + '</td><td class="clocktuneInfo rmv2">' + targetMemoryClock + '</td><td class="loadInfo rmv2"></td><td class="tuningButtons rmv2"></td><td class="chipsData rmv2"></td></tr>';
            }
            if (access == 'guest') {
                $('<tr' + extraClass + '><td class="id_width"><div class="color" style="background:' + tempColors[Number(hws)] + ';">' + Number(hws) + '</div></td><td>' + hardwareName + hardwareInfo + '<div class="shw2" style="width:100%;padding-top:10px;' + hideShwErr + '">' + errorsList + '</div><div class="shw2"' + hideShwPow + '><div class="row powerInfo"><small>' + _mx('Power') + powerTitleAddon + '</small>' + pState + hardwarePower + '</div><div class="row clocktuneInfo"><small>' + _mx('Core') + '</small>' + gpuCore + '</div><div class="row clocktuneInfo"><small>' + _mx('Mem') + '</small>' + gpuMem + '</div></div><div class="shw2"><div class="row"><small>' + _mx2('Temp') + '</small>' + hardwareTemp + '</div><div class="row"><small>' + _('Fan') + '</small>' + Math.round(hardwareFan) + fanSuffix + '</div><div class="row speedInfo"><small>' + _mx3('Speed') + '</small>' + hardwareSpeed + gpuShares + '</div></div></td><td class="errorsInfo rmv2">' + errorsList + '</td><td class="speedInfo rmv2">' + hardwareSpeed + gpuShares + '</td><td class="powerInfo rmv2">' + pState + hardwarePower + powerInfo + '</td><td class="rmv2">' + hardwareTemp + '</td><td class="rmv2">' + Math.round(hardwareFan) + fanSuffix + '</td><td class="clocktuneInfo rmv2">' + gpuCore + coreLimitsInfo + '</td><td class="clocktuneInfo rmv2">' + gpuMem + memoryLimitsInfo + '</td><td class="loadInfo rmv2">' + gpuLoad + '</td><td class="chipsData rmv2">' + chipsData + '</td></tr>' + extraRow).appendTo('#table_gpus');
            } else {
                $('<tr' + extraClass + '><td class="id_width"><div class="color" style="background:' + tempColors[Number(hws)] + ';">' + Number(hws) + '</div></td><td>' + hardwareName + hardwareInfo + '<div class="shw2" style="width:100%;padding-top:10px;' + hideShwErr + '">' + errorsList + '</div><div class="shw2"' + hideShwPow + '><div class="row powerInfo"><small>' + _mx('Power') + powerTitleAddon + '</small>' + pState + hardwarePower + '</div><div class="row clocktuneInfo"><small>' + _mx('Core') + '</small>' + gpuCore + '</div><div class="row clocktuneInfo"><small>' + _mx('Mem') + '</small>' + gpuMem + '</div></div><div class="shw2"><div class="row"><small>' + _mx2('Temp') + '</small>' + hardwareTemp + '</div><div class="row"><small>' + _('Fan') + '</small>' + Math.round(hardwareFan) + fanSuffix + '</div><div class="row speedInfo"><small>' + _mx3('Speed') + '</small>' + gpuSharesAddOn + hardwareSpeed + gpuShares + '</div></div></td><td class="errorsInfo rmv2">' + errorsList + '</td><td class="speedInfo rmv2">' + gpuSharesAddOn + hardwareSpeed + gpuShares + '</td><td class="powerInfo rmv2">' + pState + hardwarePower + powerInfo + '</td><td class="rmv2">' + hardwareTemp + '</td><td class="rmv2">' + Math.round(hardwareFan) + fanSuffix + '</td><td class="clocktuneInfo rmv2">' + gpuCore + coreLimitsInfo + '</td><td class="clocktuneInfo rmv2">' + gpuMem + memoryLimitsInfo + '</td><td class="loadInfo rmv2">' + gpuLoad + '</td><td class="tuningButtons rmv2"><div class="icon clocktune" style="display: '+ockxBock+'"data-tooltip="' + _mx('Overclock for')+ ' #' + hws + '" data-gpu="' + hws + '" data-bus="' + data.bus + '"></div></td><td class="chipsData rmv2">' + chipsData + '</td></tr>' + extraRow).appendTo('#table_gpus');
            }
            hws++;
        });
        var hwCount = hws;
        if (workerData['info']['type'] != "asic") {
            var gpuMax = hwCount;
            if (typeof workerData['info']['devices'] != 'undefined' && workerData['info']['devices'] > 0) {
                gpuMax = workerData['info']['devices'];
            }
            $('#gpu_count').html(hwCount + '<span class="superscript">/' + gpuMax + '</span>');
            var gpuProgress = Math.round(100 * hwCount / gpuMax);
            $('#gpu_progress').html('<div style="width:' + gpuProgress + '%;" class="progress green"></div>');
            clocktuneButtonsDefined = 1;
        } else {
            if (typeof hwCount == 'undefined' || hwCount == 0) {
                hwCount = 0;
            } else {
                hwCount = 1;
            }
            $('#gpu_count').html(hwCount + '<span class="superscript">/1</span>');
            var gpuProgress = 100 * hwCount;
            $('#gpu_progress').html('<div style="width:' + gpuProgress + '%;" class="progress green"></div>');
            $('#gpu_progress').parent().children('label').html('ASIC');
            clocktuneButtonsDefined = 0;
        }
        $('#avg_temp').html(convertTemperature(avgTemp) + '<span class="superscript">' + temperature + '</span>');
        fanSuffix = '%';
        if (maxFan > 100) {
            fanSuffix = ' RPM';
        }
        if (typeof maxFan == 'undefined') {
            maxFan = 0;
            maxFanPercentage = 0;
        } else {
            if (maxFan > 100) {
                maxFanPercentage = 0;
            } else {
                maxFanPercentage = maxFan;
            }
        }
        $('#avg_fans').html(maxFan + '<span class="superscript">' + fanSuffix + '</span>');
        $('#fans_progress').html('<div style="width:' + maxFanPercentage + '%;" class="progress green"></div>');
        var tempColor = 'green';
        if (avgTemp >= workerData['info']['hot'] && avgTemp < workerData['info']['veryHot']) {
            tempColor = 'yellow';
        } else if (avgTemp >= workerData['info']['veryHot']) {
            tempColor = 'red';
        }
        $('#temp_progress').html('<div style="width:' + avgTemp + '%;" class="progress ' + tempColor + '"></div>');
        if (jQuery.type(workerData['info']['consumption']) !== "string" && workerData['info']['consumption'] > 0) {
            sumWatt = workerData['info']['consumption'];
        } else if (jQuery.type(workerData['info']['consumption']) === "string") {
            sumWatt += parseInt(workerData['info']['consumption'].replace('+', ''));
            powerTooltip += '<div class="divider" style="margin:5px 0 3px 0;"></div><div>' + workerData['info']['consumption'] + ' W</div>';
        }
        if (powerDefined == 0) {
            $(".powerInfo").hide();
        }
        if (speedDefined == 0) {
            $(".speedInfo").hide();
        }
        if (clocktuneDefined == 0) {
            $('.clocktuneInfo').hide();
        }
        if (loadDefined == 0) {
            $('.loadInfo').hide();
        }
        if (clocktuneButtonsDefined == 0) {
        }
        if (chipsButtonDefined == 0) {
            $('.chipsData').hide();
        }
        if (hardwareInfoDefined == 0) {
            $('.hardwareTags').hide();
        }
        if ($('#mining').hasClass('disabled')) {
            $('#mining').removeClass('disabled');
        }
        var workerEfficiency = 0;
        if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['shares'] != 'undefined') {
            var workerShares = workerData['mining']['shares'];
            if (typeof workerData['mining'].crypto_cpu !== "undefined" && workerData['mining'].crypto_cpu != '' && typeof workerData['mining'].crypto_dual !== "undefined" && workerData['mining'].crypto_dual != '') {
                if ((parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu)) > 0 && (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share)) > 0 && (parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual)) > 0) {
                    workerEfficiency = 100 - ((parseInt(workerShares.rejected_share_cpu) / (parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu))) * 100 + (parseInt(workerShares.rejected_share_dual) / (parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual))) * 100 + (parseInt(workerShares.rejected_share) / (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share))) * 100) / 3;
                } else {
                    workerEfficiency = 0;
                }
            } else if (typeof workerData['mining'].crypto_cpu !== "undefined" && workerData['mining'].crypto_cpu != '') {
                if ((parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu)) > 0 && (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share)) > 0) {
                    workerEfficiency = 100 - ((parseInt(workerShares.rejected_share_cpu) / (parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu))) * 100 + (parseInt(workerShares.rejected_share) / (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share))) * 100) / 2;
                } else {
                    workerEfficiency = 0;
                }
            } else if (typeof workerData['mining'].crypto_dual !== "undefined" && workerData['mining'].crypto_dual != '') {
                if ((parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual)) > 0 && (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share)) > 0) {
                    workerEfficiency = 100 - ((parseInt(workerShares.rejected_share_dual) / (parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual))) * 100 + (parseInt(workerShares.rejected_share) / (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share))) * 100) / 2;
                } else {
                    workerEfficiency = 0;
                }
            } else {
                if ((parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share)) > 0) {
                    workerEfficiency = 100 - (parseInt(workerShares.rejected_share) / (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share))) * 100;
                } else {
                    workerEfficiency = 0;
                }
            }
        }
        if (workerEfficiency.toFixed(1) == '100.0') {
            $('#efficiency').html(workerEfficiency.toFixed(0) + '<span class="superscript">%</span>');
        } else {
            $('#efficiency').html(workerEfficiency.toFixed(1) + '<span class="superscript">%</span>');
        }
        var effColor = 'green';
        if (workerEfficiency > 90 && workerEfficiency <= 95) {
            effColor = 'yellow';
        } else if (workerEfficiency <= 90) {
            effColor = 'red';
        }
        $('#eff_progress').html('<div style="width:' + Math.round(workerEfficiency) + '%;" class="progress ' + effColor + '"></div>');
        if ($('#earnings').hasClass('disabled')) {
            $('#earnings').removeClass('disabled');
        }
        var revenue_value = 0;
        var revenue_sum_value = 0;
        var dailyCosts = 0;
        if (sumWatt > 0 && workerData["info"]["electricity"] != 'undefined' && workerData["info"]["electricity"] > 0) {
            dailyCosts = 24 * sumWatt * workerData["info"]["electricity"] / 1000;
        }
        if (typeof workerData['revenue'] != 'undefined' && workerData['revenue'].usd_day != 0) {
            revenue_value = parseFloat(workerData['revenue'].usd_day);
            revenue_sum_value = parseFloat(workerData['revenue'].usd_day);
            revenue_value = revenue_value - dailyCosts;
            revenue_value = revenue_value * currencyValue;
            revenue_value = revenue_value.toFixed(toFixedValue);
        } else {
            revenue_value = ((revenue_value - dailyCosts) * currencyValue).toFixed(toFixedValue);
        }
        var revenueTooltip = '';
        if (dailyCosts > 0) {
            revenueTooltip = '<div class="tooltip"><div class="arrow"></div>' + _('Income') + ': ' + parseFloat(currencyValue * revenue_sum_value).toFixed(toFixedValue) + ' ' + currency + '<br>' + _('El. costs') + ': ' + (dailyCosts * currencyValue).toFixed(toFixedValue) + ' ' + currency + '</div>';
        }
        $('#daily_revenue').html(revenue_value + '<span class="superscript">' + currency + '</span>');
        $('#daily_revenue_text').html(revenueTooltip);
        var remoteIpDisplay = '***.***.***.***';
        if (workerRemoteIp == '0.0.0.0' && workerData['info']['os'].localip == '0.0.0.0') {
            $('#ips').hide();
        } else {
            if (currRemoteIp != workerRemoteIp) {
                currRemoteIp = workerRemoteIp;

                if (workerData['info']['type'] != "asic") {
                    if (workerData['info']['system'] == 'linux' || workerData['info']['system'] == 'msos') {

                        $('#remote_ip').html('<a id="copyremoteIPstr" data-ip-mask="' + workerRemoteIp + '" data-ip-real="' + workerRemoteIp + '" data-tooltip="' + _('Open remote terminal') + '" href="/console/' + workerName + '" target="_blank">' + workerRemoteIp + '</a><div data-tooltip="'+_mx3('Copy')+'" id="copyRemoteIP" style="margin-left: 4px" onclick="copyValue(\'remote\',\'' + workerRemoteIp + '\',this);" class="icon duplicate"></div>');
                        $('.remote_console').attr('href', '/console/' + workerName);
                    } else {
                        $('#remote_ip').html('<span id="copyremoteIPstr" data-ip-mask="' + workerRemoteIp + '" data-ip-real="' + workerRemoteIp + '">' + workerRemoteIp + '</span>' + '<div data-tooltip="'+_mx3('Copy')+'" id="copyRemoteIP" style="margin-left: 4px" onclick="copyValue(\'remote\',\'' + workerRemoteIp + '\',this);" class="icon duplicate"></div>');
                    }
                } else {
                    $('#remote_ip').html('<span id="copyremoteIPstr" data-ip-mask="' + workerRemoteIp + '" data-ip-real="' + workerRemoteIp + '">' + workerRemoteIp + '</span>' + '<div data-tooltip="'+_mx3('Copy')+'" id="copyRemoteIP" style="margin-left: 4px" onclick="copyValue(\'remote\',\'' + workerRemoteIp + '\',this);" class="icon duplicate"></div>');
                }
            }
            $('#ips').show();
        }
        var uptime = 'N/A';
        if (typeof workerData['info']['os'].uptime != 'undefined') {
            uptime = workerData['info']['os'].uptime;
        }
        if (uptime == 'N/A' && typeof workerData['info'].uptime != 'undefined') {
            uptime = workerData['info'].uptime;
        }
        $('#uptime').html(uptime);
        $('#uptime').show();
        var sync = workerData['info'].sync;
        if (statusClass == 'idle' && typeof workerData['info']['os'].sync != 'undefined') {
            sync = workerData['info']['os'].sync;
        }
        var seconds = parseInt(sync, 10);
        var days = Math.floor(seconds / (3600 * 24));
        seconds -= days * 3600 * 24;
        var hrs = Math.floor(seconds / 3600);
        seconds -= hrs * 3600;
        var mnts = Math.floor(seconds / 60);
        if (!isNaN(seconds)) {
            if (sync < 60) {
                sync = seconds + _("sec");
            } else if (sync < 60 * 60) {
                sync = mnts + _("min");
            } else if (sync < 24 * 60 * 60) {
                sync = hrs + "h, " + mnts + _("min");
            } else {
                sync = days + "d, " + hrs + "h, " + mnts + _("min");
            }
        } else {
            sync = _('Unknown');
        }
        if ($('#dash').hasClass('disabled')) {
            $('#dash').removeClass('disabled');
        }
        $('#sync').html(sync);
        if (sumWatt > 0) {
            if ($('#pow').hasClass('disabled')) {
                $('#pow').removeClass('disabled');
            }
            $('#watt .number').html(sumWatt + '<span class="superscript">W</span>');
            $('#power_consumption_text').html('<div class="tooltip"><div class="arrow"></div>' + powerTooltip + '</div>');
            var powerEfficiency = 0;
            var hashrateUnit = '';
            if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['hashrate'] != 'undefined' && typeof workerData['mining']['hashrate'].hashrate != 'undefined') {
                var hashrateConverted = convertHashrate(speedToHash(workerData['mining']['hashrate'].hashrate, workerData['mining']['hashrate'].hashrate_unit), 'H/s');
                powerEfficiency = hashrateConverted.split(' ')[0] / sumWatt;
                hashrateUnit = hashrateConverted.split(' ')[1].replace('/s', '');
                if (powerEfficiency < 0.01 && hashrateUnit != 'H') {
                    powerEfficiency = powerEfficiency * 1000;
                    if (hashrateUnit == 'KH') {
                        hashrateUnit = 'H';
                    } else if (hashrateUnit == 'MH') {
                        hashrateUnit = 'KH';
                    } else if (hashrateUnit == 'GH') {
                        hashrateUnit = 'MH';
                    } else if (hashrateUnit == 'TH') {
                        hashrateUnit = 'GH';
                    } else if (hashrateUnit == 'PH') {
                        hashrateUnit = 'TH';
                    }
                    powerEfficiency = Math.round(powerEfficiency * 100) / 100;
                    hashrateUnit = hashrateUnit + "/W";
                } else {
                    powerEfficiency = Math.round(powerEfficiency * 100) / 100;
                    hashrateUnit = hashrateUnit + "/W";
                }
                $('#watt_efficiency .number').html(powerEfficiency + '<span class="superscript">' + hashrateUnit + '</span>');
            }
            $('#pow').show();
        } else {
            $('#pow').hide();
        }
        var worker_data_efficiency = 0;
        if (typeof workerShares != 'undefined' && (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share)) > 0) {
            worker_data_efficiency = (100 - (parseInt(workerShares.rejected_share) / (parseInt(workerShares.rejected_share) + parseInt(workerShares.accepted_share))) * 100);
            if (worker_data_efficiency.toFixed(1) == '100.0') {
                worker_data_efficiency = parseFloat(worker_data_efficiency).toFixed(0);
            } else {
                worker_data_efficiency = parseFloat(worker_data_efficiency).toFixed(1);
            }
        }
        var asicSpecsCount = 0;
        if (typeof workerData['info'] != 'undefined' && typeof workerData['info']['os'] != 'undefined') {
            var freemem = workerData['info']['os'].freemem;
            var freespace = workerData['info']['os'].freespace;
            var cputemp = workerData['info']['os'].cpu_temp;
            var cpuload = workerData['info']['os'].cpu_load;
            if (typeof freemem != 'undefined' && freemem != "" && freemem != null) {
                $('#moboMem').html(freemem + ' GB');
                asicSpecsCount++;
            } else {
                $('#moboMem').parent().hide();
            }
            if (typeof freespace != 'undefined') {
                $('#driveSpace').html(freespace + ' GB');
            }
            if (typeof cpuTemp != 'undefined') {
                $('#cpuTemp').html(convertTemperature(cputemp) + temperature);
            }
            if (typeof cpuload != 'undefined') {
                $('#cpuLoad').html(cpuload + '%');
            }
            var firmware = workerData['info']['os'].firmware;
            var mac = workerData['info']['os'].mac;
            var kernel = workerData['info']['os'].kernel;
            if (typeof firmware != 'undefined' && firmware != "" && firmware != null) {
                $('#systemFirmware').html(firmware);
                asicSpecsCount++;
            } else {
                $('#systemFirmware').parent().hide();
            }
            if (typeof mac != 'undefined' && mac != "" && mac != null) {
                $('#asicMac').html(mac);
                asicSpecsCount++;
            } else {
                $('#asicMac').parent().hide();
            }
            if (typeof kernel != 'undefined' && kernel != "" && kernel != null) {
                $('#asicKernel').html(kernel);
                asicSpecsCount++;
            } else {
                $('#asicKernel').parent().hide();
            }
        }
        if (workerDriverAmd != '' && workerDriverNvidia != '') {
            $('#systemDrivers').html('AMD ' + workerDriverAmd + '<br>Nvidia ' + workerDriverNvidia);
        } else if (workerDriverAmd != '') {
            $('#systemDrivers').html('AMD ' + workerDriverAmd);
        } else if (workerDriverNvidia != '') {
            $('#systemDrivers').html('Nvidia ' + workerDriverNvidia);
        } else {
            $('#systemDrivers').parent().hide();
        }
        if (workerKernel != '') {
            $('#systemKernel').html(workerKernel);
        } else {
            $('#systemKernel').parent().hide();
        }
        if (workerUbuntu != '') {
            $('#systemName').html(workerUbuntu);
        } else {
            $('#systemName').html('System')
        }
        if (workerPackage != '') {
            $('#systemPackage').html(workerPackage);
        } else {
            $('#systemPackage').parent().hide();
        }
        if (workerMobo != '') {
            $('#moboName').html(workerMobo);
        } else {
            $('#moboName').parent().hide();
        }
        if (workerBios != '') {
            $('#moboBios').html(workerBios);
        } else {
            $('#moboBios').parent().hide();
        }
        if (workerMac != '') {
            $('#moboMac').html(workerMac);
        } else {
            $('#moboMac').parent().hide();
        }
        if (workerDrive != '') {
            $('#driveName').html(_mx(workerDrive));
        } else {
            $('#driveName').parent().hide();
        }
        if (workerCpuType != '') {
            $('#cpuName').html(workerCpuType);
        } else {
            $('#cpuName').parent().hide();
        }
        if (asicSpecsCount == 0 && workerData['info'].type == 'asic') {
            $('#specs_button').hide();
        }
        if (typeof workerData['revenue'].usd_cpu == 'undefined') {
            workerData['revenue'].usd_cpu = 0;
        }
        if (typeof workerData['revenue'].usd_month_cpu == 'undefined') {
            workerData['revenue'].usd_month_cpu = 0;
        }
        if (typeof workerData['revenue'].usd_dual == 'undefined') {
            workerData['revenue'].usd_dual = 0;
        }
        if (typeof workerData['revenue'].usd_month_dual == 'undefined') {
            workerData['revenue'].usd_month_dual = 0;
        }
        if (workerData['mining']['hashrate'].hashrate != null) {
            var hashrateSpeed = parseFloat(workerData['mining']['hashrate'].hashrate).toFixed(3);
            if (hashrateSpeed == 0) {
                hashrateSpeed = parseFloat(workerData['mining']['hashrate'].hashrate).toFixed(9);
            }
        } else {
            var hashrateSpeed = 0;
        }
        if (workerData['mining'].pool == null) {
            workerData['mining'].pool = _('Unknown');
        }
        var costsTooltip = '<div class="tooltip"><div class="arrow"></div>';
        costsTooltip += _('Est. income') + ': ' + ((workerData['revenue'].usd_month - workerData['revenue'].usd_month_dual - workerData['revenue'].usd_month_cpu) * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<br>';
        if (dailyCosts > 0) {
            costsTooltip += _('El. costs') + ': ' + (30 * dailyCosts * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<br>';
            costsTooltip += _('Est. profit') + ': ' + ((workerData['revenue'].usd_month - parseFloat(workerData['revenue'].usd_month_dual) - parseFloat(workerData['revenue'].usd_month_cpu)) * currencyValue - 30 * dailyCosts * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<br>';
        }
        costsTooltip += '<div class="divider"></div>' + _('Est. '+workerData['mining']['crypto']) + ': ' + parseFloat((btcExchange * ((workerData['revenue']['coin']*31)- parseFloat(workerData['revenue'].usd_month_dual) - parseFloat(workerData['revenue'].usd_month_cpu)) - dailyCosts * 30 * btcExchange)).toFixed(8) +' '+workerData['mining']['crypto'];
        costsTooltip += '</div>';
        var miningClient = '';
        var miningClientUptime = 'N/A';
        var miningClientVersion = '';
        var miningClientCpuVersion = '';
        if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['client'] != 'undefined' && workerData['mining']['client'] != null) {
            miningClient = workerData['mining']['client'].toUpperCase();
            if (typeof workerData['info']['uptime'] != 'undefined') {
                miningClientUptime = workerData['info']['uptime'];
            }
        }
        if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['client_version'] != 'undefined' && workerData['mining']['client_version'] != '') {
            miningClientVersion = '<small>v' + workerData['mining']['client_version'] + '</small>';
        }
        if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['client_cpu_version'] != 'undefined' && workerData['mining']['client_cpu_version'] != '') {
            miningClientCpuVersion = '<small>v' + workerData['mining']['client_cpu_version'] + '</small>';
        }
        if (workerData['info'].status == 'disable'||statusClass == 'idle'||workerData['info'].status=='untime'||workerData['info'].status=='unable'||workerData['info'].status=='offline'|| (typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason != '') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'BENCHMARK')) {
            $('.other_status').removeClass('idle switching initializing booting benchmarking flashing');
            $('.other_status > .icon').removeClass('idle switching initializing booting benchmarking flashing');
            if (statusClass == 'idle') {
                $('.other_status').addClass('idle');
                $('.other_status > .icon').addClass('idle');
                $('.other_status > .text > .title').html(_mx('Idle'));
                if (workerData['info']['system'] == "windows" || workerData['info']['system'] == "win") {
                    $('.other_status > .text').html('<div class="title">' + _mx('Idle') + '</div><div class="subtitle">' + _mx('Your worker is online but not mining.') + '</div>');
                } else {
                    $('.other_status > .text > .subtitle').html(_mx('Your worker is online but not mining.'));
                    $('.other_status > .text > .extra').html('');
                }
            }
            if (typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'SWITCHING') {
                $('.other_status').addClass('switching');
                $('.other_status > .icon').addClass('switching');
                $('.other_status > .text > .title').html(_('Switching'));
                $('.other_status > .text > .subtitle').html(_('Your worker is switching to other mining configuration.'));
                $('.other_status > .text > .extra').html('');
            }
            if (typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'INITIALIZING') {
                $('.other_status').addClass('switching');
                $('.other_status > .icon').addClass('switching');
                $('.other_status > .text > .title').html(_('Initializing'));
                $('.other_status > .text > .subtitle').html(_('Your worker is preparing to start mining.'));
                $('.other_status > .text > .extra').html('');
            }
            if (typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'BOOTING') {
                $('.other_status').addClass('switching');
                $('.other_status > .icon').addClass('switching');
                $('.other_status > .text > .title').html(_('Booting'));
                $('.other_status > .text > .subtitle').html(_('Your rig is currently booting up.'));
                $('.other_status > .text > .extra').html('');
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'BENCHMARKING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'BENCHMARK')) {
                $('.other_status').addClass('benchmarking');
                $('.other_status > .icon').addClass('benchmarking');
                $('.other_status > .text > .title').html(_('Benchmarking'));
                $('.other_status > .text > .subtitle').html(_('Your worker is currently benchmarking.'));
                $('.other_status > .text > .extra').html('');
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'FLASHING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'FLASHING')) {
                $('.other_status').addClass('flashing');
                $('.other_status > .icon').addClass('flashing');
                $('.other_status > .text > .title').html(_('BIOS flashing'));
                $('.other_status > .text > .subtitle').html(_('Your worker is currently under BIOS flashing process.'));
                $('.other_status > .text > .extra').html('');
            }
            if (workerData['info'].status=='untime') {
                $('.other_status').addClass('idle');
                $('.other_status > .icon').addClass('idle');
                $('.other_status > .text > .title').html(_mx('outTime'));
                $('.other_status > .text > .subtitle').html(_mx('Your miner is not in the mining time period. You can reset the mining time period for mining'));
                $('.other_status > .text > .extra').html('');
            }
            if (workerData['info'].status=='unable') {
                $('.other_status').addClass('idle');
                $('.other_status > .icon').addClass('idle');
                $('.other_status > .text > .title').html(_mx2('unable'));
                $('.other_status > .text > .subtitle').html(_mx2('Your machine does not meet the mining standard, please upgrade the hardware'));
                $('.other_status > .text > .extra').html('');
            }
            if (workerData['info'].status=='disable') {
                $('.other_status').addClass('idle');
                $('.other_status > .icon').addClass('idle');
                $('.other_status > .text > .title').html(_mx2('disable'));
                $('.other_status > .text > .subtitle').html(_mx2('Your machine is disabled and cannot mining. If you need to continue mining, please remove the prohibition.'));
                $('.other_status > .text > .extra').html('');
            }
            $('.other_status').show();
            $('#algo_mining').hide();
        } else {

            var cryptoUnit = getUnitFromCrypto(workerData['mining'].crypto);
            var crypto_val = (30 * workerData['revenue'].coin).toFixed(6) + ' ' + cryptoUnit;
            if (cryptoUnit.indexOf('+') != -1) {
                crypto_val = _('Merged mining');
            }
            var crypto_price = (workerData['revenue'].cprice * currencyValue).toFixed(3) + ' ' + currency;
            if (cryptoUnit.indexOf('+') != -1) {
                crypto_price = _('Merged mining');
            }
            var worker_data_efficiency_addon = '';
            if (worker_data_efficiency < 98 && uptimeSeconds >= 5 * 60) {
                worker_data_efficiency_addon = '<a href="/minerstat.com/help/what-is-mining-efficiency" target="_blank" data-tooltip="' + _('Low efficiency') + '" class="icon hot with_subtitle pointer"></a>';
            }
            var worker_data_hashrate_addon = '';
            if (hashrateSpeed == 0 && uptimeSeconds >= 1 * 60) {
                worker_data_hashrate_addon = '<div data-tooltip="' + _('No hashrate') + '" class="icon hot"></div>';
            }
            var rowHtml = '';
            globalHashrate = hashrateSpeed;
            globalAcceptedShares = workerShares.accepted_share;
            globalRejectedShares = workerShares.rejected_share;
            globalClientUptime = miningClientUptime;
            globalCoin = workerData['mining']["crypto"];
            globalProfitability = workerData['revenue']["usd_day"];
            if (is4GB && typeof workerData['mining']["crypto"] != 'undefined' && (workerData['mining']["crypto"] == 'ETH' || workerData['mining']["crypto"].indexOf('(eth)') > 0)) {
                $('#ethError').children('.text').html('<b>Unsupported coin</b><br>You are mining ETH with GPU that has less than 6GB VRAM cards so you might experience reduced hashrate, instability, or you will not be able to mine at all. Switch to some other coin or <a href="/medium.com/minerstat/what-to-mine-with-4gb-gpus-675b583617a8" target="_blank">click here to learn more</a>.');
                $('#ethError').show();
            } else {
                if ((workerData['mining']["crypto"] == 'ETH' || workerData['mining']["crypto"] == 'NO') && workerData['mining']["client"] == 'CLAYMORE-ETH') {
                    $('#ethError').children('.text').html('<b>Obsolete mining client</b><br>Claymore is obsolete for mining ETH since December 2020. Please use some other mining client.');
                    $('#ethError').show();
                } else {
                    $('#ethError').children('.text').html('');
                    $('#ethError').hide();
                }
            }
            if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["pool"] != 'undefined' && workerData['mining']["pool"] != '' && workerData['mining']["pool"].includes(":") == false) {
                $('#miningError').children('.text').html('<b>Missing pool port</b><br>Your pool address is missing a port: <a href="/address-editor" target="_blank">Set port to your pool</a>.');
                $('#miningError').show();
            } else {
                $('#miningError').children('.text').html('');
                $('#miningError').hide();
            }
            var poolUrl = '';
            if (typeof miningWallet != 'undefined' && miningWallet != '') {
                if (typeof workerData['mining'].pool != 'undefined') {
                    if (workerData['mining'].pool.indexOf('ethermine.org') != -1 || workerData['mining'].pool.indexOf('flypool.org') != -1) {
                        if (workerData['mining'].crypto == 'ETH') {
                            poolUrl = '/ethermine.org/miners/' + miningWallet + '/dashboard?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ETC') {
                            poolUrl = '/etc.ethermine.org/miners/' + miningWallet + '/dashboard?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'RVN') {
                            poolUrl = '/ravencoin.flypool.org/miners/' + miningWallet + '/dashboard?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'BEAM') {
                            poolUrl = '/beam.flypool.org/miners/' + miningWallet + '/dashboard?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('nanopool.org') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'NANOPOOL (eth)') {
                            poolUrl = '/eth.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ETC' || workerData['mining'].crypto == 'NANOPOOL (erc)') {
                            poolUrl = '/etc.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'RVN' || workerData['mining'].crypto == 'NANOPOOL (rvn)') {
                            poolUrl = '/rvn.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'CFX' || workerData['mining'].crypto == 'NANOPOOL (cfx)') {
                            poolUrl = '/cfx.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ERG' || workerData['mining'].crypto == 'NANOPOOL (erg)') {
                            poolUrl = '/ergo.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ZEC' || workerData['mining'].crypto == 'NANOPOOL (zec)') {
                            poolUrl = '/zec.nanopool.org/search?address=' + miningWallet + '&utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('2miners.com') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == '2MINERS (eth)') {
                            poolUrl = '/eth.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ETC' || workerData['mining'].crypto == '2MINERS (etc)') {
                            poolUrl = '/etc.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'RVN' || workerData['mining'].crypto == '2MINERS (rvn)') {
                            poolUrl = '/rvn.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'FIRO' || workerData['mining'].crypto == '2MINERS (firo)') {
                            poolUrl = '/firo.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'XMR' || workerData['mining'].crypto == '2MINERS (xmr)') {
                            poolUrl = '/xmr.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'ERG' || workerData['mining'].crypto == '2MINERS (erg)') {
                            poolUrl = '/erg.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        } else if (workerData['mining'].crypto == 'FLUX' || workerData['mining'].crypto == '2MINERS (flux)') {
                            poolUrl = '/flux.2miners.com/account/' + miningWallet + '?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('f2pool.com') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'F2POOL (eth)') {
                            poolUrl = '/www.f2pool.com/eth/' + miningWallet + '?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('flexpool.io') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'FLEXPOOL (eth)') {
                            poolUrl = '/www.flexpool.io/miner/eth/' + miningWallet + '?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('hiveon.net') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'HIVEON (eth)') {
                            poolUrl = '/hiveon.net/eth?miner=' + miningWallet + '&utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('binance.com') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'BINANCE (eth)') {
                            poolUrl = '/pool.binance.com/en/earnings?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('ravenminer.com') != -1) {
                        if (workerData['mining'].crypto == 'RVN') {
                            poolUrl = '/www.ravenminer.com/?address=' + miningWallet + '&utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('crazypool.org') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'CRAZYPOOL (eth)') {
                            poolUrl = '/eth.crazypool.org/#/account/' + miningWallet + '?utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('ezil.me') != -1) {
                        if (workerData['mining'].crypto == 'ETH' || workerData['mining'].crypto == 'EZIL (eth)') {
                            poolUrl = '/ezil.me/personal_stats?wallet=' + miningWallet + '&coin=eth&utm_source=minerstat';
                        }
                    }
                    if (workerData['mining'].pool.indexOf('ezil.me') != -1) {
                        if (workerData['mining'].crypto == 'ETC' || workerData['mining'].crypto == 'EZIL (etc)') {
                            poolUrl = '/ezil.me/personal_stats?wallet=' + miningWallet + '&coin=etc&utm_source=minerstat';
                        }
                    }
                }
            }
            var poolLink = '';
            if (poolUrl != '') {
                poolLink = '<a class="icon wallet financialData" id="externalPoolLink" data-tooltip="' + _('Check balance on pool') + '" href="https:/' + poolUrl + '" target="_blank" rel="noreferrer"></a>';
            }
            var cryptoIcon = '';
            if ((workerData['mining'].crypto).indexOf(' ') == -1) {
                var coinUrl = workerData['mining'].crypto;
                if (coinUrl == 'NO') {
                    if(getIcon(workerData['mining'].crypto)!=''){
                        cryptoIcon = '<div href="/minerstat.com/help/coin-is-displayed-as-unknown-or-no" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/' + getIcon(workerData['mining'].crypto) + '.png"></div>';

                    }else {
                        cryptoIcon = '<div href="/minerstat.com/help/coin-is-displayed-as-unknown-or-no" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/no.png"></div>';
                    }
               } else {
                    if(getIcon(workerData['mining'].crypto)!=''){
                        cryptoIcon = '<div href="/minerstat.com/coin/' + coinUrl + '" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/' + getIcon(workerData['mining'].crypto) + '.png"></div>';
                    }else {
                        cryptoIcon = '<div href="/minerstat.com/coin/' + coinUrl + '" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/no.png"></div>';

                    }
               }
            } else {
                if (isCryptoPool((workerData['mining'].crypto).toUpperCase())) {
                    var coinUrl = (workerData['mining'].crypto).toUpperCase().replace('(', '').replace(')', '').replace(' ', '-');
                    if(getIcon(workerData['mining'].crypto)!=''){
                        cryptoIcon = '<a href="/minerstat.com/coin/' + coinUrl + '" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/' + getIcon(workerData['mining'].crypto) + '.png"></a>';
                    }else {
                        cryptoIcon = '<a href="/minerstat.com/coin/' + coinUrl + '" target="_blank"><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/no.png"></a>';
                    }
                } else {
                    if(getIcon(workerData['mining'].crypto)!=''){
                        cryptoIcon = '<img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/' + getIcon(workerData['mining'].crypto) + '.png">';
                    }else {
                        cryptoIcon = '<img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png">';
                    }

                }
            }
            let myTypePool=''
            if(workerData['mining'].latency_type!=''){
                myTypePool=workerData['mining'].pool+'('+workerData['mining'].latency_type+')'+ poolLink
            }else {
                myTypePool=workerData['mining'].pool+ poolLink
            }

            rowHtml += '<tr><td>' + cryptoIcon + workerData['mining'].crypto + '<small class="crypto_price">' + crypto_price + '</small><div class="shw2"><div class="row"><small>' + _mx('Efficiency') + '</small>' + worker_data_efficiency + '%<small class="shares" data-tooltip="' + _('Accepted') + ' &middot; ' + _('Rejected') + '">' + workerShares.accepted_share + ' &middot; ' + parseInt(workerShares.rejected_share) + '</small></div><div class="row financialData"><small>' + _mx('Earnings') + '</small>' + parseFloat((workerData['revenue'].usd_month - parseFloat(workerData['revenue'].usd_month_dual) - parseFloat(workerData['revenue'].usd_month_cpu) - dailyCosts * 30) * currencyValue).toFixed(toFixedValue) + ' ' + currency + '</div></div><div class="shw1"><div class="row"><small>' + _mx('Pools') + '</small>' + workerData['mining'].pool + poolLink + '</div><div class="row"><small>' + _mx3('Speed') + ' <span class="clientInfo">(' + miningClient + ')</span></small>' + convertHashrate(speedToHash(hashrateSpeed, workerData['mining']['hashrate'].hashrate_unit), 'H/s') + '</div></div></td><td class="rmv1 clientInfo">' + miningClient + miningClientVersion + '</td><td class="rmv1">' + miningClientUptime + '</td><td class="rmv1 flexHashrate">' + worker_data_hashrate_addon + convertHashrate(speedToHash(hashrateSpeed, workerData['mining']['hashrate'].hashrate_unit), 'H/s') + '</td><td class="rmv2">' + worker_data_efficiency_addon + worker_data_efficiency + '%<small class="shares" data-tooltip="' + _('Accepted') + ' &middot; ' + _('Rejected') + '">' + workerShares.accepted_share + ' &middot; ' + parseInt(workerShares.rejected_share) + '</small></td><td class="rmv2 financialData"><div class="ttp">' + parseFloat((workerData['revenue'].usd_month - parseFloat(workerData['revenue'].usd_month_dual) - parseFloat(workerData['revenue'].usd_month_cpu) - dailyCosts * 30) * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<small class="btc_val">' + crypto_val + '</small>' + costsTooltip + '</div></td><td class="rmv1">' + myTypePool + '</td></tr>';
            if (typeof workerData['mining'].crypto_dual !== "undefined" && workerData['mining'].crypto_dual != '') {
                var dual_efficiency = 0;
                if ((parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual)) > 0) {
                    var dual_efficiency = 100 - (parseInt(workerShares.rejected_share_dual) / (parseInt(workerShares.rejected_share_dual) + parseInt(workerShares.accepted_share_dual))) * 100;
                    if (dual_efficiency.toFixed(1) == '100.0') {
                        dual_efficiency = parseFloat(dual_efficiency).toFixed(0);
                    } else {
                        dual_efficiency = parseFloat(dual_efficiency).toFixed(1);
                    }
                }
                cryptoUnit = getUnitFromCrypto(workerData['mining'].crypto_dual);
                var crypto_val_dual = (30 * workerData['revenue'].coin_dual).toFixed(6) + ' ' + cryptoUnit;
                if (workerData['mining']['hashrate'].hashrate_unit_dual == '') {
                    workerData['mining']['hashrate'].hashrate_unit_dual = 'H';
                }
                rowHtml += '<tr><td><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/' + getIcon(workerData['mining'].crypto_dual) + 'no.png"> ' + workerData['mining'].crypto_dual + '<small class="crypto_price">' + (workerData['revenue'].cprice_dual * currencyValue).toFixed(3) + ' ' + currency + '</small><div class="shw2"><div class="row"><small>' + _mx('Efficiency') + '</small>' + dual_efficiency + '%</div><div class="row financialData"><small>' + _mx('Earnings') + '</small>' + parseFloat(workerData['revenue'].cprice_dual * workerData['revenue'].coin_dual * currencyValue).toFixed(toFixedValue) + ' ' + currency + '</div></div><div class="shw1"><div class="row"><small>' + _mx('Pools') + '</small>' + workerData['mining'].pool_dual + '</div><div class="row"><small>' + _mx3('Speed') + '<span class="clientInfo">(' + miningClient + ')</span></small>' + parseFloat(workerData['mining']['hashrate'].hashrate_dual).toFixed(3) + ' ' + workerData['mining']['hashrate'].hashrate_unit_dual + '/s</div></div></td><td class="rmv1 clientInfo">' + miningClient + miningClientVersion + '</td><td class="rmv1"></td><td class="rmv1 flexHashrate">' + parseFloat(workerData['mining']['hashrate'].hashrate_dual).toFixed(3) + ' ' + workerData['mining']['hashrate'].hashrate_unit_dual + '/s</td><td class="rmv2">' + dual_efficiency + '%<small data-tooltip="' + _('Accepted') + ' &middot; ' + _('Rejected') + '" class="shares">' + workerShares.accepted_share_dual + ' &middot; ' + parseInt(workerShares.rejected_share_dual) + '</small></td><td class="rmv2 financialData">' + parseFloat(workerData['revenue'].usd_month_dual * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<small>' + crypto_val_dual + '</small></td><td class="rmv1">' + workerData['mining'].pool_dual + '</td></tr>';
            }
            if (typeof workerData['mining'].crypto_cpu !== "undefined" && workerData['mining'].crypto_cpu != '') {
                var miningClientCpu = '';
                if (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']['client_cpu'] != 'undefined') {
                    miningClientCpu = workerData['mining']['client_cpu'].toUpperCase();
                }
                var cpu_efficiency = 0;
                if ((parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu)) > 0) {
                    var cpu_efficiency = 100 - (parseInt(workerShares.rejected_share_cpu) / (parseInt(workerShares.rejected_share_cpu) + parseInt(workerShares.accepted_share_cpu))) * 100;
                    if (cpu_efficiency.toFixed(1) == '100.0') {
                        cpu_efficiency = parseFloat(cpu_efficiency).toFixed(0);
                    } else {
                        cpu_efficiency = parseFloat(cpu_efficiency).toFixed(1);
                    }
                }
                cryptoUnit = getUnitFromCrypto(workerData['mining'].crypto_cpu);
                var crypto_val_cpu = (30 * workerData['revenue'].coin_cpu).toFixed(6) + ' ' + cryptoUnit;
                rowHtml += '<tr><td><img class="crypto_icon" width="32" height="32" onError="this.onerror=null;this.src=\'/32/no.png\';" src="/32/' + getIcon(workerData['mining'].crypto_cpu) + 'no.png"> ' + workerData['mining'].crypto_cpu + '<small class="crypto_price">' + (workerData['revenue'].cprice_cpu * currencyValue).toFixed(3) + ' ' + currency + '</small><div class="shw2"><div class="row"><small>' + _mx('Efficiency') + '</small>' + cpu_efficiency + '%</div><div class="row financialData"><small>' + _mx('Earnings') + '</small>' + parseFloat(workerData['revenue'].usd_month_cpu * currencyValue).toFixed(toFixedValue) + ' ' + currency + '</div></div><div class="shw1"><div class="row"><small>' + _mx('Pools') + '</small>' + workerData['mining'].pool_cpu + '</div><div class="row"><small>' + _mx3('Speed') + '<span class="clientInfo">(' + miningClientCpu + ')</span></small>' + parseFloat(workerData['mining']['hashrate'].hashrate_cpu).toFixed(3) + ' ' + workerData['mining']['hashrate'].hashrate_unit_cpu + '/s</div></div></td><td class="rmv1 clientInfo">' + miningClientCpu + miningClientCpuVersion + '</td><td class="rmv1"></td><td class="rmv1 flexHashrate">' + Math.round(parseFloat(workerData['mining']['hashrate'].hashrate_cpu)) + ' ' + workerData['mining']['hashrate'].hashrate_unit_cpu + '/s</td><td class="rmv2">' + cpu_efficiency + '%<small data-tooltip="' + _('Accepted') + ' &middot; ' + _('Rejected') + '" class="shares">' + workerShares.accepted_share_cpu + ' &middot; ' + parseInt(workerShares.rejected_share_cpu) + '</small></td><td class="rmv2 financialData">' + parseFloat(workerData['revenue'].usd_month_cpu * currencyValue).toFixed(toFixedValue) + ' ' + currency + '<small>' + crypto_val_cpu + '</small></td><td class="rmv1">' + workerData['mining'].pool_cpu + '</td></tr>';
            }
            $('#algo_mining table').append(rowHtml);
        }
        if (workerData['info']['type'] == "asic") {
            $('.clientInfo').hide();
        }
        $('#main_content').show();
        $('#empty_content').hide();
        if (!isHardwareError) {
            $('.errorsInfo').hide();
        } else {
            $('.errorsInfo').show();
        }
        if (workerData['info']['type'] == 'asic') {
            $('.tuningButtons').hide();
        }
        setBtnShow(workerData['info'].status)
    }
    else {
        $('.other_status').addClass('offline');
        $('.other_status > .icon').addClass('offline');
        $('.other_status > .text > .title').html(_mx('Offline'));
        $('.other_status > .text > .subtitle').html(_mx('Your machine is offline. If you need to continue mining, please wake up the machine through the wake-up function'));
        $('.other_status > .text > .extra').html('');
        $('.other_status').show();
        var powerDefined = 0;
        var speedDefined = 0;
        var clocktuneDefined = 0;
        var loadDefined = 0;
        var clocktuneButtonsDefined = 0;
        var chipsButtonDefined = 0;
        var hardwareInfoDefined = 0;
        var powerTooltip = '';
        var fanSuffix = '%';
        var chipsDataPopup = '';
        var is4GB = false;
        var isHardwareError = false;
        if (displayClockTuneValues == '1') {
            $('#table_gpus').addClass('clocktune_extended');
        } else {
            $('#table_gpus').removeClass('clocktune_extended');
        }
        $.each(workerData['hardware'], function (key, data) {
            var hardwareName = data.name;
            if (typeof hardwareName == 'undefined') {
                hardwareName = _('Unknown');
            }
            if (hardwareName.indexOf(' 4GB') != -1 || hardwareName.indexOf(' 2GB') != -1 || hardwareName.indexOf(' 3GB') != -1) {
                is4GB = true;
            }
            var hardwarePower = data.power;
            var hardwareSpeed = data.speed;
            var hardwareTemp = data.temp;
            var hardwareTemp2 = data.temp2;
            var hardwareTemp2Str = '';
            var hardwareFan = data.fan;
            var currentTemp = 0;
            if (hardwareTemp == null) hardwareTemp = 0;
            if (hardwareTemp2 == null) hardwareTemp2 = 0;
            if (hardwareTemp2 > 0) {
                hardwareTemp2Str = ' | ' + convertTemperature(hardwareTemp2) + temperature;
            }
            if (hardwareTemp > avgTemp && hardwareTemp < 500) {
                avgTemp = hardwareTemp;
            }
            if (typeof hardwareSpeed !== 'undefined') {
                speedDefined = 1;
                hardwareSpeed = convertHashrate(speedToHash(hardwareSpeed, workerData['mining']['hashrate']['hashrate_unit']), 'H/s');
            } else {
                hardwareSpeed = '-';
            }
            if (typeof hardwarePower !== 'undefined') {
                sumWatt += hardwarePower;
                powerDefined = 1;
                hardwarePower = hardwarePower + ' W';
                powerTooltip += '<div>#' + key + ': ' + workerData['hardware'][key]['power'] + ' W</div>';
            } else {
                hardwarePower = '-';
                powerTooltip += '<div><span class="red">#' + key + ': -</span></div>';
            }
            if (typeof hardwareFan == 'undefined') hardwareFan = 0;
            if (hardwareFan > maxFan) {
                maxFan = hardwareFan;
            }
            fanSuffix = '%';
            if (maxFan > 100) {
                fanSuffix = ' RPM';
            }
            if (hardwareTemp >= workerData['info']['hot'] && hardwareTemp < workerData['info']['veryHot']) {
                hardwareTemp = '<div data-tooltip="' + _('Hot') + '" class="icon warning"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
            } else if (hardwareTemp >= workerData['info']['veryHot']) {
                if (hardwareTemp >= 500) {
                    hardwareTemp = '<div data-tooltip="' + _('Driver error') + '" class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
                } else {
                    hardwareTemp = '<div data-tooltip="' + _mx2('Very hot') + '" class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
                }
            } else if (hardwareTemp > 0) {
                hardwareTemp = convertTemperature(hardwareTemp) + temperature + hardwareTemp2Str;
            } else {
                hardwareTemp = '-';
            }
            if (typeof data.memTemp != 'undefined' && data.memTemp != 0 && data.memTemp != '') {
                hardwareTemp += '<div class="hardwareTags"><div class="hardwareTag"><b>Mem</b> ' + convertTemperature(data.memTemp) + temperature + '</div></div>';
            }
            if (typeof hardwareName != 'undefined') {
                hardwareName = '<span class="hardwareName">' + hardwareName + '</span>';
            }
            var hardwareInfo = '';
            var gpuCore = '';
            var gpuMem = '';
            var gpuLoad = '';
            if (typeof data.bus !== 'undefined' || typeof data.bios !== 'undefined' || typeof data.type !== 'undefined') {
                hardwareInfo = '<div class="hardwareTags">';
                if (typeof data.bus !== 'undefined') {
                    hardwareInfo += '<div class="hardwareTag breakable"><b>Bus</b> ' + data.bus + '</div>';
                }
                if (typeof data.bios !== 'undefined') {
                    if (workerData['info']['type'] == 'amd' && (workerData['info']['system'] == 'msos' || workerData['info']['system'] == 'linux')) {
                        if (loadingBiosId == hws) {
                            hardwareInfo += '<div class="hardwareTag breakable clickable disabled disabled_with_loader" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download loading"></div></div>';
                        } else if (loadingBiosId != -1) {
                            hardwareInfo += '<div class="hardwareTag breakable clickable disabled" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download"></div></div>';
                        } else {
                            hardwareInfo += '<div class="hardwareTag breakable clickable" onclick="downloadBios(' + hws + ',\'' + data.bus + '\',\'' + data.bios + '\',\'' + data.name + '\',this);"><b>Bios</b>' + data.bios + '<div class="icon bios_download"></div></div>';
                        }
                    } else {
                        hardwareInfo += '<div class="hardwareTag breakable"><b>Bios</b>' + data.bios + '</div>';
                    }
                }
                if (typeof data.type !== 'undefined') {
                    hardwareInfo += '<div class="hardwareTag breakable"><b>Memory</b>' + data.type + '</div>';
                }
                hardwareInfo += '</div>';
                hardwareInfoDefined = 1;
            }
            if (typeof data.core !== 'undefined') {
                gpuCore = data.core + ' MHz';
                clocktuneDefined = 1;
            }
            if (typeof data.memory !== 'undefined') {
                gpuMem = data.memory + ' MHz';
                clocktuneDefined = 1;
            }
            if (typeof data.load !== 'undefined') {
                gpuLoad = data.load + '%';
                loadDefined = 1;
            }
            var hideShwPow = '';
            if (gpuCore == '' && gpuMem == '' && hardwarePower == '-') {
                hideShwPow = ' style="display:none;"';
            }
            var powerLimitsInfo = '';
            if (typeof data.powerMin != 'undefined' && data.powerMin != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Min</b> ' + data.powerMin + ' W</div>';
            }
            if (typeof data.powerStock != 'undefined' && data.powerStock != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Stock</b> ' + data.powerStock + ' W</div>';
            }
            if (typeof data.powerMax != 'undefined' && data.powerMax != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.powerMax + ' W</div>';
            }
            if (typeof data.powerCap != 'undefined' && data.powerCap != '') {
                powerLimitsInfo += '<div class="hardwareTag"><b>Cap</b> ' + data.powerCap + ' W</div>';
            }
            var memoryLimitsInfo = '';
            if ((typeof data.memoryMax != 'undefined' && data.memoryMax != '') || (typeof data.mvdd != 'undefined' && data.mvdd != '')) {
                memoryLimitsInfo = '<div class="hardwareTags">';
                if (typeof data.memoryMax != 'undefined' && data.memoryMax != '') {
                    memoryLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.memoryMax + '</div>';
                }
                if (typeof data.mvdd != 'undefined' && data.mvdd != '') {
                    memoryLimitsInfo += '<div class="hardwareTag"><b>MVDD</b> ' + data.mvdd + ' mV</div>';
                }
                memoryLimitsInfo += '</div>';
            }
            var coreLimitsInfo = '';
            if ((typeof data.coreMax != 'undefined' && data.coreMax != '') || (typeof data.vddc != 'undefined' && data.vddc != '')) {
                coreLimitsInfo = '<div class="hardwareTags">';
                if (typeof data.coreMax != 'undefined' && data.coreMax != '') {
                    coreLimitsInfo += '<div class="hardwareTag"><b>Max</b> ' + data.coreMax + '</div>';
                }
                if (typeof data.vddc != 'undefined' && data.vddc != '') {
                    coreLimitsInfo += '<div class="hardwareTag"><b>VDD</b> ' + data.vddc + ' mV</div>';
                }
                coreLimitsInfo += '</div>';
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'BENCHMARKING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'BENCHMARK')) {
                hardwareSpeed = '-';
            }
            if ((typeof workerData['info'].status_reason != 'undefined' && workerData['info'].status_reason == 'FLASHING') || (typeof workerData['mining'] != 'undefined' && typeof workerData['mining']["crypto"] != 'undefined' && workerData['mining']["crypto"] == 'FLASHING')) {
                hardwareSpeed = '-';
            }
            var chipsData = '';
            if (typeof data.chips != 'undefined' && data.chips != '') {
                chipsButtonDefined = 1;
                var hardwareChips = data.chips;
                var chipO = 0;
                var chipX = 0;
                var chipsDataTemp = '<div class="chip_block">';
                for (var chip = 0; chip < hardwareChips.length; chip++) {
                    if (hardwareChips[chip] == 'o') {
                        chipO++;
                        chipsDataTemp += '<div class="chip"></div>';
                    } else if (hardwareChips[chip] == 'x') {
                        chipX++;
                        chipsDataTemp += '<div class="chip failed"></div>';
                    } else {
                        chipsDataTemp += '</div><div class="chip_block">';
                    }
                }
                chipsDataTemp += '</div>';
                var openedChipCSS = '';
                if (openedChip == key) {
                    openedChipCSS = ' style="display:block;"';
                }
                if (chipX != 0) {
                    chipsData = '<div data-tooltip="' + _('Chip error') + '" class="icon hot"></div>' + chipO + '/' + (chipX + chipO);
                } else {
                    chipsData = chipO + '/' + chipO;
                }
                chipsData += '<div data-tooltip="' + _('Show chips') + '" class="icon chips" onclick="openChipData(' + key + ')"></div><div class="chips_popup" id="chip_' + key + '" ' + openedChipCSS + '><div class="chips_row">' + chipsDataTemp + '</div></div>';
            }
            globalCoin = workerData['mining']["crypto"];
            globalProfitability = workerData['revenue']["usd_day"];
            var gpuShares = '';
            var gpuSharesAddOn = '';
            if (typeof data.accepted != 'undefined' || typeof data.rejected != 'undefined') {
                var gpuAccepted = 0;
                var gpuRejected = 0;
                if (typeof data.accepted != 'undefined') {
                    gpuAccepted = data.accepted;
                }
                if (typeof data.rejected != 'undefined') {
                    gpuRejected = data.rejected;
                }
                var hardwareEfficiency = 0;
                if (gpuAccepted > 0) {
                    hardwareEfficiency = Math.round(1000 * gpuAccepted / (gpuAccepted + gpuRejected)) / 10;
                    if (hardwareEfficiency == 100.0) {
                        hardwareEfficiency = 100;
                    }
                }
                hardwareEfficiency = hardwareEfficiency + '%';
                gpuShares = '<div class="hardwareTags"><div data-tooltip="' + _mx('Efficiency') + ' &middot; ' + _('Accepted') + ' &middot; ' + _('Rejected') + '" class="hardwareTag"><b>' + hardwareEfficiency + ' ' + _('eff.') + '</b> ' + gpuAccepted + ' &middot; ' + gpuRejected + '</div></div>';
                if ((gpuRejected + gpuAccepted) > 0 && gpuAccepted / (gpuRejected + gpuAccepted) < 0.98 && gpuAccepted / (gpuRejected + gpuAccepted) > 0.8) {
                    gpuSharesAddOn = '<a href="/minerstat.com/help/what-is-mining-efficiency" target="_blank" data-tooltip="' + _('Low efficiency') + '" class="icon warning"></a>';
                } else if ((gpuRejected + gpuAccepted) > 0 && gpuAccepted / (gpuRejected + gpuAccepted) <= 0.8) {
                    gpuSharesAddOn = '<a href="/minerstat.com/help/what-is-mining-efficiency" target="_blank" data-tooltip="' + _('Very low efficiency') + '" class="icon hot"></a>';
                }
            }
            var errorsList = '';
            var hideShwErr = ' display:none;';
            if (typeof data.alertSlow != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertThermal != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-thermal-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertPower != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-power-break-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            if (typeof data.alertTemp != 'undefined') {
                errorsList = '<a href="/minerstat.com/help/nvidia-throttling-software-thermal-slowdown" target="_blank" class="error_tag">' + _('GPU throttled') + '</a>';
                isHardwareError = true;
                hideShwErr = '';
            }
            var powerEff = 0;
            var powerEffUnit = 'H/W';
            var powerEffInfo = '';
            if (hardwareSpeed != '-' && hardwarePower != '-') {
                var hardwareSpeedValue = hardwareSpeed.split(' ')[0];
                var hardwareSpeedUnit = hardwareSpeed.split(' ')[1].replace('/s', '');
                var hardwarePowerValue = hardwarePower.split(' ')[0];
                powerEff = Math.round(1000 * hardwareSpeedValue / hardwarePowerValue) / 1000;
                powerEffUnit = hardwareSpeedUnit + '/W';
                powerEffInfo = '<div data-tooltip="' + _mx('Power efficiency') + '" class="hardwareTag"><b>' + _('Eff.') + '</b> ' + powerEff + ' ' + powerEffUnit + '</div>';
            }
            var powerInfo = '';
            if (powerLimitsInfo != '' || powerEffInfo != '') {
                powerInfo = '<div class="hardwareTags">' + powerLimitsInfo + powerEffInfo + '</div>';
            }
            var pState = '';
            if (typeof data.pstate != 'undefined' && data.pstate != '') {
                pState = '<b data-tooltip="Power state">[' + data.pstate + ']</b> ';
            }
            var extraClass = '';
            var highlightedClass = '';
            if (highlightedCard == hws) {
                highlightedClass = ' highlight';
            }
            var gpuDisabled = '';
            if (workerData['info']['type'] != "asic" && hardwareSpeed == '-') {
                gpuDisabled = ' disabled_gpu';
            }
            if (gpuDisabled != '' || highlightedClass != '') {
                extraClass = ' class="' + gpuDisabled + highlightedClass + '"';
            }
            var extraRow = '';
            if (displayClockTuneValues == '1') {
                var targetFan = '';
                var targetFanMin = '';
                var targetFanMax = '';
                var targetTemp = '';
                var targetMemoryTemp = '';
                var targetPowerLimit = '';
                var targetCoreClock = '';
                var targetLockedCoreClock = '';
                var targetMemoryClock = '';
                var targetVDDC = '';
                var targetMVDD = '';
                if (typeof clockTuneJson.fan != 'undefined' && clockTuneJson.fan != '') {
                    parameterValues = (clockTuneJson.fan).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetFan = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetFan == '' && lastValue != '') {
                        targetFan = lastValue;
                    }
                    if (targetFan != '') {
                        targetFan = '<div class="target_values_group"><div data-tooltip="' + _('Target value for static fans') + '" class="target_values"><b>STATIC</b>' + targetFan + fanSuffix + '</div></div>';
                    }
                }
                if (typeof clockTuneJson.fanMin != 'undefined' && typeof clockTuneJson.fanMax != 'undefined' && clockTuneJson.fanMin != '' && clockTuneJson.fanMax != '') {
                    targetFan = '<div class="target_values_group"><div data-tooltip="' + _('Target value for auto fans') + '" class="target_values"><b>AUTO</b>' + clockTuneJson.fanMin + fanSuffix + '-' + clockTuneJson.fanMax + fanSuffix + '</div></div>';
                }
                if (typeof clockTuneJson.targetTemp != 'undefined' && clockTuneJson.targetTemp != '' && clockTuneJson.targetTemp < 100) {
                    targetTemp = convertTemperature(clockTuneJson.targetTemp) + temperature;
                }
                if (typeof clockTuneJson.memTemp != 'undefined' && clockTuneJson.memTemp != '' && clockTuneJson.memTemp < 100) {
                    targetMemoryTemp = convertTemperature(clockTuneJson.memTemp) + temperature;
                }
                if (targetTemp != '') {
                    if (targetMemoryTemp != '' && typeof data.memTemp != 'undefined' && data.memTemp != 0 && data.memTemp != '') {
                        targetTemp = '<div class="target_values_group"><div data-tooltip="' + _('Target value for temp.') + '" class="target_values">' + targetTemp + '</div><div data-tooltip="' + _('Target value for mem. temp.') + '" class="target_values"><b>MEM</b>' + targetMemoryTemp + '</div></div>';
                    } else {
                        targetTemp = '<div class="target_values_group"><div data-tooltip="' + _('Target value for temp.') + '" class="target_values">' + targetTemp + '</div></div>';
                    }
                }
                var powerLimitUnit = 'W';
                var setBefore = 0;
                if (typeof clockTuneJson.powerlimit != 'undefined' && clockTuneJson.powerlimit != '') {
                    parameterValues = (clockTuneJson.powerlimit).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetPowerLimit = parameterValue;
                            setBefore = 1;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetPowerLimit == '' && lastValue != '') {
                        targetPowerLimit = lastValue;
                        setBefore = 1;
                    }
                    if ((workerType == 'nvidia' && workerSystem == 'windows') || (workerType == 'amd' && workerSystem == 'windows')) {
                        powerLimitUnit = '%';
                    }
                }
                if (typeof clockTuneJson.powerlimitwatt != 'undefined' && clockTuneJson.powerlimitwatt != '') {
                    powerLimitUnit = 'W';
                    parameterValues = (clockTuneJson.powerlimitwatt).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws && (targetPowerLimit == '' || (setBefore == 1 && targetPowerLimit == 'skip') || (targetPowerLimit != '' && parameterValue != 'skip'))) {
                            targetPowerLimit = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetPowerLimit == '' || (setBefore == 1 && targetPowerLimit == 'skip')) {
                        targetPowerLimit = lastValue;
                    }
                }
                if (targetPowerLimit != '') {
                    targetPowerLimit = '<div class="target_values_group"><div data-tooltip="' + _mx('Target value for power limit') + '" class="target_values"><b>PL</b>' + targetPowerLimit + powerLimitUnit + '</div></div>';
                }
                if (typeof clockTuneJson.coreclock != 'undefined' && clockTuneJson.coreclock != '') {
                    parameterValues = (clockTuneJson.coreclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetCoreClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetCoreClock == '' && lastValue != '') {
                        targetCoreClock = lastValue;
                    }
                    if (targetCoreClock != '') {
                        if (workerType == 'nvidia' && targetCoreClock >= 0) {
                            targetCoreClock = '+' + targetCoreClock;
                        }
                        targetCoreClock = '<div data-tooltip="' + _mx('Target value for core clock') + '" class="target_values"><b>CC</b>' + targetCoreClock + ' MHz' + '</div>';
                    }
                }
                if (typeof clockTuneJson.lockedcoreclock != 'undefined' && clockTuneJson.lockedcoreclock != '') {
                    parameterValues = (clockTuneJson.lockedcoreclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetLockedCoreClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetLockedCoreClock == '' && lastValue != '') {
                        targetLockedCoreClock = lastValue;
                    }
                    if (targetLockedCoreClock != '' && targetLockedCoreClock != 'skip') {
                        targetLockedCoreClock = '<div data-tooltip="' + _('Target value for locked core clock') + '" class="target_values"><b>LCC</b>' + targetLockedCoreClock + ' MHz' + '</div>';
                    }
                }
                if (targetLockedCoreClock != '' && targetLockedCoreClock != 'skip') {
                    targetCoreClock = targetLockedCoreClock;
                }
                if (typeof clockTuneJson.memoryclock != 'undefined' && clockTuneJson.memoryclock != '') {
                    parameterValues = (clockTuneJson.memoryclock).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetMemoryClock = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetMemoryClock == '' && lastValue != '') {
                        targetMemoryClock = lastValue;
                    }
                    if (targetMemoryClock != '') {
                        if (workerType == 'nvidia' && targetMemoryClock >= 0) {
                            targetMemoryClock = '+' + targetMemoryClock;
                        }
                        targetMemoryClock = '<div data-tooltip="' + _mx('Target value for memory clock') + '" class="target_values"><b>MC</b>' + targetMemoryClock + ' MHz' + '</div>';
                    }
                }
                if (typeof clockTuneJson.vddc != 'undefined' && clockTuneJson.vddc != '') {
                    parameterValues = (clockTuneJson.vddc).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetVDDC = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetVDDC == '' && lastValue != '') {
                        targetVDDC = lastValue;
                    }
                    if (targetVDDC != '') {
                        targetVDDC = '<div data-tooltip="' + _('Target value for VDD') + '" class="target_values"><b>VDD</b>' + targetVDDC + ' mV' + '</div>';
                    }
                }
                if (typeof clockTuneJson.mvdd != 'undefined' && clockTuneJson.mvdd != '') {
                    parameterValues = (clockTuneJson.mvdd).split(' ');
                    var lastValue = '';
                    $.each(parameterValues, function (parameterIndex, parameterValue) {
                        if (parameterValue == '') {
                            parameterValue = 'skip';
                        }
                        if (parameterIndex == hws) {
                            targetMVDD = parameterValue;
                        }
                        lastValue = parameterValue;
                    });
                    if (targetMVDD == '' && lastValue != '') {
                        targetMVDD = lastValue;
                    }
                    if (targetMVDD != '') {
                        targetMVDD = '<div data-tooltip="' + _('Target value for MVDD') + '" class="target_values"><b>MVDD</b>' + targetMVDD + ' mV' + '</div>';
                    }
                }
                if (targetCoreClock != '' || targetVDDC != '') {
                    targetCoreClock = '<div class="target_values_group">' + targetCoreClock + targetVDDC + '</div>'
                }
                if (targetMemoryClock != '' || targetMVDD != '') {
                    targetMemoryClock = '<div class="target_values_group">' + targetMemoryClock + targetMVDD + '</div>'
                }

                extraRow = '<tr class="clocktune_extended"><td class="id_width"></td><td></td><td class="speedInfo rmv2"></td><td class="errorsInfo rmv2"></td><td class="powerInfo rmv2">' + targetPowerLimit + '</td><td class="rmv2">' + targetTemp + '</td><td class="rmv2">' + targetFan + '</td><td class="clocktuneInfo rmv2">' + targetCoreClock + '</td><td class="clocktuneInfo rmv2">' + targetMemoryClock + '</td><td class="loadInfo rmv2"></td><td class="tuningButtons rmv2"></td></tr>';
            }
            if (access == 'guest') {
                $('<tr' + extraClass + '><td class="id_width"><div class="color" style="background:' + tempColors[Number(hws)] + ';">' + Number(hws) + '</div></td><td>' + hardwareName + hardwareInfo + '<div class="shw2" style="width:100%;padding-top:10px;' + hideShwErr + '">' + errorsList + '</div><div class="shw2"' + hideShwPow + '><div class="row powerInfo"><small>' + _mx('Power') + powerTitleAddon + '</small>' + pState + hardwarePower + '</div><div class="row clocktuneInfo"><small>' + _mx('Core') + '</small>' + gpuCore + '</div><div class="row clocktuneInfo"><small>' + _mx('Mem') + '</small>' + gpuMem + '</div></div><div class="shw2"><div class="row"><small>' + _mx2('Temp') + '</small>' + hardwareTemp + '</div><div class="row"><small>' + _('Fan') + '</small>' + Math.round(hardwareFan) + fanSuffix + '</div><div class="row speedInfo"><small>' + _mx3('Speed') + '</small>' + hardwareSpeed + gpuShares + '</div></div></td><td class="errorsInfo rmv2">' + errorsList + '</td><td class="speedInfo rmv2">' + hardwareSpeed + gpuShares + '</td><td class="powerInfo rmv2">' + pState + hardwarePower + powerInfo + '</td><td class="rmv2">' + hardwareTemp + '</td><td class="rmv2">' + Math.round(hardwareFan) + fanSuffix + '</td><td class="clocktuneInfo rmv2">' + gpuCore + coreLimitsInfo + '</td><td class="clocktuneInfo rmv2">' + gpuMem + memoryLimitsInfo + '</td><td class="loadInfo rmv2">' + gpuLoad + '</td><td class="chipsData rmv2">' + chipsData + '</td></tr>' + extraRow).appendTo('#table_gpus');
            } else {
                $('<tr' + extraClass + '><td class="id_width"><div class="color" style="background:' + tempColors[Number(hws)] + ';">' + Number(hws) + '</div></td><td>' + hardwareName + hardwareInfo + '<div class="shw2" style="width:100%;padding-top:10px;' + hideShwErr + '">' + errorsList + '</div><div class="shw2"' + hideShwPow + '><div class="row powerInfo"><small>' + _mx('Power') + powerTitleAddon + '</small>' + pState + hardwarePower + '</div><div class="row clocktuneInfo"><small>' + _mx('Core') + '</small>' + gpuCore + '</div><div class="row clocktuneInfo"><small>' + _mx('Mem') + '</small>' + gpuMem + '</div></div><div class="shw2"><div class="row"><small>' + _mx2('Temp') + '</small>' + hardwareTemp + '</div><div class="row"><small>' + _('Fan') + '</small>' + Math.round(hardwareFan) + fanSuffix + '</div><div class="row speedInfo"><small>' + _mx3('Speed') + '</small>' + gpuSharesAddOn + hardwareSpeed + gpuShares + '</div></div></td><td class="errorsInfo rmv2">' + errorsList + '</td><td class="speedInfo rmv2">' + gpuSharesAddOn + hardwareSpeed + gpuShares + '</td><td class="powerInfo rmv2">' + pState + hardwarePower + powerInfo + '</td><td class="rmv2">' + hardwareTemp + '</td><td class="rmv2">' + Math.round(hardwareFan) + fanSuffix + '</td><td class="clocktuneInfo rmv2">' + gpuCore + coreLimitsInfo + '</td><td class="clocktuneInfo rmv2">' + gpuMem + memoryLimitsInfo + '</td><td class="loadInfo rmv2">' + gpuLoad + '</td><td class="tuningButtons rmv2"><div class="icon clocktune" style="display: '+ockxBock+'" data-tooltip="' + _mx('Overclock for')+ ' #' + hws + '" data-gpu="' + hws + '" data-bus="' + data.bus + '"></div></td></tr>' + extraRow).appendTo('#table_gpus');
            }
            hws++;
        });

        $('#switchMiner,#restartSoftware,#rebootMachine,#shutdownMachine,#startMining,#stopMining').removeClass('disabled').addClass('disabled');
        $('#stopMining').hide();
        $('#switchMiner').attr('data-tooltip-disabled', $('#switchMiner').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#restartSoftware').attr('data-tooltip-disabled', $('#restartSoftware').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#rebootMachine').attr('data-tooltip-disabled', $('#rebootMachine').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#shutdownMachine').attr('data-tooltip-disabled', $('#shutdownMachine').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#stopMining').attr('data-tooltip-disabled', $('#stopMining').attr('data-tooltip')).removeAttr('data-tooltip');
        $('#startMining').attr('data-tooltip-disabled', $('#startMining').attr('data-tooltip')).removeAttr('data-tooltip');
        if (!$('#chip').hasClass('disabled')) {
            $('#chip').addClass('disabled');
        }
        if (!$('#dash').hasClass('disabled')) {
            $('#dash').addClass('disabled');
        }
        if (!$('#mining').hasClass('disabled')) {
            $('#mining').addClass('disabled');
        }
        if (!$('#pow').hasClass('disabled')) {
            $('#pow').addClass('disabled');
        }
        if (!$('#earnings').hasClass('disabled')) {
            $('#earnings').addClass('disabled');
        }
        if (!$('#uptime_data').hasClass('disabled')) {
            $('#uptime_data').addClass('disabled');
        }
        // $('#table_gpus').addClass('hardwareOffline');
        if (workerData['info']['system'] == "msos") {
            $('#algo_mining table').html('<tr><th>' + _mx('Crypto') + '</th><th class="rmv1">' + _mx3('Speed') + '</th><th class="rmv2">' + _mx('Efficiency') + '</th><th class="rmv2">' + _mx('Earnings') + '</th><th class="rmv1">' + _mx('Pools') + '</th></tr><tr><td colspan="5">' + _mx('No data on mining available for this worker.') + '<div onclick="downloadConfigJs();" class="link">' + _('Download') + ' config.js</div>' + '</td></tr>').parent().addClass('disabled');
        } else {
            $('#algo_mining table').html('<tr><th>' + _mx('Crypto') + '</th><th class="rmv1">' + _mx3('Speed') + '</th><th class="rmv2">' + _mx('Efficiency') + '</th><th class="rmv2">' + _mx('Earnings') + '</th><th class="rmv1">' + _mx('Pools') + '</th></tr><tr><td colspan="5">' + _mx('No data on mining available for this worker.') + '</td></tr>').parent().addClass('disabled');
        }
        $('#cpu_mining').addClass('disabled').html('<table><tr><th>' + _('CPU') + '</th><th>' + _mx('Crypto') + '</th><th>' + _mx3('Speed') + '</th><th>' + _mx('Earnings') + '</th><th>' + _mx('Pools') + '</th></tr><tr><td colspan="5">' + _('No data on CPU available for this worker.') + '</td></tr></table>');
        setBtnShow(workerData['info'].status)
    }
}

Highcharts.wrap(Highcharts.Axis.prototype, 'getPlotLinePath', function (proceed) {
    var path = proceed.apply(this, Array.prototype.slice.call(arguments, 1));
    if (path) {
        path.flat = false;
    }
    return path;
});
let clienxm=0
let clienxm2=0
$(function () {
    $('#asicDownload').click(function () {
        $('#osDownload .download_dropdown').hide();
        $('#windowsDownload .download_dropdown').hide();
        $('#asicDownload .download_dropdown').toggle();
    });
    $('#osDownload').click(function () {
        $('#asicDownload .download_dropdown').hide();
        $('#windowsDownload .download_dropdown').hide();
        $('#osDownload .download_dropdown').toggle();
    });
    $('#windowsDownload').click(function () {
        $('#asicDownload .download_dropdown').hide();
        $('#osDownload .download_dropdown').hide();
        $('#windowsDownload .download_dropdown').toggle();
    });
    $('.more_info').hover(function () {
        $(this).parent().children('.tooltip_frame').show();
    }, function () {
        $(this).parent().children('.tooltip_frame').hide();
    });
    $(document).mouseup(function (e) {
        var container = $(".download_dropdown");
        var containerParent = $(".button_dropdown");
        if (!container.is(e.target) && container.has(e.target).length === 0 && !containerParent.is(e.target) && e.target.localName != 'html') {
            container.hide();
        }
    });

    $('#systemSpecs').click(function () {
        if (!$(this).parent().parent().hasClass('disabled')) {
            clearInterval(clienxm)
            clearInterval(clienxm2)
            if( $('#dash .specs_menu').is(':visible')){
                $('#dash .specs_menu').toggle();
            }else {
                // setConsoleText()
                $('#dash .specs_menu').toggle();
                let list = document.getElementsByClassName('myConsoleLog')
                $.each(list,function (i,it) {
                    if($(it).hasClass('isLog')){
                        if($(it).attr('data-sx')=='soft'){
                            myCache=undefined
                            $('.text_frame').html('加载中...')
                            setConsoleText()
                            clienxm=setInterval('setConsoleText()',1000)
                        }else {
                            myCache=undefined
                            $('.text_frame').html('加载中...')
                            setClientText()
                            clienxm2=setInterval('setClientText()',1000)
                        }
                    }
                })

            }
            if (typeof ps_console != 'undefined') {
                ps_console.update();
            }
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".specs_menu");
        if (!$('#ConsloleimgWin *').is(e.target) &&!container.is(e.target) && container.has(e.target).length === 0 && (!$("#systemSpecs").is(e.target)) && (!$(".icon.specs").is(e.target)) && e.target.localName != 'html') {
            clearInterval(clienxm)
            clearInterval(clienxm2)
            container.hide();
        }
    });
    $('#clockTune').click(function () {
        if (!$('#clockTune').hasClass('disabled')) {
            $('.clocktune_menu').toggle();
            if (typeof ps_clocktune != 'undefined') {
                ps_clocktune.update();
            }
        }
    });
    $(document).mouseup(function (e) {
        if (!$(".clocktune_menu").is(e.target) && !$("#clockTune").is(e.target) && !$(".clocktune_menu .search_el").is(e.target) && !$(".clocktune_menu .search_el .icon.search").is(e.target) && !$("#search_clocktune").is(e.target) && !$(".icon.clocktune").is(e.target) && e.target.localName != 'html') {
            $(".clocktune_menu").hide();
        }
    });
    $('#search_clocktune').keyup(function () {
        var searchQuery = $(this).val();
        if (searchQuery == '') {
            $('.clocktune_menu .frame .row_outside').show();
            ps_clocktune.update();
        } else {
            searchQuery = searchQuery.toLowerCase();
            $('.clocktune_menu .frame .row_outside').each(function () {
                var profileStr = $(this).children('.row').text();
                if (profileStr != '') {
                    profileStr = profileStr.toLowerCase();
                    if (profileStr.indexOf(searchQuery) != -1) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                }
            });
            ps_clocktune.update();
        }
    });
    $('#openTasks').click(function () {
        if (!$('#openTasks').hasClass('disabled')) {
            $('.tasks_menu').toggle();
            if (typeof ps_tasks_list != 'undefined') {
                ps_tasks_list.update();
            }
        }
    });
    $(document).mouseup(function (e) {
        if (!$(".tasks_menu").is(e.target) && (!$("#openTasks").is(e.target)) && (!$("#openTasks .signal_new").is(e.target)) && (!$(".icon.tasks").is(e.target)) && (!$(".popupbackground").is(e.target)) && e.target.localName != 'html' && $(e.target).parents('.tasks_menu').length != 1 && $(e.target).parents('#edit_task').length != 1) {
            $(".tasks_menu").hide();
        }
    });
    $('#changeWorker').click(function () {
        if (!$('#changeWorker').hasClass('disabled')) {
            $('.change_worker_menu').toggle();
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".change_worker_menu");
        if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#changeWorker").is(e.target)) && (!$(".icon.change").is(e.target)) && e.target.localName != 'html') {
            container.hide();
        }
    });
    $('#switchMiner').click(function () {
        if (!$('#switchMiner').hasClass('disabled')) {
            $('.switch_miner_menu').toggle();
            ps_switch_miner.update();
        }
    });
    $('#shutdownMachine').click(function () {
        if (!$('#shutdownMachine').hasClass('disabled')) {
            $('.actions_submenu').toggle();
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".switch_miner_menu");
        if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#switchMiner").is(e.target)) && (!$(".icon.switch").is(e.target)) && !$(".switch_miner_menu .search_el").is(e.target) && !$(".switch_miner_menu .search_el .icon.search").is(e.target) && !$("#switchMiner").is(e.target) && e.target.localName != 'html') {
            container.hide();
        }
    });
    $('#searchSwitch').keyup(function () {
        var searchQuery = $(this).val();
        if (searchQuery == '') {
            $('.switch_miner_menu .frame .row').show();
            ps_switch_miner.update();
        } else {
            searchQuery = searchQuery.toLowerCase();
            $('.switch_miner_menu .frame .row').each(function () {
                var profileStr = $(this).text();
                if (profileStr != '') {
                    profileStr = profileStr.toLowerCase();
                    profileStr = profileStr.replace('<small>', '----');
                    profileStr = profileStr.replace('</small>', '');
                    if (profileStr.indexOf(searchQuery) != -1) {
                        $(this).show();
                    } else {
                        $(this).hide();
                    }
                }
            });
            ps_switch_miner.update();
        }
    });
    $('#takeAction').click(function () {
        $('.action_menu').toggle();
        $('.change_worker_menu').hide();
        $('.clocktune_menu').hide();
        $('.switch_miner_menu').hide();
    });
    var notificationOpened = 0;
    var notificationClicked = Math.round((new Date()).getTime() / 1000);
    $('#notificationsButton').click(function () {
        // $('#worker_actions').fadeOut();
        if (notificationOpened == 0) {
            $('.activity_menu').show();
            var activityListHeight = $('.activity_menu .frame').height();
            if (activityListHeight < 390) {
                $('.activity_menu').addClass('small_height');
            } else {
                $('.activity_menu').removeClass('small_height');
            }
            if (typeof ps != 'undefined') {
                ps.update();
            }
            notificationOpened = 1;
        } else {
            $('.activity_menu').hide();
            notificationOpened = 0;
            notificationClicked = Math.round((new Date()).getTime() / 1000);
            localStorage.setItem(workerName + "_alert", notificationClicked);
            $('#notificationsButton .signal_new').hide();
            $('#activityList .row').removeClass('unread');
            favicon.reset();
        }
    });
    $(document).mousedown(function (e) {
        if (notificationOpened == 1) {
            var container = $(".activity_menu");
            if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#notificationsButton").is(e.target) && !$(".icon.alerts").is(e.target) && !$(".signal_new").is(e.target)) && e.target.localName != 'html') {
                container.hide();
                notificationOpened = 0;
                notificationClicked = Math.round((new Date()).getTime() / 1000);
                localStorage.setItem(workerName + "_alert", notificationClicked);
                $('#notificationsButton .signal_new').hide();
                $('#activityList .row').removeClass('unread');
                favicon.reset();
            }
        }
    });
    var diagnosticOpened = 0;
    $('#openDiagnostic').click(function () {
        if (diagnosticOpened == 0) {
            $('.diagnostic_menu').show();
            diagnosticOpened = 1;
            $.post('/diagnostic', {'getAudit': workerName}, function (data) {
                $('.diagnostic_menu .frame').html(data);
                if ($('.diagnostic_menu').length > 0) {
                    if (typeof ps_diagnostic != 'undefined') {
                        ps_diagnostic.destroy();
                    }
                    ps_diagnostic = new PerfectScrollbar('.diagnostic_menu .frame .report_results .frame', {
                        wheelSpeed: 1,
                        wheelPropagation: false,
                        minScrollbarLength: 30,
                        suppressScrollX: true
                    });
                    ps_diagnostic.update();
                }
                ;
            });
        } else {
            $('.report_results .frame').html('<div class="loader"></div>');
            $('.diagnostic_menu').hide();
            diagnosticOpened = 0;
        }
    });
    $(document).mousedown(function (e) {
        if (diagnosticOpened == 1) {
            var container = $(".diagnostic_menu");
            if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#openDiagnostic").is(e.target) && !$(".icon.diagnostic").is(e.target)) && e.target.localName != 'html') {
                $('.report_results .frame').html('<div class="loader"></div>');
                container.hide();
                diagnosticOpened = 0;
            }
        }
    });
    window.addEventListener("keydown", function (event) {
        if ($(".clocktune_popup input").is(":focus") == false && $("#edit_note").is(":hidden") && $('.cc-pjpe').is(':focus') == false && $('.tasks_menu').is(':visible') == false && $('#search_clocktune').is(':visible') == false && $('#searchSwitch').is(':visible') == false) {
            if (event.defaultPrevented) {
                return;
            }
            switch (event.key) {
                case "ArrowLeft":
                    preloaderShow();
                    window.location.href = $('.content .container #previousWorker').attr('href');
                    break;
                case "ArrowRight":
                    preloaderShow();
                    window.location.href = $('.content .container #nextWorker').attr('href');
                    break;
                default:
                    return;
            }
            event.preventDefault();
        }
    }, true);
    $('.close,.close_popup').click(function () {
        $('.popupbackground').fadeOut('fast');
        $('.popup').fadeOut('fast');
        $('#consoleWin iframe').attr('src','')
        // $('#imgWin_1').attr('src','./images/2vmd.png')
        $('#imgWin_1').attr('src','#')
        $('#imgWin_1').hide()
        $('#imgWin_2').show()
        clearTimeout(myErrImgT)
    });
    $('#worker_actions_hamburger').click(function () {
        $('#worker_actions').fadeToggle('fast');
        $('.clocktune_menu').hide()
        $('.activity_menu').hide()
    });
    var show = '';
    $('.filter_el').click(function () {
        $('.filter_el').children('.radio').removeClass('selected');
        $(this).children('.radio').addClass('selected');
        var oldPlotLines = [];
        $.each(chartHashrate.xAxis[0].plotLinesAndBands, function (i, v) {
            oldPlotLines.push(v.id);
        });
        $.each(oldPlotLines, function (i, v) {
            chartHashrate.xAxis[0].removePlotLine(v);
        });
        $.each(chartHashrate.xAxis[0].series, function (i, v) {
            if (typeof chartHashrate.series != 'undefined' && typeof chartHashrate.series[i] != 'undefined' && typeof chartHashrate.series[i].name != 'undefined' && chartHashrate.series[i].name == _('Alerts')) {
                chartHashrate.series[i].remove();
            }
        });
        if (show != $(this).attr('data-show')) {
            show = $(this).attr('data-show');
            var notifications = jQuery.parseJSON(globalNotifications);
            dataAlerts = [];
            dataAlertsDescriptions = {};
            timestampsArray = [];
            if (notifications != null) {
                notifications.sort(function (a, b) {
                    return b[0] - a[0];
                })
                if (notifications.length > 0) {
                    var notificationLabel;
                    var notificationDescription = '';
                    for (var i = 0; i < notifications.length; i++) {
                        if (notifications[i] != null) {
                            var notificationsData = notifications[i][1];
                            notificationLabel = '';
                            notificationDescription = '';
                            if (notificationsData[0] == 'pauseTriggers' && show == "triggers") {
                                if (typeof notificationsData[1][0] != 'undefined') {
                                    if (notificationsData[1][0] == "0") {
                                        notificationLabel = _('Resumed triggers');
                                        notificationDescription = _("Worker will continue to receive triggers" + '.');
                                    } else if (notificationsData[1][0] == "1") {
                                        notificationLabel = _('Paused triggers');
                                        notificationDescription = _("Triggers were paused permanently or until you turn them back on") + '.';
                                    } else {
                                        var seconds = notificationsData[1][0];
                                        var timeStr = '';
                                        switch (seconds) {
                                            case '30':
                                                timeStr = _('30 minutes');
                                                break;
                                            case '60':
                                                timeStr = _('1 hour');
                                                break;
                                            case '360':
                                                timeStr = _('6 hours');
                                                break;
                                            case '720':
                                                timeStr = _('12 hours');
                                                break;
                                            case '1440':
                                                timeStr = _('24 hours');
                                                break;
                                            default:
                                                timeStr = _('24 hours');
                                                break;
                                        }
                                        notificationLabel = _('Paused triggers');
                                        notificationDescription = _('Triggers were paused for') + ' ' + timeStr + '.';
                                    }
                                }
                            } else if (notificationsData[0] == 'triggerTemp' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Fans') != -1) {
                                    notificationLabel = _('Temperature trigger - Change fans');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and fans were set to') + ' ' + action + '%.';
                                } else if (action.indexOf('Shutdown') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Shut down');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Reboot');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Temperature trigger - Power cycle');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Restart');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Start mining');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Stop mining');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Webhook');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1 && show == "triggers") {
                                    notificationLabel = _('Temperature trigger - Execute');
                                    notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('ClockTune') != -1) {
                                    notificationLabel = _('Temperature trigger - ClockTune');
                                    notificationDescription = _("Temperature reached") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerMem' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Fans') != -1) {
                                    notificationLabel = _('Memory temperature trigger - Change fans');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and fans were set to') + ' ' + action + '%.';
                                } else if (action.indexOf('Shutdown') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Shut down');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Reboot');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Memory temperature trigger - Power cycle');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Restart');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Start mining');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Stop mining');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Webhook');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1 && show == "triggers") {
                                    notificationLabel = _('Memory temperature trigger - Execute');
                                    notificationDescription = _("Memory temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('ClockTune') != -1) {
                                    notificationLabel = _('Memory temperature trigger - ClockTune');
                                    notificationDescription = _("Memory temperature reached") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerGpuCount' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Shut down');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Reboot');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Power cycle');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Stop') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Stop mining');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Webhook');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1 && show == "triggers") {
                                    notificationLabel = _('GPU count trigger - Execute');
                                    notificationDescription = _("The number of detected GPUs was") + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerUnresponsive' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Email') != -1) {
                                    notificationLabel = _('Unresponsive trigger');
                                    notificationDescription = _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('so we have sent you an e-mail') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Unresponsive trigger - Webhook');
                                    notificationDescription = _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Unresponsive trigger - Execute');
                                    notificationDescription = _('Worker was unresponsive for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerTime' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (notificationsData[1][0].indexOf(':') == -1) {
                                    notificationsData[1][0] = notificationsData[1][0] + ':00';
                                }
                                if (action.indexOf('Fans') != -1) {
                                    action = action.replace('Fans ', '');
                                    notificationLabel = _('Time trigger - Change fans');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and fans were set to') + ' ' + action + '%.';
                                } else if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Time trigger - Shut down');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Time trigger - Reboot');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Time trigger - Restart');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('ClockTune') != -1) {
                                    notificationLabel = _('Time trigger - ClockTune');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and new ClockTune profile was applied') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Time trigger - Start mining');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Time trigger - Stop mining');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Time trigger - Webhook');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Time trigger - Execute');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Time trigger - Template');
                                    notificationDescription = _("Time was") + ' ' + notificationsData[1][0] + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerIdle' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Idle trigger - Shut down');
                                    notificationDescription = _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Idle trigger - Reboot');
                                    notificationDescription = _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Idle trigger - Restart');
                                    notificationDescription = _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Idle trigger - Webhook');
                                    notificationDescription = _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Idle trigger - Execute');
                                    notificationDescription = _('Worker was idle for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerInactive' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Inactive trigger - Shut down');
                                    notificationDescription = _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Inactive trigger - Reboot');
                                    notificationDescription = _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Inactive trigger - Restart');
                                    notificationDescription = _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Inactive trigger - Webhook');
                                    notificationDescription = _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Inactive trigger - Execute');
                                    notificationDescription = _('Worker was inactive for') + ' ' + notificationsData[1][0] + 'min ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerHashrate' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Hashrate trigger - Shut down');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Hashrate trigger - Reboot');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Hashrate trigger - Restart');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Hashrate trigger - Start mining');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Hashrate trigger - Stop mining');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Hashrate trigger - Webhook');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Hashrate trigger - Execute');
                                    notificationDescription = _('Hashrate dropped for') + ' ' + Math.abs(notificationsData[1][0]) + '% ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerEfficiency' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Efficiency trigger - Shut down');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Efficiency trigger - Reboot');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Efficiency trigger - Restart');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Efficiency trigger - Start mining');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Efficiency trigger - Stop mining');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Efficiency trigger - Webhook');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Efficiency trigger - Execute');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Efficiency trigger - Template');
                                    notificationDescription = _('Efficiency dropped to') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerConsumption' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Consumption trigger - Shut down');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Consumption trigger - Reboot');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Consumption trigger - Power cycle');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Consumption trigger - Restart');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Consumption trigger - Start mining');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Consumption trigger - Stop mining');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Consumption trigger - Webhook');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Consumption trigger - Execute');
                                    notificationDescription = _('Consumption dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerConsumptionIncrease' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Consumption trigger - Shut down');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Consumption trigger - Reboot');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Consumption trigger - Power cycle');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Consumption trigger - Restart');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Consumption trigger - Start mining');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Consumption trigger - Stop mining');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Consumption trigger - Webhook');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Consumption trigger - Execute');
                                    notificationDescription = _('Consumption increased by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerRejected' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Shut down');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Reboot');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Power cycle');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Restart');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Start mining');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Stop mining');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Webhook');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Execute');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Rejected shares trigger - Template');
                                    notificationDescription = _('Number of rejected shares was') + ' ' + notificationsData[1][0] + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerShareCount' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Shares count trigger - Shut down');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Shares count trigger - Reboot');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Shares count trigger - Power cycle');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Shares count trigger - Restart');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Shares count trigger - Start mining');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Shares count trigger - Stop mining');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Shares count trigger - Webhook');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Shares count trigger - Execute');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Shares count trigger - Template');
                                    notificationDescription = _('Shares were the same for') + ' ' + notificationsData[1][0] + ' ' + _('minutes') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerPoolError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Pool error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Pool error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Pool error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Pool error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Pool error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Pool error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Pool error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Pool error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Pool error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('pool errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerConfigError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Config error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Config error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Config error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Config error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Config error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Config error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Config error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Config error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Config error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('config errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerAuthError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Auth error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Auth error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Auth error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Auth error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Auth error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Auth error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Auth error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Auth error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Auth error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('auth errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerDriverError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Driver error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Driver error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Driver error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Driver error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Driver error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Driver error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Driver error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Driver error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Driver error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('driver errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerGpuError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('GPU error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('GPU error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('GPU error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('GPU error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('GPU error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('GPU error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('GPU error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('GPU error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('GPU error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('GPU errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerClientError' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Shutdown') != -1) {
                                    notificationLabel = _('Client error trigger - Shut down');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was shut down') + '.';
                                } else if (action.indexOf('Reboot') != -1) {
                                    notificationLabel = _('Client error  trigger - Reboot');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and the machine was rebooted') + '.';
                                } else if (action.indexOf('Power cycle') != -1) {
                                    notificationLabel = _('Client error  trigger - Power cycle');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and machine got power cycle') + '.';
                                } else if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Client error  trigger - Restart');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining client was restarted') + '.';
                                } else if (action.indexOf('Start') != -1) {
                                    notificationLabel = _('Client error  trigger - Start mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining started') + '.';
                                } else if (action.indexOf('Stop') != -1) {
                                    notificationLabel = _('Client error  trigger - Stop mining');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and mining stopped') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Client error  trigger - Webhook');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Client error  trigger - Execute');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and script was executed') + '.';
                                } else if (action.indexOf('Template') != -1) {
                                    notificationLabel = _('Client error trigger - Template');
                                    notificationDescription = notificationsData[1][0] + ' ' + _('client errors detected') + ' ' + _('and config template was loaded') + '.';
                                }
                            } else if (notificationsData[0] == 'triggerEarnings' && show == "triggers") {
                                var action = notificationsData[1][1];
                                if (action.indexOf('Restart') != -1) {
                                    notificationLabel = _('Earnings trigger - Restart');
                                    notificationDescription = _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('so we have restarted profit switch') + '.';
                                } else if (action.indexOf('Webhook') != -1) {
                                    notificationLabel = _('Earnings trigger - Webhook');
                                    notificationDescription = _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and webhook fired') + '.';
                                } else if (action.indexOf('Execute') != -1) {
                                    notificationLabel = _('Earnings trigger - Execute');
                                    notificationDescription = _('Earnings dropped by') + ' ' + Math.round(Math.abs(notificationsData[1][0])) + '% ' + _('and script was executed') + '.';
                                }
                            } else if (notificationsData[0] == 'scheduler' && show == "scheduler") {
                                if (notificationsData[1] == 'Start') {
                                    notificationLabel = _('Scheduler has started');
                                } else if (notificationsData[1] == 'End') {
                                    notificationLabel = _('Scheduler has ended');
                                }
                            } else if (notificationsData[0] == 'pauseAlerts' && show == "alerts") {
                                if (typeof notificationsData[1][0] != 'undefined') {
                                    if (notificationsData[1][0] == "0") {
                                        notificationLabel = _('Resumed alerts');
                                        notificationDescription = _("You will continue to receive alerts" + '.');
                                    } else if (notificationsData[1][0] == "1") {
                                        notificationLabel = _('Paused alerts');
                                        notificationDescription = _("Alerts were paused permanently or until you turn them back on") + '.';
                                    } else {
                                        var seconds = notificationsData[1][0];
                                        var timeStr = '';
                                        switch (seconds) {
                                            case '30':
                                                timeStr = _('30 minutes');
                                                break;
                                            case '60':
                                                timeStr = _('1 hour');
                                                break;
                                            case '360':
                                                timeStr = _('6 hours');
                                                break;
                                            case '720':
                                                timeStr = _('12 hours');
                                                break;
                                            case '1440':
                                                timeStr = _('24 hours');
                                                break;
                                            default:
                                                timeStr = _('24 hours');
                                                break;
                                        }
                                        notificationLabel = _('Paused alerts');
                                        notificationDescription = _('Alerts were paused for') + ' ' + timeStr + '.';
                                    }
                                }
                            } else if (notificationsData[0] == 'alertTemp' && show == "alerts") {
                                notificationLabel = _('High temperature');
                                notificationDescription = _("Temperature reached") + ' ' + convertTemperature(notificationsData[1][0]) + temperature + '.';
                            } else if (notificationsData[0] == 'alertEfficiency' && show == "alerts") {
                                notificationLabel = _('Efficiency drop');
                                notificationDescription = _('Efficiency dropped to') + ' ' + notificationsData[1][0] + '%';
                            } else if (notificationsData[0] == 'alertOffline' && show == "alerts") {
                                notificationLabel = _('Offline');
                                notificationDescription = _('Worker went offline');
                            } else if (notificationsData[0] == 'alertInactive' && show == "alerts") {
                                notificationLabel = _('Inactive');
                                notificationDescription = _('Worker became inactive');
                            } else if (notificationsData[0] == 'alertOnline' && show == "alerts") {
                                notificationLabel = _('Online');
                                notificationDescription = _('Worker came back online');
                            } else if (notificationsData[0] == 'alertAsic' && show == "alerts") {
                                notificationLabel = _('ASIC alert');
                            } else if (notificationsData[0] == 'alertHashrate' && show == "alerts") {
                                notificationLabel = _('Hashrate drop');
                                notificationDescription = _('Hashrate dropped by') + ' ' + notificationsData[1][0] + '%.';
                            } else if (notificationsData[0] == 'alertConsumptionUp' && show == "alerts") {
                                notificationLabel = _('Consumption increased');
                                notificationDescription = _('Consumption increased by') + ' ' + notificationsData[1][0] + '%.';
                            } else if (notificationsData[0] == 'alertConsumptionDown' && show == "alerts") {
                                notificationLabel = _('Consumption drop');
                                notificationDescription = _('Consumption dropped by') + ' ' + notificationsData[1][0] + '%.';
                            } else if (notificationsData[0] == 'switch' && show == "profit_switch") {
                                notificationLabel = _('Profit switch');
                                notificationDescription = notificationsData[1][0] + ' → ' + notificationsData[1][1];
                            } else if (notificationsData[0] == 'changeProfitSwitch' && show == "profit_switch") {
                                if (notificationsData[1][0] == 'enabled') {
                                    notificationLabel = _('Profit switch enabled');
                                } else if (notificationsData[1][0] == 'disabled' && show == "profit_switch") {
                                    notificationLabel = _('Profit switch disabled');
                                } else if (notificationsData[1][0] == 'updated' && show == "profit_switch") {
                                    notificationLabel = _('Profit switch updated');
                                }
                            } else if (notificationsData[0] == 'clientChangeGpu' && show == "config_changes") {
                                notificationLabel = _('Mining client changed (GPU)');
                                notificationDescription = _('Now mining with') + ' ' + notificationsData[1][0] + '.';
                            } else if (notificationsData[0] == 'clientChangeCpu' && show == "config_changes") {
                                notificationLabel = _('Mining client changed (CPU)');
                                if (notificationsData[1][0] == '') {
                                    notificationDescription = '';
                                } else {
                                    notificationDescription = _('Now mining with') + ' ' + notificationsData[1][0] + '.';
                                }
                            } else if (notificationsData[0] == 'manual' && show == "manual_actions") {
                                if (notificationsData[1][0] == 'shutdown') {
                                    notificationLabel = _('Manual shut down');
                                } else if (notificationsData[1][0] == 'powercycle') {
                                    notificationLabel = _('Power cycle');
                                } else if (notificationsData[1][0] == 'restart') {
                                    notificationLabel = _('Manual restart');
                                } else if (notificationsData[1][0] == 'reboot') {
                                    notificationLabel = _('Manual reboot');
                                } else if (notificationsData[1][0] == 'stop') {
                                    notificationLabel = _('Mining stopped');
                                } else if (notificationsData[1][0] == 'start') {
                                    notificationLabel = _('Mining started');
                                }else if (notificationsData[1][0] == 'reMiner') {
                                    notificationLabel = _('Mining reMiner');
                                }else if (notificationsData[1][0] == 'enable') {
                                    notificationLabel = _('Mining enable');
                                }
                            } else if (notificationsData[0] == 'configChange' && show == "config_changes") {
                                notificationLabel = _mx2('Config updated');
                                if (notificationsData[1][0].indexOf('wallet') != -1) {
                                    notificationLabel = _('Updated wallet address');
                                    notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                } else if (notificationsData[1][0].indexOf('pool') != -1) {
                                    notificationLabel = _('Updated pool address');
                                    notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                } else {
                                    if (typeof notificationsData[1][1] != 'undefined') {
                                        notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                    }
                                }
                            }else if (notificationsData[0] == 'consoleAlert' && show == "console_errors") {
                                notificationLabel = _mx2('Error report');
                                 notificationDescription=notificationsData[1][3]
                                // if (notificationsData[1][0].indexOf('wallet') != -1) {
                                //     notificationLabel = _('Updated wallet address');
                                //     notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                // } else if (notificationsData[1][0].indexOf('pool') != -1) {
                                //     notificationLabel = _('Updated pool address');
                                //     notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                // } else {
                                //     if (typeof notificationsData[1][1] != 'undefined') {
                                //         notificationDescription = _('Changed by') + ' ' + notificationsData[1][1];
                                //     }
                                // }
                            } else if (notificationsData[0] == 'clocktune' && show == "config_changes") {
                                notificationLabel = _('ClockTune updated');
                            } else if (notificationsData[0] == 'consoleAlert' && show == "console_errors") {
                                if (notificationsData[1][0].indexOf('Driver error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    if (notificationsData[1][2] != '') {
                                        notificationLabel = notificationsData[1][2] + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    } else {
                                        notificationLabel = _('Driver error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    }
                                    if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                        var gpuList = String(notificationsData[1][1]).split(",");
                                        var countGPUs = 0;
                                        var GPUstring = '';
                                        jQuery.each(gpuList, function (i, gpuId) {
                                            GPUstring += '#' + gpuId + ', ';
                                            countGPUs++;
                                        });
                                        if (countGPUs > 0) {
                                            GPUstring = GPUstring.substr(0, GPUstring.length - 2);
                                            notificationDescription = notificationDescription + ': ' + GPUstring;
                                        }
                                    }
                                } else if (notificationsData[1][0].indexOf('Pool error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('Pool error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                } else if (notificationsData[1][0].indexOf('System message') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('System message') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                } else if (notificationsData[1][0].indexOf('Config error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('Config error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                } else if (notificationsData[1][0].indexOf('GPU error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('GPU error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                    if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                        var gpuList = String(notificationsData[1][1]).split(",");
                                        var countGPUs = 0;
                                        var GPUstring = '';
                                        jQuery.each(gpuList, function (i, gpuId) {
                                            GPUstring += '#' + gpuId + ', ';
                                            countGPUs++;
                                        });
                                        if (countGPUs > 0) {
                                            GPUstring = GPUstring.substr(0, GPUstring.length - 2);
                                            notificationDescription = notificationDescription + ': ' + GPUstring;
                                        }
                                    }
                                } else if (notificationsData[1][0].indexOf('Mining client error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('Mining client error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                    if (typeof notificationsData[1][1] != 'undefined' && notificationsData[1][1] != '') {
                                        var gpuList = String(notificationsData[1][1]).split(",");
                                        var countGPUs = 0;
                                        var GPUstring = '';
                                        jQuery.each(gpuList, function (i, gpuId) {
                                            GPUstring += '#' + gpuId + ', ';
                                            countGPUs++;
                                        });
                                        if (countGPUs > 0) {
                                            GPUstring = GPUstring.substr(0, GPUstring.length - 2);
                                            notificationDescription = notificationDescription + ': ' + GPUstring;
                                        }
                                    }
                                } else if (notificationsData[1][0].indexOf('Authorization error') != -1) {
                                    var errorsCount = notificationsData[1][0].split(" (");
                                    errorsCount = errorsCount[1];
                                    errorsCount = errorsCount.replace(')', '');
                                    notificationLabel = _('Auth error') + ' (' + getRepeatedTimes(errorsCount) + ')';
                                    if (notificationsData[1][2] != '') {
                                        notificationDescription = notificationsData[1][2];
                                    }
                                }
                            }
                            if (notificationLabel != '') {
                                if (dataAlertsDescriptions[(notifications[i][0]) * 1000] == null) {
                                    dataAlertsDescriptions[(notifications[i][0]) * 1000] = [];
                                }
                                var alreadyInArray = 0;
                                var currentEl = [notificationLabel, notificationDescription].toString();
                                $.each(dataAlertsDescriptions[(notifications[i][0]) * 1000], function (arrayIndex, arrayData) {
                                    if (currentEl == arrayData.toString()) {
                                        alreadyInArray = 1;
                                    }
                                });
                                if (alreadyInArray == 0) {
                                    chartHashrate.xAxis[0].addPlotLine({
                                        color: chartTitle,
                                        label: {
                                            text: notificationLabel,
                                            x: 6,
                                            y: 0,
                                            style: {
                                                "color": chartTitle,
                                                "fontSize": "12px",
                                                "fontWeight": fontWeightBold
                                            }
                                        },
                                        width: 2,
                                        value: (notifications[i][0]) * 1000 - 100,
                                        zIndex: 4
                                    });
                                    dataAlertsDescriptions[(notifications[i][0]) * 1000].push([notificationLabel, notificationDescription]);
                                }
                            }
                        }
                    }
                    $.each(dataAlertsDescriptions, function (timestamp, timestampData) {
                        timestampsArray.push(parseInt(timestamp));
                    });
                    timestampsArray.sort();
                    $.each(timestampsArray, function (timestampIndex, timestampValue) {
                        dataAlerts.push([parseInt(timestampValue) - 100, 10]);
                    });
                    chartHashrate.addSeries({
                        name: _('Alerts'),
                        type: 'spline',
                        data: dataAlerts,
                        yAxis: 7,
                        connectNulls: false,
                        animation: false,
                        dataGrouping: {enabled: false},
                        tooltip: {valueDecimals: 0, valueSuffix: '', shared: false},
                        events: {
                            mouseover: {
                                lineWidth: 0,
                                lineWidthPlus: 0,
                                shadow: false,
                                fillOpacity: 0,
                                fillColor: 'rgba(0,0,0,0)',
                                color: 'rgba(0,0,0,0)'
                            }
                        },
                        states: {
                            normal: {
                                enabled: true,
                                lineWidth: 0,
                                lineWidthPlus: 0,
                                shadow: false,
                                marker: {
                                    enabled: true,
                                    lineWidth: 0,
                                    lineColor: 'rgba(0,0,0,0)',
                                    lineWidthPlus: 0,
                                    symbol: 'circle'
                                }
                            },
                            hover: {
                                enabled: true,
                                lineWidth: 0,
                                lineWidthPlus: 0,
                                shadow: false,
                                fillColor: 'rgba(0,0,0,0)',
                                color: 'rgba(0,0,0,0)',
                                marker: {
                                    enabled: true,
                                    lineWidth: 0,
                                    lineColor: 'rgba(0,0,0,0)',
                                    lineWidthPlus: 0,
                                    symbol: 'circle'
                                }
                            }
                        },
                        lineWidth: 0,
                        fillOpacity: 0,
                        fillColor: 'rgba(0,0,0,0)',
                        color: chartTitle,
                        showInNavigator: false,
                        showInLegend: false,
                        shadow: false,
                        dataLabels: {enabled: false},
                        marker: {
                            enabled: true,
                            lineWidth: 0,
                            lineColor: 'rgba(0,0,0,0)',
                            lineWidthPlus: 0,
                            symbol: 'circle'
                        }
                    }, false);
                    chartHashrate.redraw();
                }
            }
        } else {
            show = '';
            $(this).children('.radio').removeClass('selected');
        }
    });
    $('.fixed_fans_tab').click(function () {
        $(this).addClass('selected');
        $('.auto_fans_tab').removeClass('selected');
        $('.fixed_fans').show();
        $('.auto_fans').hide();
    });
    $('.auto_fans_tab').click(function () {
        $(this).addClass('selected');
        $('.fixed_fans_tab').removeClass('selected');
        $('.auto_fans').show();
        $('.fixed_fans').hide();
    });
    $('.clocktune_popup input').keyup(function (e) {
        var code = e.keyCode || e.which;
        if (code != 37 && code != 39) {
            var start = this.selectionStart, end = this.selectionEnd;
            if ($('.fans').is(':visible') == false) {
                this.value = this.value.replace(/[^0-9SKIPskip\+-]/g, '').replace(/^\s+/, "");
                this.setSelectionRange(start, end);
            } else {
                this.value = this.value.replace(/\,/g, ' ').replace(/[^ 0-9SKIPskip\+-]/g, '').replace(/\s\s+/g, ' ').replace(/^\s+/, "");
                this.setSelectionRange(start, end);
            }
        }
    });
    var modGpuId = '';
    var modGpuBus = '';
    $('.clocktune_popup .green').click(function () {
        if (typeof modGpuId == 'undefined') {
            modGpuId = 'all';
            modGpuBus = '';
        }
        if ($(this).hasClass('saveRestart')) {
            var saveType = 'restart';
        } else if($(this).hasClass('saveChanges')){
            var saveType = 'download';
        }else {
            $('.fixed_frame').find('.powerlimit').val('');
            $('.fixed_frame').find('.coreclock').val('');
            $('.fixed_frame').find('.memoryclock').val('');
            $('.fixed_frame').find('.Mtemperature').val('');
            $('.fixed_frame').find('.Mvoltage').val('');
            $('.fixed_frame').find('.Cvoltage').val('');
            $('.fixed_frame').find('.fans').val('')
            return
        }
        var gpusCount = ($('#table_gpus tr').length) - 1;
        var systemOC = $('.clocktune_popup').data('system');
        var typeOC = $('.clocktune_popup').data('type');
        var $this = $(this);
        if ($(this).hasClass('disabled')) {
            return false;
        }
        $(this).addClass('disabled');
        $('.clocktune_popup .checkmark').hide();
        $('.clocktune_popup .circle-loader').removeClass('load-complete');
        $('.clocktune_popup .circle-loader').show();
        var oc = {};
        var arrayString = '';
        if (systemOC == 'msos') {
            oc[typeOC + 'linux'] = {};
            arrayString = typeOC + 'linux';
        } else {
            oc[typeOC] = {};
            arrayString = typeOC;
        }
        arrayString="nvidia"
        if (!myAllLock) {
            oc[arrayString]['fan'] = $('.fan').val().trim().replace(/,/g, ' ');
            if ($('.auto_fans_tab').hasClass('selected')) {
                oc[arrayString]['fan'] = '';
                oc[arrayString]['power'] = $('.powerlimit').val().trim();
                oc[arrayString]['temp'] = $('.Mtemperature').val().trim();
                oc[arrayString]['core'] = $('.coreclock').val().trim();
                oc[arrayString]['mvolt'] = $('.Mvoltage').val().trim();
                oc[arrayString]['cvolt'] = $('.Cvoltage').val().trim();
                oc[arrayString]['mem'] = $('.memoryclock').val().trim();
            }
        } else {
            oc[arrayString]['fan'] = $('.fan').data('oc');
            if ($('.auto_fans_tab').hasClass('selected')) {
                oc[arrayString]['fan'] = '';
                oc[arrayString]['fanMin'] = $('.fanMin').data('oc');
                oc[arrayString]['fanMax'] = $('.fanMax').data('oc');
                oc[arrayString]['targetTemp'] = $('.targetTemp').data('oc');
                if (typeof $('.memTemp').data('oc') != 'undefined') {
                    oc[arrayString]['memTemp'] = $('.memTemp').data('oc');
                } else {
                    oc[arrayString]['memTemp'] = '';
                }
            }
        }
        // $(".clocktune_popup input[type=text]").each(function () {
        //     if ($(this).is(":visible")) {
        //         if ($(this).attr('class').indexOf('Temp') < 0 && $(this).attr('class').indexOf('fan') < 0) {
        //             oc[arrayString][$(this).attr('class').replace('value', '').replace(' ', '')] = $(this).val().trim().replace(/,/g, ' ');
        //         }
        //     }
        // });
        oc[arrayString]['fan'] = $('.fans').val().trim().replace(/,/g, ' ');
        oc[arrayString]['power'] = $('.powerlimit').val().trim();
        oc[arrayString]['temp'] = $('.Mtemperature').val().trim();
        oc[arrayString]['core'] = $('.coreclock').val().trim();
        oc[arrayString]['mvolt'] = $('.Mvoltage').val().trim();
        oc[arrayString]['cvolt'] = $('.Cvoltage').val().trim();
        oc[arrayString]['mem'] = $('.memoryclock').val().trim();
        var nonce = $('#nonce').val();

        $.post('/clocktune', {
            bus: modGpuBus,
            workerName: workerNameCode,
            gpu: modGpuId,
            gpus: gpusCount,
            oc: saveType=='clear'?'':JSON.stringify(oc),
            nonce: nonce,
            "save": saveType
        }, function (response) {
            var obj = jQuery.parseJSON(response);
            $(".clocktune_popup input[type=text]").each(function () {
                var valueName = $(this).attr('class').replace('value', '').replace(' ', '');
                var valueRepopulate = obj[valueName];
                if (valueName == 'targetTemp') {
                    valueRepopulate = convertTemperature(obj[valueName]);
                }
                if (valueName == 'memTemp') {
                    valueRepopulate = convertTemperature(obj[valueName]);
                }
                $(this).data('oc', valueRepopulate);
            });
            loadRealTimeData()
            $('.clocktune_popup .circle-loader').addClass('load-complete');
            $('.clocktune_popup .checkmark').show();
            $('.clocktune_popup .button').removeClass('disabled');
        });
    });
    var clocktune_popup_visible = 0;
    var clocktune_popup_visible_id = -1;

    $('#table_gpus').on('click', '.tuningButtons .clocktune', function () {
        $('.clocktune_popup .checkmark').hide();
        $('.clocktune_popup .circle-loader').removeClass('load-complete');
        $('.clocktune_popup .circle-loader').hide();
        modGpuId = $(this).data('gpu');
        modGpuBus = $(this).data('bus');
        var clickedGpu = modGpuId;
        if (typeof modGpuId == 'undefined') {
            clickedGpu = 'all';
            myAllLock=false
            $('.pstate_row').show();
        } else {
            myAllLock=true
            $('.pstate_row').hide();
        }
        if (clickedGpu != clocktune_popup_visible_id) {
            $('.clocktune_popup').hide();
            $('.clocktune_popup .fans').show();
            $('.clocktune_popup').addClass('short');
            $(".clocktune_popup input[type=text]").each(function () {
                if (typeof $(this).data('oc') != 'undefined') {
                    var dataOc = String($(this).data('oc'));
                    if (dataOc.indexOf(' ') >= 0 && typeof modGpuId != 'undefined') {
                        dataOc = dataOc.split(' ');
                        if (typeof dataOc[modGpuId] != 'undefined') {
                            dataOc = dataOc[modGpuId];
                        } else {
                            dataOc = dataOc[dataOc.length - 1];
                        }
                    } else if (typeof modGpuId == 'undefined') {
                        $('.clocktune_popup .fans').show();
                        $('.clocktune_popup').removeClass('short');
                    }
                    $(this).val(dataOc);
                }
            });
            if(myAllLock){
                if(myHardware!==undefined&&typeof myHardware[Number(modGpuId)].oc!="undefined"&&typeof myHardware[Number(modGpuId)].oc.nvidia!="undefined"){
                    setOcFrom(myHardware[Number(modGpuId)].oc.nvidia)
                }
            }else {
                setOcFrom(myOcHardware.nvidia)
            }
            var contentPosition = $('.content').offset();
            var thisPosition = $(this).offset();
            var pTop = thisPosition.top - contentPosition.top + 25;
            var pRight = $(window).width() - thisPosition.left - ($(window).width() - contentPosition.left - $('.content').width()) - 20;
            $('.clocktune_popup').css({top: pTop + 'px', right: pRight + 'px'});
            $('.clocktune_popup').show();
            if (typeof ps_clocktune_height != 'undefined' && ps_clocktune_height != null) {
                ps_clocktune_height.update();
            }
            clocktune_popup_visible = 1;
            clocktune_popup_visible_id = clickedGpu;
        } else {
            $('.clocktune_popup').hide();
            clocktune_popup_visible = 0;
            clocktune_popup_visible_id = -1;
            highlightedCard = -1;
            $('#table_gpus > tr').removeClass("highlight");
        }
        $('.gpu_count').html('');
        if (clickedGpu != 'all') {
            countingGPUs = 0;
            $('.gpu_count').attr('data-gpuid', _('GPU') + ' #' + clickedGpu);
        } else {
            countingGPUs = 1;
            $('.gpu_count').attr('data-gpuid', '');
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".clocktune_popup");
        if (!container.is(e.target) && container.has(e.target).length === 0 && (!$(".icon.clocktune").is(e.target)) && clocktune_popup_visible == 1 && e.target.localName != 'html') {
            container.hide();
            clocktune_popup_visible = 0;
            clocktune_popup_visible_id = -1;
            highlightedCard = -1;
            $('#table_gpus > tr').removeClass("highlight");
        }
    });
});

function getDayTimestamp(aTimestamp) {
    return aTimestamp - aTimestamp % (24 * 60 * 60 * 1000);
}

var graphFirstLoad = 1;
var lastMaxDate = 0;

function loadHashChart(apiData) {
    var extremesMin = 0;
    var extremesMax = 0;
    if (hashrateLocked == 0) {
        var chartFound = false;
        var seriesLength = chartHashrate.series.length;
        var apiHash = '';
        var i = 0;
        averages = {};
        poolData = {};
        acceptedSharesData = {};
        rejectedSharesData = {};
        mineralPools = {}
        devFeeArr={}
        var maxShares = 0;
        apiHash = $.parseJSON(apiData);
        var maxDate = 0;
        var axisDisplaySet = 0;
        var lastAcceptedShares = 0;
        var lastRejectedShares = 0;
        $.each(apiHash.resultsHash, function (workerCoin, data) {
            let minPoolSeep=[]
            let devFee=[]
            let devFeeAllx={}
            var colorCoin = getIcon(workerCoin);
            if (typeof apiHash.units === 'undefined' || typeof apiHash.units[workerCoin] === 'undefined') {
                var unit = 'MH';
            } else {
                var unit = apiHash.units[workerCoin];
            }
            data.sort(function (a, b) {
                return a[0] - b[0];
            });
            var currentDate = 0;
            var previousDate = 0;
            var avgCount = 0;
            for (var j = 0; j < data.length; j++) {
                // console.log('data',data)
                data[j][0] *= 100000;
                minPoolSeep.push([data[j][0],data[j][6]])
                devFee.push([data[j][0],data[j][7]])
                devFeeAllx[[data[j][0]]]=[data[j][2]]
                currentDate = getDayTimestamp(data[j][0]);
                if (previousDate == 0) {
                    previousDate = currentDate;
                }
                if (previousDate != currentDate) {
                    averages[workerCoin][previousDate] /= avgCount;
                    avgCount = 0;
                }
                if (averages[workerCoin] == null) averages[workerCoin] = {};
                if (averages[workerCoin][currentDate] == null) averages[workerCoin][currentDate] = 0;
                if (data[j][1] > 0 && (avgCount == 0 || (data[j][1] / (averages[workerCoin][currentDate] / avgCount) < 10 || (data[j][1] / (averages[workerCoin][currentDate] / avgCount) > 0 && avgCount < 3)))) {
                    averages[workerCoin][currentDate] += data[j][1];
                    avgCount++;
                }
                if (typeof poolData[workerCoin] == 'undefined') {
                    poolData[workerCoin] = {};
                }
                if (typeof poolData[workerCoin][data[j][0]] == 'undefined') {
                    poolData[workerCoin][data[j][0]] = {};
                }
                poolData[workerCoin][data[j][0]]['client'] = '';
                poolData[workerCoin][data[j][0]]['pool'] = '';
                if (typeof data[j][2] != 'undefined' && data[j][2] != '') {
                    poolData[workerCoin][data[j][0]]['client'] = data[j][2];
                }
                if (typeof data[j][3] != 'undefined' && data[j][3] != '') {
                    poolData[workerCoin][data[j][0]]['pool'] = data[j][3];
                }
                if (typeof acceptedSharesData[data[j][0]] == 'undefined') {
                    acceptedSharesData[data[j][0]] = 0;
                }
                if (typeof data[j][4] != 'undefined' && data[j][4] != '') {
                    acceptedSharesData[data[j][0]] = data[j][4];
                }
                if (typeof rejectedSharesData[data[j][0]] == 'undefined') {
                    rejectedSharesData[data[j][0]] = 0;
                }
                if (typeof data[j][5] != 'undefined' && data[j][5] != '') {
                    rejectedSharesData[data[j][0]] = data[j][5];
                    if (data[j][5] > 0) {
                        lastRejectedShares = data[j][5];
                        lastAcceptedShares = data[j][4];
                    }
                }
                if (data[j][5] > maxShares) {
                    maxShares = data[j][5];
                }
                previousDate = currentDate;
            }
            maxDate = data[data.length - 1][0];
            mineralPools[workerCoin]=minPoolSeep
            devFeeArr[workerCoin]=devFeeAllx
            averages[workerCoin][previousDate] /= avgCount;
            var adjusted = 0;
            var axisDisplay = 0;
            var exampleValue = 0;
            var divider = 1;
            for (var j = data.length - 1; j >= 0; j--) {
                if (data[j][1] > 0 && data[j][1] > exampleValue) {
                    exampleValue = data[j][1];
                }
            }
            if (axisDisplaySet == 0) {
                axisDisplay = 0;
                axisDisplaySet++;
            } else if (exampleValue < 10 && exampleValue != 0) {
                axisDisplay = 1;
                axisDisplaySet++;
            } else if (exampleValue < 100 && exampleValue != 0) {
                axisDisplay = 2;
                axisDisplaySet++;
            } else if (exampleValue < 500 && exampleValue != 0) {
                axisDisplay = 3;
                axisDisplaySet++;
            } else if (exampleValue < 1000 && exampleValue != 0) {
                axisDisplay = 4;
                axisDisplaySet++;
            } else {
                axisDisplay = 5;
                axisDisplaySet++;
            }
            if (graphFirstLoad == 1) {
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHashrate.series[ser].name == workerCoin + ' ' + _mx4('hashrate')) {
                        chartHashrate.series[ser].remove();
                    }
                    if (chartHashrate.series[ser].name == workerCoin + ' ' + _mx4('PoolSpeed')) {
                        chartHashrate.series[ser].remove();
                    }
                    if (chartHashrate.series[ser].name == workerCoin + ' ' + _mx('kernelDevfee')) {
                        chartHashrate.series[ser].remove();
                    }
                }
                chartHashrate.addSeries({
                    name: workerCoin + ' ' + _mx4('hashrate'),
                    data: data,
                    tooltip: {valueDecimals: 3, valueSuffix: unit + '/s'},
                    color: apiHash.colors[workerCoin]+'7f',
                    showInNavigator: true,
                    navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)', connectNulls: false},
                    dataLabels: {enabled: false},
                    yAxis: axisDisplay,
                    connectNulls: false,
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 150, 0, 0],
                        stops: [[0, Highcharts.Color(apiHash.colors[workerCoin]).setOpacity(0).get('rgba')], [1, Highcharts.Color(apiHash.colors[workerCoin]).setOpacity(0.5).get('rgba')]]
                    }
                }, false);
                chartHashrate.addSeries({
                    name: workerCoin + ' ' + _mx4('PoolSpeed'),
                    data: minPoolSeep,
                    tooltip: {valueDecimals: 3, valueSuffix: unit + '/s'},
                    color: apiHash.colors[workerCoin+'POOL']+'7f',
                    showInNavigator: true,
                    navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)', connectNulls: false},
                    dataLabels: {enabled: false},
                    yAxis: axisDisplay,
                    connectNulls: false,
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 150, 0, 0],
                        stops: [[0, Highcharts.Color(apiHash.colors[workerCoin+'POOL']).setOpacity(0).get('rgba')], [1, Highcharts.Color(apiHash.colors[workerCoin+'POOL']).setOpacity(0.5).get('rgba')]]
                    }
                }, false);

                chartHashrate.addSeries({
                    name: workerCoin+' '+_mx('kernelDevfee'),
                    data: devFee,
                    tooltip: {valueDecimals: 3, valueSuffix: unit + '/s'},
                    color: apiHash.colors[workerCoin+'DEVFEE']+'7f',
                    showInNavigator: true,
                    navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)', connectNulls: false},
                    dataLabels: {enabled: false},
                    yAxis: axisDisplay,
                    connectNulls: false,
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 150, 0, 0],
                        stops: [[0, Highcharts.Color(apiHash.colors[workerCoin+'DEVFEE']).setOpacity(0).get('rgba')], [1, Highcharts.Color(apiHash.colors[workerCoin+'DEVFEE']).setOpacity(0.5).get('rgba')]]
                    }
                }, false);
                // console.log('maxDate',maxDate)
                lastMaxDate = maxDate;
            } else {
                if (lastMaxDate != maxDate) {
                    for (let ser = (seriesLength - 1); ser > -1; ser--) {
                        if (chartHashrate.series[ser].name == workerCoin + ' ' + _mx4('hashrate')||chartHashrate.series[ser].name == workerCoin + ' ' + _mx4('PoolSpeed')||chartHashrate.series[ser].name == workerCoin + ' ' + _mx('kernelDevfee')) {
                            chartHashrate.series[ser].addPoint([maxDate, data[data.length - 1][1]]);
                            break
                        }
                    }
                }
            }
            i++;
            var extremes = chartHashrate.xAxis[0].getExtremes();
            if (extremes.max > extremesMax) {
                extremesMax = extremes.max;
            }
            if (extremes.min > extremesMin) {
                extremesMin = extremes.min;
            }
        });
        if ((lastAcceptedShares + lastRejectedShares) > 0 && (lastAcceptedShares / (lastAcceptedShares + lastRejectedShares)) < 0.98) {
            rejectedHeight = '20%';
            rejectedTop = '80%';
            if ((lastAcceptedShares / (lastAcceptedShares + lastRejectedShares)) < 0.8) {
                rejectedHeight = '40%';
                rejectedTop = '60%';
            }
            chartHashrate.yAxis[8].update({height: rejectedHeight, top: rejectedTop});
        } else {
            rejectedHeight = '4%';
            rejectedTop = '96%';
            chartHashrate.yAxis[8].update({height: rejectedHeight, top: rejectedTop});
        }
        powerData = apiHash.resultsPower;
        powerData.sort(function (a, b) {
            return a[0] - b[0];
        });
        var powerShow = 0;
        for (var j = 0; j < powerData.length; j++) {
            powerData[j][0] *= 100000;
            if (powerData[j][1] > 0) {
                powerShow = 1;
            }
        }
        for (var j = 0; j < powerData.length; j++) {
            var powerDataAverages = {};
            var avgCount = 0;
            var currentDate = 0;
            var previousDate = 0;
            $.each(powerData[j], function (timestamp, power) {
                currentDate = getDayTimestamp(timestamp);
                if (previousDate == 0) {
                    previousDate = currentDate;
                }
                if (previousDate != currentDate) {
                    powerDataAverages[previousDate] /= avgCount;
                    avgCount = 0;
                }
                if (powerDataAverages[currentDate] == null) powerDataAverages[currentDate] = 0;
                if (power > 0 && (avgCount == 0 || (power / (powerDataAverages[currentDate] / avgCount) < 10 || (power / (powerDataAverages[currentDate] / avgCount) > 0 && avgCount < 3)))) {
                    powerDataAverages[currentDate] += power;
                    avgCount++;
                }
                previousDate = currentDate;
            });
            powerDataAverages[previousDate] /= avgCount;
            $.each(powerData[j], function (timestamp, power) {
                if (power > 30 * powerDataAverages[getDayTimestamp(timestamp)] && powerDataAverages[getDayTimestamp(timestamp)] != 0 && power != 0) {
                    powerData[j][timestamp] = Math.round(powerDataAverages[getDayTimestamp(timestamp)]);
                }
            });
        }
        maxDate = powerData[powerData.length - 1][0];
        if (powerShow != 0) {
            if (graphFirstLoad == 1) {
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHashrate.series[ser].name == _mx('Power consumption')) {
                        chartHashrate.series[ser].remove();
                        break;
                    }
                }
                chartHashrate.addSeries({
                    name: _mx('Power consumption'),
                    data: powerData,
                    tooltip: {valueDecimals: 0, valueSuffix: 'W'},
                    color: powerColor,
                    showInNavigator: false,
                    dataLabels: {enabled: false},
                    yAxis: 6,
                    connectNulls: true,
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    fillOpacity: 0,
                    fillColor: 'rgba(255,255,255,0)'
                }, false);
                lastMaxDate = maxDate;
            } else {
                if (lastMaxDate != maxDate) {
                    for (var ser = seriesLength - 1; ser > -1; ser--) {
                        if (chartHashrate.series[ser].name == _mx('Power consumption')) {
                            chartHashrate.series[ser].addPoint([maxDate, powerData[powerData.length - 1][1]]);
                            break;
                        }
                    }
                }
            }
        }
        if (graphFirstLoad == 1) {
            var rejectedSharesDataArray = [];
            $.each(rejectedSharesData, function (timestamp, shares) {
                rejectedSharesDataArray.push([parseInt(timestamp), shares]);
            });
            for (var ser = seriesLength - 1; ser > -1; ser--) {
                if (chartHashrate.series[ser].name == _mx('Rejected shares')) {
                    chartHashrate.series[ser].remove();
                    break;
                }
            }
            // console.log('rejectedSharesDataArray',rejectedSharesDataArray)
            chartHashrate.addSeries({
                name: _mx('Rejected shares'),
                data: rejectedSharesDataArray,
                type: 'column',
                stacking: 'normal',
                tooltip: {valueDecimals: 0, valueSuffix: ''},
                color: rejectedColor,
                showInNavigator: false,
                dataLabels: {enabled: false},
                yAxis: 8,
                borderWidth: 0,
                states: {hover: {color: rejectedColorHover}},
                pointWidth: 2,
                connectNulls: true,
                animation: false,
                dataGrouping: {enabled: false,},
                startOnTick: true,
                endOnTick: false
            }, false);
            lastMaxDate = maxDate;
        } else {
            if (lastMaxDate != maxDate) {
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHashrate.series[ser].name == _mx('Rejected shares')) {
                        chartHashrate.series[ser].addPoint([maxDate, rejectedSharesData[maxDate]]);
                        break;
                    }
                }
            }
        }
        if (graphFirstLoad == 1) {
            var max = chartHashrate.xAxis[0].dataMax;
            var min = chartHashrate.xAxis[0].dataMin;
            var potentialMin = max - 12 * 60 * 60 * 1000;
            if (potentialMin > min) {
                min = potentialMin;
            }
            if (hashrateType != 'mini') {
                min = chartHashrate.xAxis[0].dataMin;
            }
            chartHashrate.xAxis[0].setExtremes(min, max);
        } else {
            if ((lastMaxDate != maxDate && extremesMax == lastMaxDate) || isNaN(extremesMax)) {
                var max = chartHashrate.xAxis[0].dataMax;
                chartHashrate.xAxis[0].setExtremes(extremesMin, max);
            }
        }
        chartHashrate.redraw();
        graphFirstLoad = 0;
        lastMaxDate = maxDate;
        $('.loader_frame_graph').hide();
        hashChartsLoaded = 1;
        hideLoader();
    }
}

var graphFirstLoadTemp = 1;
var graphFirstLoadTempOther = 1;
var lastMaxDateTemp = 0;
var tempChartData = [];
var fansChartData = [];
var powerChartData = [];
var hashrateChartData = [];
var driverErrorChart = 0;
var myDelayDataList=[]
function loadTempChart(apiData) {
    globalHardwareData = {};
    var extremesMin = 0;
    var extremesMax = 0;
    if (tempLocked == 0) {
        var chartFound = false;
        var seriesLength = chartHardwareTemps.series.length;
        var apiTemp = '';
        var i = 0;
        apiTemp = $.parseJSON(apiData);
        var maxDate = 0;

        $.each(apiTemp.resultsTemp, function (gpu, data) {
            if (typeof gpu !== 'undefined') {
                data.sort(function (a, b) {
                    return a[0] - b[0];
                });

                for (var j = 0; j < data.length; j++) {
                    var timestamp = data[j][0] * 100000;
                    if (globalHardwareData[i] == null) {
                        globalHardwareData[i] = {};
                    }
                    if (globalHardwareData[i][timestamp] == null) {
                        globalHardwareData[i][timestamp] = {};
                    }

                    globalHardwareData[i][timestamp]['temp'] = data[j][1];
                    globalHardwareData[i][timestamp]['fan'] = data[j][2];
                    globalHardwareData[i][timestamp]['power'] = data[j][3];
                    if (typeof data[j][4]['h'] != 'undefined' && data[j][4]['h'] != '') {
                        globalHardwareData[i][timestamp]['hashrate'] = parseFloat((convertHashrate(data[j][4]['h'], 'H/s')).split(' ')[0]);
                    } else {
                        globalHardwareData[i][timestamp]['hashrate'] = 0;
                    }
                    globalHardwareData[i][timestamp]['extra'] = data[j][4];
                }
                i++;
            }
        });

        $.each(globalHardwareData, function (i, globalHardwareDataGpu) {
            var temperatureData = [];
            $.each(globalHardwareDataGpu, function (timestamp, data) {
                temperatureData.push([parseInt(timestamp), convertTemperature(data['temp'])]);
                if (timestamp > maxDate) {
                    maxDate = timestamp;
                }
            });
            if (graphFirstLoadTemp == 1) {
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHardwareTemps.series[ser].name == '#' + i) {
                        chartHardwareTemps.series[ser].remove();
                        break;
                    }
                }
                chartHardwareTemps.addSeries({
                    name: '#' + i,
                    data: temperatureData,
                    showInNavigator: true,
                    dataLabels: {enabled: false},
                    color: tempColors[i],
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    }
                }, false);

            } else {
                if (lastMaxDateTemp != maxDate) {
                    for (var ser = seriesLength - 1; ser > -1; ser--) {
                        if (chartHardwareTemps.series[ser].name == '#' + i) {
                            chartHardwareTemps.series[ser].addPoint([maxDate, temperatureData[temperatureData.length - 1][1]]);
                            break;
                        }
                    }
                }
            }
        });
        if (graphFirstLoadTemp == 1) {
            var max = chartHardwareTemps.xAxis[0].dataMax;
            var min = chartHardwareTemps.xAxis[0].dataMin;
            var potentialMin = max - 12 * 60 * 60 * 1000;
            if (potentialMin > min) {
                min = potentialMin;
            }
            if (tempType != 'mini') {
                min = chartHardwareTemps.xAxis[0].dataMin;
            }
            chartHardwareTemps.xAxis[0].setExtremes(min, max);
        } else {
            var extremes = chartHardwareTemps.xAxis[0].getExtremes();
            if (extremes.max > extremesMax) {
                extremesMax = extremes.max;
            }
            if (extremes.min > extremesMin) {
                extremesMin = extremes.min;
            }
            var extremes = chartHardwareTemps.xAxis[0].getExtremes();
            if ((lastMaxDate != maxDate && extremesMax == lastMaxDate) || isNaN(extremesMax)) {
                var max = chartHardwareTemps.xAxis[0].dataMax;
                chartHardwareTemps.xAxis[0].setExtremes(extremesMin, max);
            }
        }
        if (selectedTab == 'temperatures') {
            chartHardwareTemps.redraw();
        }
        graphFirstLoadTemp = 0;
        lastMaxDateTemp = maxDate;
        $('.loader_frame_temp').hide();
        tempChartsLoaded = 1;
        hideLoader();
        $.each(globalHardwareData, function (i, globalHardwareDataGpu) {
            var fansData = [];
            var powerData = [];
            var hashrateData = [];
            $.each(globalHardwareDataGpu, function (timestamp, data) {
                fansData.push([parseInt(timestamp), data['fan']]);
                powerData.push([parseInt(timestamp), data['power']]);
                hashrateData.push([parseInt(timestamp), data['hashrate']]);
                if (timestamp > maxDate) {
                    maxDate = timestamp;
                }
            });

            hashrateData.sort(function (a, b) {
                return a[0] > b[0]
            });
            powerData.sort(function (a, b) {
                return a[0] > b[0]
            });
            fansData.sort(function (a, b) {
                return a[0] > b[0]
            });
            if (graphFirstLoadTempOther == 1 || tempType != 'mini') {
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHardwareFans.series[ser].name == '#' + i) {
                        chartHardwareFans.series[ser].remove();
                        break;
                    }
                }
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHardwarePower.series[ser].name == '#' + i) {
                        chartHardwarePower.series[ser].remove();
                        break;
                    }
                }
                for (var ser = seriesLength - 1; ser > -1; ser--) {
                    if (chartHardwareHashrate.series[ser].name == '#' + i) {
                        chartHardwareHashrate.series[ser].remove();
                        break;
                    }
                }
                chartHardwareFans.addSeries({
                    name: '#' + i,
                    data: fansData,
                    showInNavigator: true,
                    dataLabels: {enabled: false},
                    color: tempColors[i],
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    }
                }, false);
                chartHardwarePower.addSeries({
                    name: '#' + i,
                    data: powerData,
                    showInNavigator: true,
                    dataLabels: {enabled: false},
                    color: tempColors[i],
                    maxPointWidth: 8,
                    borderRadius: 2,
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {hover: {lineWidth: 2}},
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    }
                }, false);
                chartHardwareHashrate.addSeries({
                    name: '#' + i,
                    data: hashrateData,
                    showInNavigator: true,
                    dataLabels: {enabled: false},
                    color: tempColors[i],
                    maxPointWidth: 8,
                    borderRadius: 2,
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    states: {hover: {lineWidth: 2}},
                    animation: false,
                    dataGrouping: {
                        enabled: false,
                        units: [['minute', [10]], ['hour', [1]], ['day', [1]]],
                        groupPixelWidth: 15,
                        approximation: 'high'
                    }
                }, false);
            } else {
                if (lastMaxDateTemp != maxDate) {
                    for (var ser = seriesLength - 1; ser > -1; ser--) {
                        if (chartHardwareFans.series[ser].name == '#' + i) {
                            chartHardwareFans.series[ser].addPoint([maxDate, fansData[fansData.length - 1][1]]);
                            break;
                        }
                    }
                    for (var ser = seriesLength - 1; ser > -1; ser--) {
                        if (chartHardwarePower.series[ser].name == '#' + i) {
                            chartHardwarePower.series[ser].addPoint([maxDate, powerData[powerData.length - 1][1]]);
                            break;
                        }
                    }
                    for (var ser = seriesLength - 1; ser > -1; ser--) {
                        if (chartHardwareHashrate.series[ser].name == '#' + i) {
                            chartHardwareHashrate.series[ser].addPoint([maxDate, hashrateData[hashrateData.length - 1][1]]);
                            break;
                        }
                    }
                }
            }
        });
        var extremes = chartHardwareTemps.xAxis[0].getExtremes();
        if (extremes.max > extremesMax) {
            extremesMax = extremes.max;
        }
        if (extremes.min > extremesMin) {
            extremesMin = extremes.min;
        }
        if (graphFirstLoadTempOther == 1 || tempType != 'mini') {
            var max = chartHardwareFans.xAxis[0].dataMax;
            var min = chartHardwareFans.xAxis[0].dataMin;
            var potentialMin = max - 12 * 60 * 60 * 1000;
            if (potentialMin > min) {
                min = potentialMin;
            }
            if (tempType != 'mini') {
                min = chartHardwareFans.xAxis[0].dataMin;
            }
            chartHardwareFans.xAxis[0].setExtremes(min, max);
            var max = chartHardwarePower.xAxis[0].dataMax;
            var min = chartHardwarePower.xAxis[0].dataMin;
            var potentialMin = max - 12 * 60 * 60 * 1000;
            if (potentialMin > min) {
                min = potentialMin;
            }
            if (tempType != 'mini') {
                min = chartHardwarePower.xAxis[0].dataMin;
            }
            chartHardwarePower.xAxis[0].setExtremes(min, max);
            var max = chartHardwareHashrate.xAxis[0].dataMax;
            var min = chartHardwareHashrate.xAxis[0].dataMin;
            var potentialMin = max - 12 * 60 * 60 * 1000;
            if (potentialMin > min) {
                min = potentialMin;
            }
            if (tempType != 'mini') {
                min = chartHardwareHashrate.xAxis[0].dataMin;
            }
            chartHardwareHashrate.xAxis[0].setExtremes(min, max);
        } else {
            var extremes = chartHardwareFans.xAxis[0].getExtremes();
            if ((lastMaxDate != maxDate && extremesMax == lastMaxDate) || isNaN(extremesMax)) {
                var max = chartHardwareFans.xAxis[0].dataMax;
                chartHardwareFans.xAxis[0].setExtremes(extremesMin, max);
            }
            var extremes = chartHardwarePower.xAxis[0].getExtremes();
            if ((lastMaxDate != maxDate && extremesMax == lastMaxDate) || isNaN(extremesMax)) {
                var max = chartHardwarePower.xAxis[0].dataMax;
                chartHardwarePower.xAxis[0].setExtremes(extremesMin, max);
            }
            var extremes = chartHardwareHashrate.xAxis[0].getExtremes();
            if ((lastMaxDate != maxDate && extremesMax == lastMaxDate) || isNaN(extremesMax)) {
                var max = chartHardwareHashrate.xAxis[0].dataMax;
                chartHardwareHashrate.xAxis[0].setExtremes(extremesMin, max);
            }
        }
        if (selectedTab == 'fans') {
            chartHardwareFans.redraw();
        } else if (selectedTab == 'power') {
            chartHardwarePower.redraw();
        } else if (selectedTab == 'hashrate') {
            chartHardwareHashrate.redraw();
        }
        graphFirstLoadTempOther = 0;
    }
}
//图标实例化的部分
var chartHashrate = new Highcharts.chart('hashrate', {
    chart: {
        animation: false, alignTicks: false, type: 'areaspline', events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
    },
    title: {
        text: _mx3('Mining'),
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 10
    },
    legend: {
        itemMarginTop: 10,
        symbolHeight: 11,
        symbolWidth: 11,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, enabled: false},
        tickAmount: 5,
        showEmpty: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, enabled: false},
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        opposite: true,
        allowDecimals: true
    }, {
        title: {text: ''},
        visible: false,
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'right', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label;
            }
        },
        tickAmount: 5,
        min: 0,
        max: 100,
        opposite: true,
        allowDecimals: true
    }, {visible: false, height: rejectedHeight, top: rejectedTop}
    ],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphHashrateTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var style = '<div style="border:1px solid transaprent;background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            var points = this.points;
            style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';padding:10px 15px 10px 15px;border-bottom:1px solid ' + borderColor + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div>';
            var countMining = 0;
            var countAlerts = 0;
            for (var i = 0; i < points.length; i++) {
                var coinName = this.points[i].series.name;
                // console.log('coinName',coinName)
                // console.log('coinNamexx',this.points)
                if (this.points[i].y > 0 || coinName == _mx('Rejected shares')) {
                    if (coinName == _mx('Alerts')) {
                        var curTimestamp = Math.round(this.points[i].x / 10) * 10 + 100;
                        if (typeof dataAlertsDescriptions[curTimestamp] != 'undefined') {
                            var eventElement = dataAlertsDescriptions[curTimestamp];
                            var counterEl = eventElement.length;
                            $.each(eventElement, function (evenElementIndex, eventElementValues) {
                                counterEl--;
                                if (counterEl == 0) {
                                    style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;">' +
                                        '<div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:14px;line-height:1;">' + eventElementValues[0] + '</div>' +
                                        '<div style="margin:0;padding:2px 15px 10px 0;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' + eventElementValues[1] + '</div>' +
                                        '</div>';
                                } else {
                                    style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid ' + borderColor + ';">' +
                                        '<div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:14px;line-height:1;">' + eventElementValues[0] + '</div>' +
                                        '<div style="margin:0;padding:2px 15px 10px 0;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' + eventElementValues[1] + '</div>' +
                                        '</div>';
                                }
                                countAlerts++;
                            });
                        }
                    }
                    else {
                        if (coinName == _mx('Power consumption')) {
                            style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';box-shadow:0px 0px 0px 4px ' + this.points[i].color + '33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>' + ((this.points[i].y).toFixed(0)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:0 15px 10px 31px;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' + this.points[i].series.name + '</div>';
                        }else if(coinName.indexOf(_mx4('PoolSpeed'))!==-1){
                            style+='<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid rgba(255,255,255,0.2);">\n' +
                                '    <div style="margin:0;font-weight:600;color:rgb(255, 255, 255);font-size:16px;line-height:1;">\n' +
                                '     <div style="background:'+points[i].color+';box-shadow:0px 0px 0px 4px '+points[i].color+'33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>'+
                                 ((this.points[i].y).toFixed(2)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix +
                                '    </div>\n' +
                                '    <div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:12px;color:rgba(255,255,255,0.4);font-weight:300;">\n' +
                                coinName +
                                '    </div>\n' +
                                '   </div>'
                            // style+='<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid ' + borderColor + ';">' +
                            //         '<div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:14px;line-height:1;">' +'待填充11'+ '</div>' +
                            //         '<div style="margin:0;padding:2px 15px 10px 0;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' +'待填充121'+ '</div>' +
                            //         '</div>'
                            // console.log('sss',style)
                        }else if(coinName.indexOf(_mx('kernelDevfee'))!==-1){
                            style+='<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid rgba(255,255,255,0.2);">\n' +
                                '    <div style="margin:0;font-weight:600;color:rgb(255, 255, 255);font-size:16px;line-height:1;">\n' +
                                '     <div style="background:'+points[i].color+';box-shadow:0px 0px 0px 4px '+points[i].color+'33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>'+
                                ((this.points[i].y).toFixed(2)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix +
                                '    </div>\n' +
                                '    <div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:12px;color:rgba(255,255,255,0.4);font-weight:300;">\n' +
                                    devFeeArr[coinName.split(' ')[0]][this.points[i].x][0]+' '+_mx('Devfee')+
                                '    </div>\n' +
                                '   </div>'
                        }

                        else {
                            coinName = coinName.replace(' ' + _mx('hashrate'), '');
                            var poolName = '';
                            var clientName = '';
                            if (typeof poolData[coinName] != 'undefined' && typeof poolData[coinName][this.points[i].x] != 'undefined' && typeof poolData[coinName][this.points[i].x]['pool'] != 'undefined') {
                                poolName = poolData[coinName][this.points[i].x]['pool'];
                            }
                            if (typeof poolData[coinName] != 'undefined' && typeof poolData[coinName][this.points[i].x] != 'undefined' && typeof poolData[coinName][this.points[i].x]['client'] != 'undefined') {
                                clientName = poolData[coinName][this.points[i].x]['client'];
                            }

                            var averageStr = '';
                            var averageHashrate = '';
                            if (coinName != '' && typeof averages[coinName] != 'undefined' && typeof averages[coinName][getDayTimestamp(this.points[i].x)] != 'undefined') {
                                averageHashrate = convertHashrate(averages[coinName][getDayTimestamp(this.points[i].x)], this.points[i].series.tooltipOptions.valueSuffix);
                                averageStr = ' (' + _('daily avg.') + ' ' + averageHashrate + ')';
                            }
                            var extraMiningStr = '';
                            if (poolName != '') {
                                extraMiningStr = '<div style="display:flex;justify-content:flex-start;align-items:center;margin:10px 0 0 0;color:' + tooltipExtraColor + ';font-weight:' + tooltipExtraBold + ';font-size:' + tooltipExtraSize + ';line-height:1;"><div class="icon_small pool" style="margin:0 5px 0 -2px;flex:none;"></div>' + poolName + '</div>';
                            }
                            if (clientName != '') {
                                extraMiningStr += '<div style="display:flex;justify-content:flex-start;align-items:center;margin:10px 0 0 0;color:' + tooltipExtraColor + ';font-weight:' + tooltipExtraBold + ';font-size:' + tooltipExtraSize + ';line-height:1;"><div class="icon_small client" style="margin:-1px 5px 0 -2px;flex:none;"></div>' + clientName + '</div>';
                            }
                            var hashrateVal = convertHashrate(this.points[i].y, this.points[i].series.tooltipOptions.valueSuffix);
                            if(this.points[i].series.name=='Alerts'){
                                // console.log(dataAlertsDescriptions)
                                // console.log(this.points[i])
                                // style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid ' + borderColor + ';"><div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';box-shadow:0px 0px 0px 4px ' + this.points[i].color + '33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>' + this.points[i].series.name + '</div><div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + '; max-width: 300px">' + dataAlertsDescriptions[this.points[i].x+100][0][1] + '</div></div>';
                                style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid ' + borderColor + ';"><div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';box-shadow:0px 0px 0px 4px ' + this.points[i].color + '33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>' + this.points[i].series.name + '</div><div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' +dataAlertsDescriptions[this.points[i].x+100][0][1].replace(/(\\r)/g,'<br>')+ '</div></div>';
                            }else {
                                style += '<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid ' + borderColor + ';"><div style="margin:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';box-shadow:0px 0px 0px 4px ' + this.points[i].color + '33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>' + hashrateVal + '</div><div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:' + tooltipSmallSize + ';color:' + tooltipSubtitleColor + ';font-weight:' + fontWeightLight + ';">' + this.points[i].series.name + averageStr + extraMiningStr + '</div></div>';
                            }
                       }
                        countMining++;
                    }
                }
            }
            if (countMining == 0 && countAlerts == 0) {
                style += '<div style="margin:0;padding:10px 15px 10px 15px;line-height:1;font-size:' + tooltipExtraSize + ';color:' + tooltipExtraColor + ';font-weight:' + tooltipExtraBold + ';">' + _('No data') + '</div>';
            }
            style += '</div>';
            // console.log(style)
            return style;
        },
        shared: true
    },
    plotOptions: {
        areaspline: {
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 40,
        maskFill: navigatorFill,
        connectNulls: false,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -65},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('hashrate', 3 * 60 * 60 * 1000);
                    // loadAllData('hashrate');
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('hashrate', 12 * 60 * 60 * 1000);
                    // loadAllData('hashrate');
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('hashrate', 24 * 60 * 60 * 1000);
                    // loadAllData('hashrate');
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('hashrate', 3 * 24 * 60 * 60 * 1000);
                    // loadAllData('hashrate');
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('hashrate');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": hiddenColor}}}}]},
    credits: {enabled: false}
});
var chartHardwareTemps = new Highcharts.chart('chartHardwareTemperature', {
    chart: {
        animation: false, alignTicks: false, type: 'spline', height: 400, events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTopHardware, backgroundColor: null
    },
    title: {
        text: '',
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 10
    },
    legend: {
        itemMarginTop: 10,
        symbolHeight: 11,
        symbolWidth: 11,
        squareSymbol: true,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label + temperature;
            }
        },
        softMax: softMaxValue,
        softMin: softMinValue,
        plotLines: [{
            color: hotColor,
            label: {
                text: _mx2('Very hot'),
                align: 'right',
                verticalAlign: 'top',
                style: {color: hotColor, fontSize: smallSize, fontWeight: fontWeightBold},
                x: 0,
                y: -5
            },
            width: 2,
            value: veryHotValue,
            zIndex: 100,
            dashStyle: 'ShortDot',
        }, {
            color: hotColor,
            label: {
                text: _('HOT'),
                align: 'right',
                verticalAlign: 'top',
                style: {color: hotColor, fontSize: smallSize, fontWeight: fontWeightBold},
                x: 0,
                y: -5
            },
            width: 2,
            value: hotValue,
            zIndex: 100,
            dashStyle: 'ShortDot',
        }],
        plotBands: [{
            color: {
                linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1},
                stops: [[0, hotGradientFrom], [1, hotGradientTo]]
            }, from: veryHotValueStart, to: veryHotValueStop
        }, {
            color: {linearGradient: {x1: 0, y1: 0, x2: 0, y2: 1}, stops: [[0, hotGradientFrom], [1, hotGradientTo]]},
            from: hotValueStart,
            to: hotValueStop
        }]
    }],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphTempTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var points = this.points;
            var foundSomething = 0;
            if(globalHardwareData!={}){
                for (var i = 0; i < points.length; i++) {
                    if (globalHardwareData[i][this.points[i].x]['temp'] > 0 || globalHardwareData[i][this.points[i].x]['fan'] > 0 || globalHardwareData[i][this.points[i].x]['power'] > 0 || globalHardwareData[i][this.points[i].x]['extra'] != '') {
                        foundSomething = 1;
                        break;
                    }
                }
            }

            var style = '<div style="border:0;z-index:20;background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            style += '<div style="margin:0;padding:10px 15px 10px 15px;line-height:1;border-bottom:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div>';
            style += '<div style="padding:15px 15px 10px 15px;">';
            if (foundSomething > 0) {
                if (points.length > 6) {
                    style += '<div style="width:100%;display:flex;flex-wrap:no-wrap;flex-direction:row;justify-content:space-between;">';
                    style += '<div style="margin-right:10px;flex:1;">';
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        if (i == Math.round((points.length) / 2)) {
                            style += '</div>';
                            style += '<div style="flex:1;">';
                        }
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[i][this.points[i].x] != 'undefined' && globalHardwareData[i][this.points[i].x] != null) {
                            if (typeof globalHardwareData[i][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[i][this.points[i].x]['temp'] != null && globalHardwareData[i][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[i][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                    tempColor = 'color:' + tooltipVeryHotColor + ';';
                                    tempColorBox = 'background:' + tooltipVeryHotColor + ';';
                                } else {
                                    if (tempStr > hotValue) {
                                        tempColor = 'color:' + tooltipHotColor + ';';
                                        tempColorBox = 'background:' + tooltipHotColor + ';';
                                    }
                                    if (tempStr > veryHotValue) {
                                        tempColor = 'color:' + tooltipVeryHotColor + ';';
                                        tempColorBox = 'background:' + tooltipVeryHotColor + ';';
                                    }
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[i][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[i][this.points[i].x]['fan'] != null && globalHardwareData[i][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[i][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[i][this.points[i].x]['power'] != 'undefined' && globalHardwareData[i][this.points[i].x]['power'] != null && globalHardwareData[i][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[i][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[i][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[i][this.points[i].x]['extra'] != null && globalHardwareData[i][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[i][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = fansStr + ' / ' + powerStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;' + tempColor + '">' + tempStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                    style += '</div>';
                    style += '</div>';
                } else {
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                    tempColor = 'color:' + tooltipVeryHotColor + ';';
                                    tempColorBox = 'background:' + tooltipVeryHotColor + ';';
                                } else {
                                    if (tempStr > hotValue) {
                                        tempColor = 'color:' + tooltipHotColor + ';';
                                        tempColorBox = 'background:' + tooltipHotColor + ';';
                                    }
                                    if (tempStr > veryHotValue) {
                                        tempColor = 'color:' + tooltipVeryHotColor + ';';
                                        tempColorBox = 'background:' + tooltipVeryHotColor + ';';
                                    }
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = fansStr + ' / ' + powerStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;' + tempColor + '">' + tempStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                }
            } else {
                style += '<div style="margin:-5px 0 0 0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;">' + _('No data') + '</div>';
            }
            style += '</div>';
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        spline: {
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 20,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -16},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('temp', 12 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('temp', 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('temp');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    credits: {enabled: false}
});
var chartHardwareFans = new Highcharts.chart('chartHardwareFans', {
    chart: {
        animation: false, alignTicks: false, type: 'spline', height: 400, events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        }, marginTop: selectorTopHardware, backgroundColor: null
    },
    title: {text: ''},
    legend: {
        itemMarginTop: 10,
        symbolHeight: 11,
        symbolWidth: 11,
        squareSymbol: true,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                if (label < 1000) {
                    return label + '%';
                } else {
                    return label + ' RPM';
                }
            }
        }
    }],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphTempTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var points = this.points;
            var foundSomething = 0;
            for (var i = 0; i < points.length; i++) {
                if (globalHardwareData[i][this.points[i].x]['temp'] > 0 || globalHardwareData[i][this.points[i].x]['fan'] > 0 || globalHardwareData[i][this.points[i].x]['power'] > 0 || globalHardwareData[i][this.points[i].x]['extra'] != '') {
                    foundSomething = 1;
                    break;
                }
            }
            var style = '<div style="border:0;background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            style += '<div style="margin:0;padding:10px 15px 10px 15px;line-height:1;border-bottom:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div>';
            style += '<div style="padding:15px 15px 10px 15px;">';
            if (foundSomething > 0) {
                if (points.length > 6) {
                    style += '<div style="width:100%;display:flex;flex-wrap:no-wrap;flex-direction:row;justify-content:space-between;">';
                    style += '<div style="margin-right:10px;flex:1;">';
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        if (i == Math.round((points.length) / 2)) {
                            style += '</div>';
                            style += '<div style="flex:1;">';
                        }
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr == 0) {
                                    tempColorBox = 'background:' + tooltipGrayColor + ';';
                                }
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + powerStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + fansStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                    style += '</div>';
                    style += '</div>';
                } else {
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr == 0) {
                                    tempColorBox = 'background:' + tooltipGrayColor + ';';
                                }
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + powerStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + fansStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                }
            } else {
                style += '<div style="margin:-5px 0 0 0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;">' + _('No data') + '</div>';
            }
            style += '</div>';
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        spline: {
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 20,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -16},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('temp', 12 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('temp', 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('temp');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": hiddenColor}}}}]},
    credits: {enabled: false}
});
var chartHardwarePower = new Highcharts.chart('chartHardwarePower', {
    chart: {
        animation: false,
        alignTicks: false,
        type: chartTypeStr,
        height: 400,
        events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        },
        marginTop: selectorTopHardware,
        backgroundColor: null,
        marker: {
            enabled: false,
            symbol: 'circle',
            lineColor: 'rgba(255,255,255,0)',
            lineWidth: 0,
            states: {hover: {lineWidth: 0}}
        }
    },
    title: {text: ''},
    legend: {
        itemMarginTop: 10,
        symbolHeight: 11,
        symbolWidth: 11,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
        symbolHeight: 12,
        symbolWidth: 12,
        symbolRadius: 2
    },
    marker: {
        enabled: false,
        symbol: 'circle',
        lineColor: 'rgba(255,255,255,0)',
        lineWidth: 0,
        states: {hover: {lineWidth: 0}}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {
            align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}, formatter: function () {
                var label = this.axis.defaultLabelFormatter.call(this);
                return label + 'W';
            }
        }
    }],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphTempTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var points = this.points;
            var foundSomething = 0;
            for (var i = 0; i < points.length; i++) {
                if (globalHardwareData[i][this.points[i].x]['temp'] > 0 || globalHardwareData[i][this.points[i].x]['fan'] > 0 || globalHardwareData[i][this.points[i].x]['power'] > 0 || globalHardwareData[i][this.points[i].x]['extra'] != '') {
                    foundSomething = 1;
                    break;
                }
            }
            var style = '<div style="border:0;background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            style += '<div style="margin:0;padding:10px 15px 10px 15px;line-height:1;border-bottom:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div>';
            style += '<div style="padding:15px 15px 10px 15px;">';
            if (foundSomething > 0) {
                var powerSums = 0;
                if (points.length > 6) {
                    style += '<div style="width:100%;display:flex;flex-wrap:no-wrap;flex-direction:row;justify-content:space-between;">';
                    style += '<div style="margin-right:10px;flex:1;">';
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        if (i == Math.round((points.length) / 2)) {
                            style += '</div>';
                            style += '<div style="flex:1;">';
                        }
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                                powerSums += globalHardwareData[dataIndex][this.points[i].x]['power'];
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + fansStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + powerStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                    style += '</div>';
                    style += '</div>';
                } else {
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                                powerSums += globalHardwareData[dataIndex][this.points[i].x]['power'];
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + fansStr + ' / ' + hashrateStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + powerStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                }
            } else {
                style += '<div style="margin:-5px 0 0 0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;">' + _('No data') + '</div>';
            }
            style += '</div>';
            if (powerSums > 0) {
                style += '<div style="margin:0 0 0 0;padding:10px 15px 10px 15px;line-height:1;border-top:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDarkerColor + ';font-weight:' + fontWeightBold + ';">' + powerSums + ' W<div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + _('Power sum') + '</div></div>';
            }
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        column: {
            stacking: 'normal',
            dataLabels: {enabled: false},
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0,
            borderColor: columnBorderColor
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 20,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05, type: "column"},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -16},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('temp', 12 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('temp', 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('temp');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": hiddenColor}}}}]},
    credits: {enabled: false}
});
var chartHardwareHashrate = new Highcharts.chart('chartHardwareHashrate', {
    chart: {
        animation: false,
        alignTicks: false,
        type: chartTypeStr,
        height: 400,
        events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        },
        marginTop: selectorTopHardware,
        backgroundColor: null,
        marker: {
            enabled: false,
            symbol: 'circle',
            lineColor: 'rgba(255,255,255,0)',
            lineWidth: 0,
            states: {hover: {lineWidth: 0}}
        }
    },
    title: {text: ''},
    legend: {
        itemMarginTop: 10,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
        symbolHeight: 12,
        symbolWidth: 12,
        symbolRadius: 2
    },
    marker: {
        enabled: false,
        symbol: 'circle',
        lineColor: 'rgba(255,255,255,0)',
        lineWidth: 0,
        states: {hover: {lineWidth: 0}}
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize}}
    }],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphTempTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var points = this.points;
            var foundSomething = 0;
            for (var i = 0; i < points.length; i++) {
                if (globalHardwareData[i][this.points[i].x]['temp'] > 0 || globalHardwareData[i][this.points[i].x]['fan'] > 0 || globalHardwareData[i][this.points[i].x]['power'] > 0 || globalHardwareData[i][this.points[i].x]['extra'] != '') {
                    foundSomething = 1;
                    break;
                }
            }
            var style = '<div style="border:0;background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
            style += '<div style="margin:0;padding:10px 15px 10px 15px;line-height:1;border-bottom:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div>';
            style += '<div style="padding:15px 15px 10px 15px;">';
            if (foundSomething > 0) {
                var hashesSums = 0;
                if (points.length > 6) {
                    style += '<div style="width:100%;display:flex;flex-wrap:no-wrap;flex-direction:row;justify-content:space-between;">';
                    style += '<div style="margin-right:10px;flex:1;">';
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        if (i == Math.round((points.length) / 2)) {
                            style += '</div>';
                            style += '<div style="flex:1;">';
                        }
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                    hashesSums += extraArray['h'];
                                } else {
                                    tempColorBox = 'background:' + tooltipGrayColor + ';';
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + fansStr + ' / ' + powerStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + hashrateStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                    style += '</div>';
                    style += '</div>';
                } else {
                    for (var i = 0; i < points.length; i++) {
                        var dataIndex = this.points[i].series.index;
                        var subStr = '';
                        var tempStr = '';
                        var fansStr = '';
                        var powerStr = '';
                        var hashrateStr = '';
                        var extraStr = '';
                        var tempColor = '';
                        var tempColorBox = '';
                        if (typeof globalHardwareData[dataIndex][this.points[i].x] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x] != null) {
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['temp'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['temp'] != null && globalHardwareData[dataIndex][this.points[i].x]['temp'] != '') {
                                tempStr = globalHardwareData[dataIndex][this.points[i].x]['temp'];
                                if (tempStr > 500) {
                                    tempStr = _('Driver error');
                                } else {
                                    tempStr = convertTemperature(tempStr) + temperature;
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['fan'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['fan'] != null && globalHardwareData[dataIndex][this.points[i].x]['fan'] != '') {
                                fansStr = globalHardwareData[dataIndex][this.points[i].x]['fan'];
                                if (fansStr > 100) {
                                    fansStr = fansStr + ' RPM';
                                } else {
                                    fansStr = fansStr + '%';
                                }
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['power'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['power'] != null && globalHardwareData[dataIndex][this.points[i].x]['power'] != '') {
                                powerStr = globalHardwareData[dataIndex][this.points[i].x]['power'] + ' W';
                            }
                            if (typeof globalHardwareData[dataIndex][this.points[i].x]['extra'] != 'undefined' && globalHardwareData[dataIndex][this.points[i].x]['extra'] != null && globalHardwareData[dataIndex][this.points[i].x]['extra'] != '') {
                                var extraArray = globalHardwareData[dataIndex][this.points[i].x]['extra'];
                                if (typeof extraArray['h'] != 'undefined' && extraArray['h'] > 0 && extraArray['h'] != '') {
                                    hashrateStr = convertHashrate(extraArray['h'], 'H/s');
                                    hashesSums += extraArray['h'];
                                } else {
                                    tempColorBox = 'background:' + tooltipGrayColor + ';';
                                }
                                if (typeof extraArray['cc'] != 'undefined' && extraArray['cc'] > 0 && extraArray['cc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">CORE</div>' + extraArray['cc'] + '</div>';
                                }
                                if (typeof extraArray['cv'] != 'undefined' && extraArray['cv'] > 0 && extraArray['cv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">VDD</div>' + extraArray['cv'] + '</div>';
                                }
                                if (typeof extraArray['mc'] != 'undefined' && extraArray['mc'] > 0 && extraArray['mc'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MEM</div>' + extraArray['mc'] + '</div>';
                                }
                                if (typeof extraArray['mv'] != 'undefined' && extraArray['mv'] > 0 && extraArray['mv'] != '') {
                                    extraStr += '<div style="background:' + tooltipTagsBackground + ';font-size:' + tooltipTagsSize + ';color:' + tooltipTagsColor + ';font-weight:500;border-radius:2px;padding:3px 5px;display:flex;justify-content:flex-start;align-items:center;margin:5px 5px 0 0;"><div style="font-weight:800;color:' + tooltipTagsColorDark + ';margin:0 3px 0  0;">MVDD</div>' + extraArray['mv'] + '</div>';
                                }
                            } else {
                                tempColorBox = 'background:' + tooltipGrayColor + ';';
                            }
                        }
                        if (tempStr == '') {
                            tempStr = '-';
                        }
                        if (fansStr == '') {
                            fansStr = '-';
                        }
                        if (powerStr == '') {
                            powerStr = '-';
                        }
                        if (hashrateStr == '') {
                            hashrateStr = '-';
                        }
                        subStr = tempStr + ' / ' + fansStr + ' / ' + powerStr;
                        style += '<div style="margin:0 0 8px 0;padding:0;font-weight:' + fontWeightLight + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;"><div style="background:' + this.points[i].color + ';width:20px;height:20px;border-radius:3px;display:flex;justify-content:center;align-items:center;margin:0 8px 0 0;flex:none;color:' + tooltipTabColor + ';font-weight:700;font-size:' + tooltipSmallSize + ';' + tempColorBox + '">' + this.points[i].series.name.replace('#', '') + '</div><div style="margin-top:2px"><div style="font-weight:' + fontWeightBold + ';vertical-align:baseline;">' + hashrateStr + '</div><div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + subStr + '</div><div style="display:flex;justify-content:flex-start;align-items:flex-start;flex-wrap:no-wrap;">' + extraStr + '</div></div></div>';
                    }
                }
            } else {
                style += '<div style="margin:-5px 0 0 0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + smallSize + ';line-height:1;display:flex;justify-content:flex-start;">' + _('No data') + '</div>';
            }
            style += '</div>';
            if (hashesSums > 0) {
                style += '<div style="margin:0 0 0 0;padding:10px 15px 10px 15px;line-height:1;border-top:1px solid ' + borderColor + ';font-size:' + smallSize + ';color:' + tooltipDarkerColor + ';font-weight:' + fontWeightBold + ';">' + convertHashrate(hashesSums, 'H/s') + '<div style="margin-top:2px;font-size:' + tooltipSmallSize + ';color:' + tooltipLighterShade + ';font-weight:400;">' + _('Hashrate sum') + '</div></div>';
            }
            style += '</div>';
            return style;
        },
        shared: true
    },
    plotOptions: {
        column: {
            stacking: 'normal',
            dataLabels: {enabled: false},
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0,
            borderColor: columnBorderColor
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 20,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05, type: "column"},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -16},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('temp', 12 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('temp', 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('temp', 3 * 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('temp');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": hiddenColor}}}}]},
    credits: {enabled: false}
});

var mygraphHashrateTour = new Highcharts.chart('mygraphHashrateTour', {
    chart: {
        animation: false,
        alignTicks: false,
        type: 'spline',
        height: 400,
        events: {
            load: function () {
                var chart = this;
                var zoomText = chart.rangeSelector.zoomText.element;
                $(zoomText).attr({y: 17, x: 0})
                $.each(chart.rangeSelector.buttons, function (i, button) {
                    var textStr = button.element.childNodes[1];
                    $(textStr).attr({y: 17});
                });
            }
        },
        marginTop: selectorTopHardware,
        backgroundColor: null,
        marker: {
            enabled: false,
            symbol: 'spline',
            lineColor: 'rgba(255,255,255,0)',
            lineWidth: 0,
            states: {hover: {lineWidth: 0}}
        }
    },
    title: {
        text: _mx3('Pool Latency'),
        align: 'left',
        style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
        y: 15
    },
    legend: {
        itemMarginTop: 0,
        itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
        itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
        symbolHeight: 12,
        symbolWidth: 12,
        symbolRadius: 2
    },
    xAxis: {
        type: 'datetime',
        labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
        lineColor: borderColor,
        tickColor: borderColor
    },
    yAxis: [{
        title: {text: ''},
        minorGridLineWidth: 0,
        gridLineWidth: 1,
        gridLineColor: borderLightColor,
        gridColor: borderColor,
        alternateGridColor: null,
        labels: {align: 'left', x: 0, y: -5, style: {color: titleColor, fontSize: smallSize},enabled:false},
        tickAmount: 5,
        showEmpty: true,
    }],
    tooltip: {
        hideDelay: 0,
        borderRadius: 6,
        borderWidth: 0,
        padding: 0,
        shadow: false,
        useHTML: true,
        backgroundColor: tooltipBackgroundColor,
        positioner: function (boxWidth, boxHeight, point) {
            var xPx = point.plotX + 20;
            var yPx = point.plotY;
            var chartWidth = $('#graphTempTour').width() - 20;
            if (xPx * 2 > chartWidth) {
                xPx = point.plotX - boxWidth - 10;
            }
            return {x: xPx, y: yPx};
        },
        formatter: function () {
            var points = this.points;
            let style='<div style="border:1px solid transaprent;background:rgb(67, 76, 97);box-shadow:rgba(0, 0, 0, 0.3) 0px 5px 80px 0px;border-radius:5px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">\n' +
                        '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:12px;color:rgba(255,255,255,0.4);font-weight:300;padding:10px 15px 10px 15px;border-bottom:1px solid rgba(255,255,255,0.2);">\n' +
                             Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' '+Highcharts.dateFormat('%Y  %H:%M', new Date(this.points[0].x)) +
                        '</div>\n'
               $.each(points,function (i,it) {
                    style+='<div style="margin:10px 0 0 0;padding:0 25px 0 15px;border-bottom:1px solid rgba(255,255,255,0.2);">\n' +
                        ' <div style="margin:0;font-weight:600;color:rgb(255, 255, 255);font-size:16px;line-height:1;">\n' +
                        '  <div style="background:'+ points[i].series.color+';box-shadow:0px 0px 0px 4px '+ points[i].series.color+'33;width:8px;height:8px;border-radius:8px;display:inline-table;margin:-2px 8px 0 0;"></div>' +
                        points[i].series.name +' '+myDelayDataList[points[i].series.name][points[i].point.index][1]+' ms'+
                        ' </div>\n' +
                        ' <div style="margin:0;padding:2px 15px 10px 16px;line-height:1;font-size:12px;color:rgba(255,255,255,0.4);font-weight:300;">\n' +
                        _mx('Client')+'：'+myDelayDataList[points[i].series.name][points[i].point.index][2]+'<br>'
                        +_mx('Pools')+'：'+myDelayDataList[points[i].series.name][points[i].point.index][3]+
                        ' </div>\n' +
                        '</div>\n'
               })
                style+='<div style="margin:10px 0 0 0;padding:0 25px 0 15px;font-weight:600;color:rgb(255, 255, 255);font-size:16px;line-height:1;">\n' +
                        '</div>\n' +
                        '  </div>'
            return style
        },
        shared: true
    },
    plotOptions: {
        column: {
            stacking: 'normal',
            dataLabels: {enabled: false},
            lineWidth: 2,
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0,
            borderColor: columnBorderColor
        }
    },
    navigator: {
        enabled: true,
        outlineColor: navigatorBorder,
        outlineWidth: 1,
        height: 20,
        maskFill: navigatorFill,
        handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
        series: {fillOpacity: 0.05, type: "column"},
        xAxis: {
            lineColor: navigatorBorder,
            lineWidth: 1,
            gridLineColor: navigatorBorder,
            labels: {style: {color: titleColor}}
        }
    },
    rangeSelector: {
        enabled: true,
        inputEnabled: false,
        x: 0,
        y: 0,
        verticalAlign: 'top',
        buttonPosition: {align: 'right', x: 0, y: -65},
        buttonTheme: {
            fill: 'none',
            stroke: 'none',
            'stroke-width': 0,
            r: 3,
            width: 25,
            padding: 4,
            style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
            states: {
                hover: {fill: buttonFillHover, style: {color: buttonColorHover, fontWeight: 'bold'}},
                select: {fill: buttonSelectedFill, style: {color: buttonSelectedColor, fontWeight: 'bold'}},
                disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
            }
        },
        labelStyle: {color: titleColor, fontWeight: 'bold', fontSize: smallSize},
        buttons: [{
            type: 'hour', count: 3, text: '3h', events: {
                click: function (e) {
                    loadMiniData('delay', 3 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 12, text: '12h', events: {
                click: function (e) {
                    loadMiniData('delay', 12 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'hour', count: 24, text: '1d', events: {
                click: function (e) {
                    loadMiniData('delay', 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'day', count: 3, text: '3d', events: {
                click: function (e) {
                    loadMiniData('delay', 3 * 24 * 60 * 60 * 1000);
                }
            }
        }, {
            type: 'all', text: _('All'), events: {
                click: function (e) {
                    loadAllData('delay');
                }
            }
        }],
        selected: 1
    },
    navigation: {menuItemStyle: {fontSize: '10px'}},
    responsive: {rules: [{condition: {maxWidth: 600}, chartOptions: {title: {style: {"color": hiddenColor}}}}]},
    credits: {enabled: false}
});









$('#worker_actions').on('click', '.switch_miner_menu > .frame > .row', function () {
    if ($(this).hasClass('selected')) {
        $('.switch_miner_menu').fadeOut('fast');
        return false;
    }
    var template = $(this).attr('data-template');
    var nonce = $('#nonce').val();
    if (workerName == '' || template == '' || nonce == '') {
        return false;
    }
    $.post('/workers', {worker: workerName, template: template, nonce: nonce}, function (response) {
        $('.switch_miner_menu').fadeOut('fast');
        location.reload();
    });
});


function restartSoftware() {
    if (!$('#restartSoftware').hasClass('disabled')) {
        $('#software_restart .title').html(_mx('Restart') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#software_restart').fadeToggle('fast');
    }
}

$('#software_restart .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#software_restart .outlined_button, #software_restart .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {restartSoftware: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_restart').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
        }, 4500);
    });
});

function restartMiner() {
    if (!$('#restartMiner').hasClass('disabled')) {
        $('#miner_restart .title').html(_mx('Restart') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#miner_restart').fadeToggle('fast');
    }
}

$('#miner_restart .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#miner_restart .outlined_button, #miner_restart .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {reMiner: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#miner_restart').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#miner_restart .outlined_button, #miner_restart .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#miner_restart .outlined_button, #miner_restart .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#miner_restart .outlined_button, #miner_restart .blue').removeClass('disabled');
        }, 4500);
    });
});

function startMining() {
    if (!$('#startMining').hasClass('disabled')) {
        $('#software_start .title').html(_mx('Start') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#software_start').fadeToggle('fast');
    }
}

$('#software_start .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#software_start .outlined_button, #software_start .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {startMining: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_start').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
        }, 4500);
    });
});

function stopMining() {
    if (!$('#stopMining').hasClass('disabled')) {
        $('#software_stop .title').html(_mx('Stop') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#software_stop').fadeToggle('fast');
    }
}

$('#software_stop .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#software_stop .outlined_button, #software_stop .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {stopMining: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_stop').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_stop .outlined_button, #software_stop .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_stop .outlined_button, #software_stop .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_stop .outlined_button, #software_stop .blue').removeClass('disabled');
        }, 4500);
    });
});

function rebootMachine() {
    if (!$('#rebootMachine').hasClass('disabled')) {
        $('#hardware_reboot .title').html(_mx2('Reboot') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#hardware_reboot').fadeToggle('fast');
    }
}

$('#hardware_reboot .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#hardware_reboot .outlined_button, #hardware_reboot .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {rebootMachine: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#hardware_reboot').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
        }, 4500);
    });
});

function shutdownMachine() {
    if (!$('#shutdownMachine').hasClass('disabled')) {
        $('#worker_shutdown .title').html(_mx2('Shut down') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#worker_shutdown').fadeToggle('fast');
    }
}

$('#worker_shutdown .red').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_shutdown .outlined_button, #worker_shutdown .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {workerShutdown: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_shutdown').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
        }, 4500);
    });
});

function shutdownMachineSafe() {
    if (!$('#shutdownMachine').hasClass('disabled')) {
        $('#worker_shutdown_safe .title').html(_mx('Safe shut down') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#worker_shutdown_safe').fadeToggle('fast');
    }
}

$('#worker_shutdown_safe .red').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_shutdown_safe .outlined_button, #worker_shutdown_safe .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {workerShutdownSafe: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_shutdown_safe').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_shutdown_safe .outlined_button, #worker_shutdown_safe .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_shutdown_safe .outlined_button, #worker_shutdown_safe .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_shutdown_safe .outlined_button, #worker_shutdown_safe .red').removeClass('disabled');
        }, 4500);
    });
});

function powerCycleMachine() {
    if (!$('#shutdownMachine').hasClass('disabled')) {
        $('#worker_power_cycle .title').html(_mx3('Power cycle') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#worker_power_cycle').fadeToggle('fast');
    }
}

$('#worker_power_cycle .red').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {workerPowerCycle: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_power_cycle').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
        }, 4500);
    });
});

function cpuMining(workerName) {
    var nonce = $('#nonce').val();
    if ($('.switch_miner_menu').find('.cpumining .bullet').hasClass('selected')) {
        var statusCpu = 0;
    } else {
        var statusCpu = 1;
    }
    $.post('/workers', {'cpuMining': workerName, 'status': statusCpu, 'nonce': nonce}, function (response) {
        if (response == '1') {
            if (statusCpu == 0) {
                $('.switch_miner_menu').find('.cpumining .bullet').removeClass('selected');
                $('.switch_miner_menu').find('.cpumining .toggle').attr('data-tooltip', _('CPU mining disabled'));
            } else {
                $('.switch_miner_menu').find('.cpumining .bullet').addClass('selected');
                $('.switch_miner_menu').find('.cpumining .toggle').attr('data-tooltip', _('CPU mining enabled'));
            }
        }
        location.reload();
    });
}

function profitSwitch(workerName) {
    var nonce = $('#nonce').val();
    if ($('.switch_miner_menu').find('.profitswitch .bullet').hasClass('selected')) {
        var statusProfitSwitch = 0;
    } else {
        var statusProfitSwitch = 1;
    }
    $.post('/workers', {'profitSwitch': workerName, 'status': statusProfitSwitch, 'nonce': nonce}, function (response) {
        if (statusProfitSwitch == '0') {
            $('.switch_miner_menu').find('.profitswitch .bullet').removeClass('selected');
            $('.switch_miner_menu').find('.profitswitch .toggle').attr('data-tooltip', _('Profit switch disabled'));
        } else {
            $('.switch_miner_menu').find('.profitswitch .bullet').addClass('selected');
            $('.switch_miner_menu').find('.profitswitch .toggle').attr('data-tooltip', _('Profit switch enabled'));
        }
        if ($('.col_1_4').length >= 0) {
            $.post(window.location.href, {'reloadProfitSwitchList': 1}, function (response) {
                if (response != '') {
                    var tempDom = $('<output>').append($.parseHTML(response));
                    tempDom = tempDom.find('.col_1_4').html();
                    $('.col_1_4').html(tempDom);
                }
            });
        }
        location.reload();
    });
}

var hashrateLocked = 0;
var tempLocked = 0;
var delayLocked = 0
function loadAllData(type) {
    if (type == 'hashrate') {
        $('.loader_frame_graph').show();
        hashrateLocked = 1;
    }
    if (type == 'temp') {
        $('.loader_frame_temp').show();
        tempLocked = 1;
    }
    if(type == 'delay'){
        delayLocked=1
    }
    var hashtempApiUrl = '/temp_api.php?token=' + workerToken + '&worker=' + workerNameCode + '&timezone=' + workerTimezone;
    $.getJSON(hashtempApiUrl, function (hashTempDataApi) {
        if (type == 'temp') {
            graphFirstLoadTemp = 1;
            tempType = '';
            var apiData = hashTempDataApi;
            if (apiData != '' && apiData != null && typeof apiData.resultsTemp != 'undefined') {
                $('#chartTemperature').parent().removeClass('disabled');
                $('#chartEmpty').hide();
                $('#chartTemperature').show();
                tempLocked = 0;
                loadTempChart(JSON.stringify(apiData));
            } else {
                $('#chartTemperature').parent().addClass('disabled');
                $('#chartEmpty').show();
                $('#chartTemperature').hide();
                $('.loader_frame_temp').hide();
                tempLocked = 0;
            }
        }else if(type == 'delay'){
            setMyDelay(hashTempDataApi)
            delayLocked=0
        }
        else if (type == 'hashrate') {
            graphFirstLoad = 1;
            hashrateType = '';
            var apiData = hashTempDataApi;
            if (apiData != '' && apiData != null && typeof apiData.resultsHash != 'undefined') {
                $('#hashrate').parent().removeClass('disabled');
                $('#no_hashrate').hide();
                $('#hashrate').show();
                hashrateLocked = 0;
                loadHashChart(JSON.stringify(apiData));
            } else {
                $('#hashrate').parent().addClass('disabled');
                $('#no_hashrate').show();
                $('#hashrate').hide();
                $('.loader_frame_graph').hide();
                hashrateLocked = 0;
            }
        }
    });
}

function loadMiniData(type, time) {
    if (tempType != 'mini' || hashrateType != 'mini'||type == 'hashrate') {
    // if (true) {
        hashrateLocked = 1;
        tempLocked = 1;
        var hashtempApiUrl = '/temp_api.php?token=' + workerToken + '&worker=' + workerNameCode + '&timezone=' + workerTimezone + '&type=mini';
        $.getJSON(hashtempApiUrl, function (hashTempDataApi) {
            if (type == 'temp') {
                tempType = 'mini';
                var apiData = hashTempDataApi;
                if (apiData != '' && apiData != null && typeof apiData.resultsTemp != 'undefined') {
                    $('#chartTemperature').parent().removeClass('disabled');
                    $('#chartEmpty').hide();
                    $('#chartTemperature').show();
                    tempLocked = 0;
                    loadTempChart(JSON.stringify(apiData));
                } else {
                    $('#chartTemperature').parent().addClass('disabled');
                    $('#chartEmpty').show();
                    $('#chartTemperature').hide();
                }
            }else if(type=='delay'){
                setMyDelay(hashTempDataApi)
            }
            else if (type == 'hashrate') {
                hashrateType = 'mini';
                var apiData = hashTempDataApi;
                if (apiData != '' && apiData != null && typeof apiData.resultsHash != 'undefined') {
                    $('#hashrate').parent().removeClass('disabled');
                    $('#no_hashrate').hide();
                    $('#hashrate').show();
                    hashrateLocked = 0;
                    loadHashChart(JSON.stringify(apiData));
                } else {
                    $('#hashrate').parent().addClass('disabled');
                    $('#no_hashrate').show();
                    $('#hashrate').hide();
                }
            }
        });
    }
}

function editNote() {
    if(my_wy_key==0){
        return
    }
    var nonce = $('#nonce').val();
    $.post('/workers', {workerNote: workerNameCode, nonce: nonce}, function (response) {
        $('#edit_note textarea').val(response);
    });
    $('#edit_note .title').html(workerName + _mx("'s notes"));
    $('.popupbackground').fadeToggle();
    $('#edit_note').fadeToggle('fast');
    $('#edit_note .green').attr('data-wn', workerNameCode);
}

$('.reset_button').click(function () {
    $('#edit_note textarea').val('');
});
$('#edit_note .green').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#edit_note .outlined_button, #edit_note .green').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var nonce = $('#nonce').val();
    var note = $('#edit_note textarea').val();
    $.post('/workers', {worker: workerName, note: note, nonce: nonce}, function (response) {
        if (response == '1') {
            dataRefresh(false);
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#edit_note').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
        }, 4500);
    });
});

function downloadConfigJs() {
    exportContent = 'global.accesskey = "' + workerToken + '";\nglobal.worker = "' + workerName + '";';
    var blob = new Blob([exportContent], {type: "js/plain;charset=utf-8"});
    saveAs(blob, "config.js");
}

var snapshotLock = false;

$('.reload_snapshot').click(function () {
    $('#ConsloleimgWin').fadeToggle()
    $('#ConsloleimgWin .inTextmm').html(textLog)
    $('#ConsloleimgWin .inTextmm')[0].scrollTop= $('#ConsloleimgWin .inTextmm')[0].scrollHeight
    $('.popupbackground').fadeToggle()
});

$('.value').bind('mouseup keyup', function (e) {
    $('#table_gpus > tr').removeClass("highlight");
    highlightedCard = -1;
    if (countingGPUs == 1) {
        var caretPos = e.target.selectionStart;
        var inputValue = $(this).val();
        var countSpaces = 0;
        var allSpaces = 0;
        for (var i = 0; i < inputValue.length - 1; i++) {
            if (inputValue[i] == ' ' && i < caretPos - 1) {
                countSpaces++;
            }
            if (inputValue[i] == ' ') {
                allSpaces++;
            }
        }
        $('.gpu_count').html('');
        if (inputValue.length > 0) {
            if (allSpaces > 0 && !$(this).hasClass('gpu_limited')) {
                $(this).parent().parent().children('label').children('.gpu_count').html('GPU #' + countSpaces);
                if (displayClockTuneValues == '1') {
                    $('#table_gpus > tr:nth-child(' + (2 * countSpaces + 2) + ')').addClass("highlight");
                } else {
                    $('#table_gpus > tr:nth-child(' + (countSpaces + 2) + ')').addClass("highlight");
                }
                highlightedCard = countSpaces;
            } else {
                $(this).parent().parent().children('label').children('.gpu_count').html(_('All GPUs'));
            }
        }
    } else {
        var inputValue = $(this).val();
        $('.gpu_count').html('');
        if (inputValue.length > 0) {
            $(this).parent().parent().children('label').children('.gpu_count').html($(this).parent().parent().children('label').children('.gpu_count').attr('data-gpuid'));
        }
    }
})

function openChipData(chipId) {
    $(".chips_popup").hide();
    if (openedChip != chipId) {
        $('#chip_' + chipId).show();
        openedChip = chipId;
    } else {
        openedChip = -1;
    }
}

$(document).mouseup(function (e) {
    if (!$(".chips_popup").is(e.target) && (!$(".icon.chips").is(e.target)) && e.target.localName != 'html') {
        $(".chips_popup").hide();
        openedChip = -1;
    }
});
dataRefresh(true);
var checkLock = false;

function generateNewReport(workerName) {
    if (checkLock == false) {
        checkLock = true;
        $('.circle-loader').removeClass('load-complete');
        $('.checkmark').hide();
        $('.diagnostic_menu .frame .report_results').hide();
        $('.diagnostic_menu .frame .text').html('<div class="progress"><div class="circle-loader"><div class="checkmark draw"></div></div><b>' + _("Generating report ...") + '</b><p>' + _("Please wait while system is generating the audit. This can take up to a minute.") + '</p></div>');
        $.post('/diagnostic', {'newAudit': workerName}, function (data) {
            if (checkLock == true) {
                checkLock = false;
                if (data == '0') {
                    $('.diagnostic_menu .frame .text').html('<div class="progress"><b>' + _("Generating report failed") + '</b><p>' + _("Something went wrong, please try again later.") + '</p></div>');
                } else {
                    function checkAudit(workername) {
                        $.post('/diagnostic', {'getAudit': workerName}, function (data) {
                            if (data == '0') {
                                $('.diagnostic_menu .frame .text').html('<div class="progress"><b>' + _("Generating report failed") + '</b><p>' + _("Something went wrong, please try again later.") + '</p></div>');
                            } else {
                                if (data.includes('display:none;') == true) {
                                    setTimeout(function () {
                                        checkAudit(workerName);
                                    }, 10000);
                                } else {
                                    $('.circle-loader').addClass('load-complete');
                                    $('.checkmark').show();
                                    setTimeout(function () {
                                        $('.diagnostic_menu .frame').html(data);
                                        if (typeof ps_diagnostic != 'undefined') {
                                            ps_diagnostic.destroy();
                                        }
                                        ps_diagnostic = new PerfectScrollbar('.diagnostic_menu .frame > .report_results > .frame', {
                                            wheelSpeed: 1,
                                            wheelPropagation: false,
                                            minScrollbarLength: 30,
                                            suppressScrollX: true
                                        });
                                        ps_diagnostic.update();
                                    }, 1500);
                                }
                            }
                        });
                    }

                    checkAudit(workerName);
                }
            }
        });
    }
}

function changeTab(tabVal) {
    $('.loader_frame_temp').show();
    setTimeout(function () {
        selectedTab = tabVal;
        $('.tab_row .tab').removeClass('selected');
        if (hardwareChartsAvailable == 1) {
            $('.chartArea').hide();
            if (selectedTab == 'temperatures') {
                $('#tabTemperatures').addClass('selected');
                $('#chartHardwareTemperature').show();
                chartHardwareTemps.redraw();
                chartHardwareTemps.reflow();
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'fans') {
                $('#tabFans').addClass('selected');
                $('#chartHardwareFans').show();
                chartHardwareFans.redraw();
                chartHardwareFans.reflow();
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'power') {
                $('#tabPower').addClass('selected');
                $('#chartHardwarePower').show();
                chartHardwarePower.redraw();
                chartHardwarePower.reflow();
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'hashrate') {
                $('#tabHashrate').addClass('selected');
                $('#chartHardwareHashrate').show();
                chartHardwareHashrate.redraw();
                chartHardwareHashrate.reflow();
                $('.loader_frame_temp').hide();
            }
        } else {
            if (selectedTab == 'temperatures') {
                $('#tabTemperatures').addClass('selected');
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'fans') {
                $('#tabFans').addClass('selected');
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'power') {
                $('#tabPower').addClass('selected');
                $('.loader_frame_temp').hide();
            }
            if (selectedTab == 'hashrate') {
                $('#tabHashrate').addClass('selected');
                $('.loader_frame_temp').hide();
            }
        }
    }, 500);
}

$('#hardwareTabs').on('change', function () {
    $('.loader_frame_temp').show();
    setTimeout(function () {
        selectedTab = $("#hardwareTabs option:selected").val();
        $('.chartArea').hide();
        if (selectedTab == 'temperatures') {
            $('#chartHardwareTemperature').show();
            chartHardwareTemps.redraw();
            chartHardwareTemps.reflow();
            $('.loader_frame_temp').hide();
        }
        if (selectedTab == 'fans') {
            $('#chartHardwareFans').show();
            chartHardwareFans.redraw();
            chartHardwareFans.reflow();
            $('.loader_frame_temp').hide();
        }
        if (selectedTab == 'power') {
            $('#chartHardwarePower').show();
            chartHardwarePower.redraw();
            chartHardwarePower.reflow();
            $('.loader_frame_temp').hide();
        }
        if (selectedTab == 'hashrate') {
            $('#chartHardwareHashrate').show();
            chartHardwareHashrate.redraw();
            chartHardwareHashrate.reflow();
            $('.loader_frame_temp').hide();
        }
    }, 500);
});

function checkDownloadBios(workerName, bus, bios, name, gpuId) {
    $.post('/bios-flasher', {'download': '1', 'check': '1', 'worker': workerName, 'bus': bus}, function (blob) {
        if (blob == '') {
            setTimeout(function () {
                checkDownloadBios(workerName, bus, bios, name, gpuId)
            }, 5000);
        } else {
            $('.bios_download').parent().removeClass('disabled');
            $('.bios_download').parent().removeClass('disabled_with_loader');
            $('.bios_download').removeClass('loading');
            loadingBiosId = -1;
            if (blob == 'error') {
                return false;
            }
            var byteString = atob(blob);
            var ab = new ArrayBuffer(byteString.length);
            var ia = new Uint8Array(ab);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }
            var blobFormat = new Blob([ab], {type: "application/octet-stream"});
            saveAs(blobFormat, workerName + "_" + gpuId + "_" + name.replace(/\s+/g, '-') + "_" + bios + ".rom");
        }
    });
}

function downloadBios(gpuId, bus, bios, name, thisEl) {
    if (!$(thisEl).hasClass('disabled')) {
        loadingBiosId = gpuId;
        $(thisEl).children('.icon').addClass('loading');
        $('.bios_download').parent().addClass('disabled');
        $(thisEl).addClass('disabled_with_loader');
        $.post('/bios-flasher', {'download': '1', 'worker': workerName, 'bus': bus}, function (data) {
            checkDownloadBios(workerName, bus, bios, name, gpuId);
        });
    }
}

$('.clocktune_popup').on("mouseover", '.info_box', function (event) {
    var offset = $(this).offset();
    var positionTop = offset.top - $(window).scrollTop();
    var positionRight = 100;
    $(this).children('.tooltip').css({"position": "fixed", "top": positionTop + "px", "right": positionRight + "px"});
    $(this).children('.tooltip').show();
});

function selectPriority(selectType, thisEl) {
    $(thisEl).parent().children('.row').removeClass('selected');
    $(thisEl).addClass('selected');
    if (selectType == 'high') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('High'));
        $(thisEl).parent().parent().children('.selected_option').children('.priority_bar').removeClass('low').removeClass('medium').removeClass('all').addClass('high');
    } else if (selectType == 'medium') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Medium'));
        $(thisEl).parent().parent().children('.selected_option').children('.priority_bar').removeClass('low').removeClass('high').removeClass('all').addClass('medium');
    } else if (selectType == 'low') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Low'));
        $(thisEl).parent().parent().children('.selected_option').children('.priority_bar').removeClass('medium').removeClass('high').removeClass('all').addClass('low');
    } else if (selectType == 'all') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('All'));
        $(thisEl).parent().parent().children('.selected_option').children('.priority_bar').removeClass('medium').removeClass('high').removeClass('low').addClass('all');
    }
}

function selectUser(selectType, name, thisEl) {
    $(thisEl).parent().children('.row').removeClass('selected');
    $(thisEl).addClass('selected');
    if (selectType == 0) {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Anyone'));
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').attr('data-user', selectType);
        $(thisEl).parent().parent().children('.selected_option').children('.avatar').html('');
        $(thisEl).data('user', 0);
    } else {
        var avatar = $(thisEl).children('.avatar').find("img").attr('src');
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(name);
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').attr('data-user', selectType);
        $(thisEl).parent().parent().children('.selected_option').children('.avatar').html('<img src="' + avatar + '"/>');
        $(thisEl).data('user', selectType);
    }
}

function selectStatus(selectType, thisEl) {
    $(thisEl).parent().children('.row').removeClass('selected');
    $(thisEl).addClass('selected');
    if (selectType == 'ongoing') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Ongoing'));
        $(thisEl).parent().parent().children('.selected_option').children('.icon').removeClass('completed').removeClass('discarded').addClass('ongoing');
    } else if (selectType == 'completed') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Completed'));
        $(thisEl).parent().parent().children('.selected_option').children('.icon').removeClass('ongoing').removeClass('discarded').addClass('completed');
    } else if (selectType == 'discarded') {
        $(thisEl).parent().parent().children('.selected_option').children('.option_title').html(_('Discarded'));
        $(thisEl).parent().parent().children('.selected_option').children('.icon').removeClass('ongoing').removeClass('completed').addClass('discarded');
    }
}

function popupTaskDropdown(thisEl) {
    if ($(thisEl).children('.select_menu').hasClass('display')) {
        $('.select_menu').removeClass('display');
    } else {
        $('.select_menu').removeClass('display');
        $(thisEl).children('.select_menu').addClass('display');
    }
}

function openNewTaskMenu() {
    $('#tasksList').hide();
    $('#addNewTask').show();
    ps_tasks_menu.update();
}

function closeNewTaskMenu() {
    $('#tasksList').show();
    $('#addNewTask').hide();
    ps_tasks_list.update();
}

if ($('.comments_frame .frame').length > 0) {
    var ps_tasks_chat = new PerfectScrollbar('.comments_frame .frame', {
        wheelSpeed: 0.4,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.task_description_frame .frame').length > 0) {
    var ps_tasks_description = new PerfectScrollbar('.task_description_frame .frame', {
        wheelSpeed: 0.4,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
var openTask = '';

function editTask(taskId) {
    $('.popupbackground').show();
    $('#edit_task').removeClass('overflow_screen');
    $('#edit_task').show();
    $('#edit_task .text .loader_background').show();
    var nonce = $('#nonce').val();
    $.post('/tasks', {'view': taskId, nonce: nonce}, function (response) {
        if (response != '0') {
            openTask = taskId;
            var obj = jQuery.parseJSON(response);
            $('#replies').html('');
            if (obj.worker > 0) {
                $('#selectWorker').show();
            } else {
                $('#selectWorker').hide();
            }
            if (obj.group != '' && obj.group != '0') {
                $('#selectGroup').show();
            } else {
                $('#selectGroup').hide();
            }
            $('#title').html(obj.title);
            $('#info_desc').html('<div class="description_content">' + (obj.desc + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br>$2') + '</div>');
            $('#added').html(obj.added);
            $('#due').val(obj.due);
            $('#worker option[value="' + obj.worker + '"]').attr('selected', 'selected');
            $('#group option[value="' + obj.group + '"]').attr('selected', 'selected');
            $('#priority').html('<div class="priority_bar ' + obj.priority + '"></div><span class="option_title">' + obj.priority.charAt(0).toUpperCase() + obj.priority.slice(1) + '</span><div class="arrow"></div>');
            $('#assignedTo').html($('#assignedToMenu > [data-user="' + obj.user + '"]').html() + '<div class="arrow"></div>');
            $('#type').html($('#type_' + obj.type).html() + '<div class="arrow"></div>');
            if (typeof obj.reply != 'undefined') {
                for (var i = 0; i < obj.reply.length; i++) {
                    var reply = obj.reply[i];
                    var replyHtml = '<div class="log_event"><div class="avatar"><img src="data:image/png;base64,' + reply.avatar + '"/></div><div class="message_box"><small><b>' + reply.name + '</b>' + reply.date + '</small><p>' + (reply.text + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br>$2') + '</p></div></div>';
                    $(replyHtml).appendTo('#replies');
                }
            }
            var dueDate = obj.due;
            var calendarHtml = generateCalendar(dueDate);
            if (calendarHtml != '') {
                $('.popup .calendar').html(calendarHtml);
                $('.popup .calendar').parent().show();
            } else {
                $('.popup .calendar').parent().hide();
            }
            if (document.getElementById("edit_task").offsetHeight > $(window).height() - 40) {
                $('#edit_task').addClass('overflow_screen');
                var offsetTop = $(window).scrollTop() + 20;
                if (offsetTop > 20) {
                    $('#edit_task').css("top", offsetTop + "px");
                }
            }
            setTimeout(function () {
                $('#edit_task .text .loader_background').hide();
            }, 200);
            if (typeof ps_tasks_description != 'undefined' && ps_tasks_description != null) {
                ps_tasks_description.update();
            }
            if (typeof ps_tasks_chat != 'undefined' && ps_tasks_chat != null) {
                ps_tasks_chat.update();
            }
        }
    });
}

function onDateChange(thisEl, e) {
    var dueDate = $(thisEl).val();
    var calendarHtml = generateCalendar(dueDate);
    if (calendarHtml != '') {
        $('.popup .calendar').html(calendarHtml);
        $('.popup .calendar').parent().show();
    } else {
        $('.popup .calendar').parent().hide();
    }
}

function generateCalendar(dueDate) {
    var dueDateStr = '';
    var dueDateArray = dueDate.split('-');
    if (dueDateArray.length == 3) {
        var dueDateDay = dueDateArray[2];
        var dueDateMonth = dueDateArray[1];
        var dueDateYear = dueDateArray[0];
        var todayDate = new Date();
        var todayDay = parseInt(String(todayDate.getDate()).padStart(2, '0'));
        var todayMonth = parseInt(String(todayDate.getMonth() + 1).padStart(2, '0'));
        var todayYear = todayDate.getFullYear();
        var firstDayIndex = new Date(dueDateYear + '-' + dueDateMonth + '-01').getDay();
        var numberOfDays = new Date(dueDateYear, dueDateMonth, 0).getDate();
        var monthName = '';
        switch (dueDateMonth) {
            case '01':
                monthName = _mx2('January');
                break;
            case '02':
                monthName = _mx2('February');
                break;
            case '03':
                monthName = _mx2('March');
                break;
            case '04':
                monthName = _mx2('April');
                break;
            case '05':
                monthName = _mx2('May');
                break;
            case '06':
                monthName = _mx2('June');
                break;
            case '07':
                monthName = _mx2('July');
                break;
            case '08':
                monthName = _mx2('August');
                break;
            case '09':
                monthName = _mx2('September');
                break;
            case '10':
                monthName = _mx2('October');
                break;
            case '11':
                monthName = _mx2('November');
                break;
            case '12':
                monthName = _mx2('December');
                break;
        }
        if (workerTimezone.indexOf('America') == -1) {
            firstDayIndex = firstDayIndex - 1;
            if (firstDayIndex == -1) {
                firstDayIndex = 6;
            }
        }
        dueDateStr += '<div class="month"><div onclick="moveMonthBack(' + dueDateYear + ',' + parseInt(dueDateMonth) + ',' + parseInt(dueDateDay) + ');" class="icon_back"></div>' + monthName + ' ' + dueDateYear + '<div onclick="moveMonthNext(' + dueDateYear + ',' + parseInt(dueDateMonth) + ',' + parseInt(dueDateDay) + ');" class="icon_next"></div></div>';
        dueDateStr += '<ul class="days_titles">';
        if (workerTimezone.indexOf('America') == -1) {
            dueDateStr += '  <li>' + (_('Monday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Tuesday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Wednesday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Thursday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Friday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Saturday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Sunday')).charAt(0) + '</li>';
        } else {
            dueDateStr += '  <li>' + (_('Sunday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Monday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Tuesday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Wednesday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Thursday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Friday')).charAt(0) + '</li>';
            dueDateStr += '  <li>' + (_('Saturday')).charAt(0) + '</li>';
        }
        dueDateStr += '</ul>';
        var weekTable = [];
        var countingDays = 0;
        for (var wi = 0; wi < 6; wi++) {
            weekTable[wi] = [];
            for (var di = 0; di < 7; di++) {
                if (wi == 0 && di == firstDayIndex || countingDays != 0) {
                    countingDays++;
                }
                weekTable[wi][di] = countingDays;
                if (countingDays == numberOfDays) {
                    countingDays = 0;
                }
            }
        }
        for (var wi = 0; wi < weekTable.length; wi++) {
            dueDateStr += '<ul class="days_row">';
            for (var di = 0; di < weekTable[wi].length; di++) {
                var dayClass = '';
                if (weekTable[wi][di] == 0) {
                    weekTable[wi][di] = '&nbsp;';
                } else {
                    var dueDateDayTemp = weekTable[wi][di];
                    if (dueDateDayTemp < 10) {
                        dueDateDayTemp = '0' + dueDateDayTemp;
                    }
                    dayClass = ' onclick="changeDate(\'' + dueDateYear + '-' + dueDateMonth + '-' + dueDateDayTemp + '\');" class="calday day_' + weekTable[wi][di] + '"';
                    if (todayYear == dueDateYear && todayMonth == dueDateMonth && todayDay == weekTable[wi][di]) {
                        dayClass = ' onclick="changeDate(\'' + dueDateYear + '-' + dueDateMonth + '-' + weekTable[wi][di] + '\');" class="calday day_' + weekTable[wi][di] + ' today"';
                    }
                    if (weekTable[wi][di] == dueDateDay) {
                        dayClass = ' onclick="changeDate(\'' + dueDateYear + '-' + dueDateMonth + '-' + weekTable[wi][di] + '\');" class="calday day_' + weekTable[wi][di] + ' selected"';
                    }
                }
                dueDateStr += '<li' + dayClass + '>' + weekTable[wi][di] + '</li>';
            }
            dueDateStr += '</ul>';
        }
    }
    return dueDateStr;
}

function moveMonthBack(year, month, day) {
    month = month - 1;
    if (month == 0) {
        month = 12;
        year--;
    }
    if (month < 10) {
        month = '0' + month;
    }
    if (day < 10) {
        day = '0' + day;
    }
    changeDate(year + '-' + month + '-' + day);
}

function moveMonthNext(year, month, day) {
    month = month + 1;
    if (month == 13) {
        month = 1;
        year++;
    }
    if (month < 10) {
        month = '0' + month;
    }
    if (day < 10) {
        day = '0' + day;
    }
    changeDate(year + '-' + month + '-' + day);
}

function formatDate(dateStr) {
    var dueDateArray = dateStr.split('-');
    if (dueDateArray.length == 3) {
        var dueDateDay = dueDateArray[2];
        var dueDateMonth = dueDateArray[1];
        var dueDateYear = dueDateArray[0];
        var monthName = '';
        switch (dueDateMonth) {
            case '01':
                monthName = _mx2('January');
                break;
            case '02':
                monthName = _mx2('February');
                break;
            case '03':
                monthName = _mx2('March');
                break;
            case '04':
                monthName = _mx2('April');
                break;
            case '05':
                monthName = _mx2('May');
                break;
            case '06':
                monthName = _mx2('June');
                break;
            case '07':
                monthName = _mx2('July');
                break;
            case '08':
                monthName = _mx2('August');
                break;
            case '09':
                monthName = _mx2('September');
                break;
            case '10':
                monthName = _mx2('October');
                break;
            case '11':
                monthName = _mx2('November');
                break;
            case '12':
                monthName = _mx2('December');
                break;
        }
        return parseInt(dueDateDay) + ' ' + monthName.substr(0, 3) + ' ' + dueDateYear;
    } else {
        return dateStr;
    }
}

function changeDate(dateStr) {
    var calendarHtml = generateCalendar(dateStr);
    if (calendarHtml != '') {
        $('.popup .calendar').html(calendarHtml);
        $('.popup .calendar').parent().show();
    } else {
        $('.popup .calendar').parent().hide();
    }
    $('#due').val(dateStr);
    $('#datepicker').val(dateStr);
}

function addNewTask(thisEl) {
    $('#addNewTask .action_row > .circle-loader > .checkmark').hide();
    $('#addNewTask .action_row > .circle-loader').removeClass('load-complete');
    $('#addNewTask .action_row > .circle-loader, .buttons > .message_err, .buttons > .message_suc').hide();
    $('#addNewTask .action_row > .circle-loader').show();
    var nonce = $('#nonce').val();
    var desc = $('#addNewTask #add_description').val();
    var title = $('#addNewTask #add_title').val();
    var due = $('#addNewTask #datepicker').val();
    var priority = $('#addNewTask #taskPriority').val().toLowerCase();
    var forUser = $('#addNewTask #taskAssigned').val();
    var type = 'worker';
    var worker = workerId;
    var group = 0;
    $.post('/tasks', {
        desc: desc,
        title: title,
        due: due,
        priority: priority,
        forUser: forUser,
        type: type,
        worker: worker,
        group: group,
        nonce: nonce
    }, function (response) {
        if (response == 1) {
            $('#addNewTask .action_row > .circle-loader').addClass('load-complete');
            $('#addNewTask .action_row > .notification_row').addClass('finished');
            $('#addNewTask .action_row > .circle-loader > .checkmark').show();
            $('#addNewTask .action_row > .button').removeClass('disabled');
            $('#addNewTask .action_row > .message_suc').show();
            setTimeout(function () {
                location.reload();
            }, 1000);
        } else {
            $('#addNewTask .action_row >  .circle-loader').hide();
            $('#addNewTask .action_row >  .notification_row').addClass('finished');
            $(thisEl).removeClass('disabled');
            $('#addNewTask .action_row >  .message_err').html(response).show();
        }
    });
}

function saveChanges(thisEl) {
    $('#edit_task .action_row > .circle-loader > .checkmark').hide();
    $('#edit_task .action_row > .circle-loader').removeClass('load-complete');
    $('#edit_task .action_row > .circle-loader, .buttons > .message_err, .buttons > .message_suc').hide();
    $('#edit_task .action_row > .circle-loader').show();
    var nonce = $('#nonce').val();
    var due = $('#edit_task #due').val();
    var priority = $('#edit_task #priority .option_title').html().toLowerCase();
    var forUser = $('#edit_task #assignedTo').find('.option_title').attr('data-user');
    var type = 'worker';
    var worker = workerId;
    var group = 0;
    $.post('/tasks', {
        edit: openTask,
        due: due,
        priority: priority,
        forUser: forUser,
        type: type,
        worker: worker,
        group: group,
        nonce: nonce
    }, function (response) {
        if (response == 1) {
            $('#edit_task .action_row > .circle-loader').addClass('load-complete');
            $('#edit_task .action_row > .notification_row').addClass('finished');
            $('#edit_task .action_row > .circle-loader > .checkmark').show();
            $('#edit_task .action_row > .button').removeClass('disabled');
            $('#edit_task .action_row > .message_suc').show();
            setTimeout(function () {
                location.reload();
            }, 1000);
        } else {
            $('#edit_task .action_row >  .circle-loader').hide();
            $('#edit_task .action_row >  .notification_row').addClass('finished');
            $(thisEl).removeClass('disabled');
            $('#edit_task .action_row >  .message_err').html(response).show();
        }
    });
}

function discardTask(taskId, thisEl) {
    var nonce = $('#nonce').val();
    $.post('/tasks', {'discard': taskId, nonce: nonce}, function (response) {
        if (response == 1) {
            $(thisEl).parent().remove();
            if (typeof ps_tasks_list != 'undefined' && ps_tasks_list != null) {
                ps_tasks_list.update();
            }
        }
    });
}

function completeTask(taskId, thisEl) {
    var nonce = $('#nonce').val();
    $.post('/tasks', {'complete': taskId, nonce: nonce}, function (response) {
        if (response == 1) {
            $(thisEl).parent().remove();
            if (typeof ps_tasks_list != 'undefined' && ps_tasks_list != null) {
                ps_tasks_list.update();
            }
        }
    });
}

function taskComment() {
    var nonce = $('#nonce').val();
    var comment = $('.task_area #comment_desc').val();
    $.post('/tasks', {'reply': openTask, 'text': comment, nonce: nonce}, function (response) {
        if (response != '0') {
            var obj = jQuery.parseJSON(response);
            if (typeof obj.reply != 'undefined') {
                $('#replies').html('');
                for (var i = 0; i < obj.reply.length; i++) {
                    var reply = obj.reply[i];
                    var replyHtml = '<div class="log_event"><div class="avatar"><img src="data:image/png;base64,' + reply.avatar + '"/></div><div class="message_box"><small><b>' + reply.name + '</b>' + reply.date + '</small><p>' + (reply.text + '').replace(/([^>\r\n]?)(\r\n|\n\r|\r|\n)/g, '$1<br>$2') + '</p></div></div>';
                    $(replyHtml).appendTo('#replies');
                }
                $('#comment_desc').val('');
                if (typeof ps_tasks_chat != 'undefined' && ps_tasks_chat != null) {
                    ps_tasks_chat.update();
                }
                var countReplies = parseInt($('#replies_' + openTask).html()) + 1;
                $('#replies_' + openTask).html(countReplies);
            }
        }
    });
}

$("#stopAlertsOption").change(function () {
    var newValue = $(this).val();
    $.post(window.location.href, {'pauseAlerts': newValue,'id':workerNameCode}, function (response) {
        if ($("#removeAlertsPause").length == 0) {
            if (newValue > 0) {
                $('<div id="removeAlertsPause" class="tag paused_tag">' + _('Alerts paused') + '<div class="icon close"></div></div>').insertBefore('.notes');
            }
        } else {
            if (newValue == 0) {
                $("#removeAlertsPause").remove();
            }
        }
    });
});
$('body').on('click', '#removeAlertsPause', function () {
    $("#removeAlertsPause").remove();
    $.post(window.location.href, {'pauseAlerts': '0'});
});
$("#stopTriggersOption").change(function () {
    var newValue = $(this).val();
    $.post(window.location.href, {'pauseTriggers': newValue,id:workerNameCode}, function (response) {
        if ($("#removeTriggersPause").length == 0) {
            if (newValue > 0) {
                $('<div id="removeTriggersPause" class="tag paused_tag">' + _('Triggers paused') + '<div class="icon close"></div></div>').insertBefore('.notes');
            }
        } else {
            if (newValue == 0) {
                $("#removeTriggersPause").remove();
            }
        }
    });
});
$('body').on('click', '#removeTriggersPause', function () {
    $("#removeTriggersPause").remove();
    $.post(window.location.href, {'pauseTriggers': '0'});
});

function displayClockTuneValuesTable() {
    if (displayClockTuneValues == '0') {
        displayClockTuneValues = '1';
    } else {
        displayClockTuneValues = '0';
    }
    var d = new Date();
    d.setTime(d.getTime() + 3600 * 1000 * 24 * 7);
    var expires = "expires=" + d.toUTCString();
    document.cookie = "displayClockTuneValues=" + displayClockTuneValues + ";" + expires + ";path=/";
    dataRefresh();
}

function changeChartType() {
    if (chartType == '0') {
        chartType = '1';
        $('.icon.type_change').removeClass('line_chart');
    } else {
        chartType = '0';
        $('.icon.type_change').addClass('line_chart');
    }
    var d = new Date();
    d.setTime(d.getTime() + 3600 * 1000 * 24 * 7);
    var expires = "expires=" + d.toUTCString();
    document.cookie = "chartType=" + chartType + ";" + expires + ";path=/";
    $('.loader_frame_temp').show();
    if (chartType == '0') {
        setTimeout(function () {
            $.each(chartHardwarePower.series, function (j, series) {
                series.update({type: 'column',});
            });
            if (selectedTab == 'power') {
                chartHardwarePower.redraw();
                chartHardwarePower.reflow();
            }
            $.each(chartHardwareHashrate.series, function (j, series) {
                series.update({type: 'column',});
            });
            if (selectedTab == 'hashrate') {
                chartHardwareHashrate.redraw();
                chartHardwareHashrate.reflow();
            }
            $('.loader_frame_temp').hide();
        }, 500);
    } else {
        setTimeout(function () {
            $.each(chartHardwarePower.series, function (j, series) {
                series.update({type: 'spline'});
            });
            if (selectedTab == 'power') {
                chartHardwarePower.redraw();
                chartHardwarePower.reflow();
            }
            $.each(chartHardwareHashrate.series, function (j, series) {
                series.update({type: 'spline'});
            });
            if (selectedTab == 'hsahrate') {
                chartHardwareHashrate.redraw();
                chartHardwareHashrate.reflow();
            }
            $('.loader_frame_temp').hide();
        }, 500);
    }
}

function changeChartColors() {
    if (chartColors == '0') {
        chartColors = '1';
        $('.icon.color_change').removeClass('rainbow');
    } else {
        chartColors = '0';
        $('.icon.color_change').addClass('rainbow');
    }
    var d = new Date();
    d.setTime(d.getTime() + 3600 * 1000 * 24 * 7);
    var expires = "expires=" + d.toUTCString();
    document.cookie = "chartColors=" + chartColors + ";" + expires + ";path=/";
    $('.loader_frame_temp').show();
    if (chartColors == '0') {
        if (workerType == 'nvidia') {
            tempColors = colorsNvidia;
        }
        if (workerType == 'amd') {
            tempColors = colorsAmd;
        }
        if (workerType == 'asic') {
            tempColors = colorsASIC;
        }
    } else {
        tempColors = colorsRainbow;
    }
    dataRefresh();
    setTimeout(function () {
        $.each(chartHardwareTemps.series, function (j, series) {
            if ((series.name).indexOf('Navigator') == -1) {
                series.update({color: tempColors[j]});
            }
        });
        $.each(chartHardwareFans.series, function (j, series) {
            if ((series.name).indexOf('Navigator') == -1) {
                series.update({color: tempColors[j]});
            }
        });
        $.each(chartHardwarePower.series, function (j, series) {
            if ((series.name).indexOf('Navigator') == -1) {
                series.update({color: tempColors[j]});
            }
        });
        $.each(chartHardwareHashrate.series, function (j, series) {
            if ((series.name).indexOf('Navigator') == -1) {
                series.update({color: tempColors[j]});
            }
        });
        if (selectedTab == 'temperatures') {
            chartHardwareTemps.redraw();
            chartHardwareTemps.reflow();
        }
        if (selectedTab == 'fans') {
            chartHardwareFans.redraw();tag
            chartHardwareFans.reflow();
        }
        if (selectedTab == 'power') {
            chartHardwarePower.redraw();
            chartHardwarePower.reflow();
        }
        if (selectedTab == 'hashrate') {
            chartHardwareHashrate.redraw();
            chartHardwareHashrate.reflow();
        }
        $('.loader_frame_temp').hide();
    }, 500);
}

//获取地址栏参数
function myGetHref() {
    let str=window.location.href
    $('#static_href').attr('href','/worker-statistics#'+window.location.href.split('#')[1])
    return  str.split('#')[1]

}

//配置跳转
function linkConfig(myid) {
    localStorage.setItem('myWorkes',myid)
    window.location.href='/config#mx'
    localStorage.setItem('myType','worker')
}

$('.myConsoleLog').on('click',function () {
    if($(this).hasClass('isLog')){
        return
    }else {
        let list = document.getElementsByClassName('myConsoleLog')
        $.each(list,function (i,it) {
            $(it).removeClass('isLog')
        })
        $(this).addClass('isLog')

        if($(this).attr('data-sx')=='soft'){
            $('.text_frame').html('加载中...')
            myCache=undefined
            clearInterval(clienxm2)
            clienxm=setInterval('setConsoleText()',1000)
        }else {
            $('.text_frame').html('加载中...')
            myCache=undefined
            clearInterval(clienxm)
            clienxm2=setInterval('setClientText()',1000)
        }

    }
})

function myBigImg(e) {
    var imgsrc = $(e).attr("src");
    var opacityBottom = '<div class="opacityBottom" style = "display:none"><img class="bigImg" src="' + imgsrc + '"></div>';
    $(document.body).append(opacityBottom);
    toBigImg();//变大函数
}
function toBigImg() {
    $(".opacityBottom").addClass("opacityBottom");//添加遮罩层
    $(".opacityBottom").show();
    $("html,body").addClass("none-scroll");//下层不可滑动
    $(".bigImg").addClass("bigImg");//添加图片样式
    $(".opacityBottom").click(function () {//点击关闭
        $("html,body").removeClass("none-scroll");
        $(".opacityBottom").remove();
    });
}
$('#snapshoot').on('click',function () {
    $('#imgWin').show()
    $('#imgWin_2').show()
    const obj={
        toolbar:false,
        title:false,
        navbar:false
    }
    new Viewer($('#imgWin_1')[0],obj)
    errImg()
    // $('#imgWin img').attr('src',`/WorkerInfo?a=screenshot&mid=65221092672`)
    $('#imgWin_1').hide()

})
$('#newDataHtml').on('click',function () {
    $('#consoleWin').show()
    $('#consoleWin iframe').attr('src','/minerWeb?mid='+workerNameCode)
})


window.onload = function () {
    getNowOCtemp()
}

//获取超频模板
function getTempList(s) {
   let str=''
    $.ajax({
        url:'query?overclock',
        type:'post',
        success:function (res) {
            $.each(res.OVERCLOCK,function (i,it) {
                if(s.overclock==it.id){
                    str+='<div class="row_outside">' +
                        '    <div class="row selected" data-template="'+it.id+'">'+it.video+'</div>' +
                        '    <a target="_blank" href="/clocktune/new#s=edit&id='+it.id+'" class="edit_area">' +
                        '        <div class="icon edit"></div>' +
                        '    </a>' +
                        '</div>'
                }else {
                    str+='<div class="row_outside">' +
                        '    <div class="row" data-template="'+it.id+'">'+it.video+'</div>' +
                        '    <a target="_blank" href="/clocktune/new#s=edit&id='+it.id+'" class="edit_area">' +
                        '        <div class="icon edit"></div>' +
                        '    </a>' +
                        '</div>'
                }
            })
            $('#OClist').html(str)

            $('.clocktune_menu').on('click', '.row', function () {
                if ($(this).hasClass('selected')) {
                    $('.clocktune_menu').fadeOut('fast');
                    return false;
                }

                var template = $(this).attr('data-template');
                var nonce = $('#nonce').val();
                if (workerName == '' || nonce == '') {
                    return false;
                }

                $('.clocktune_menu').find('.row').removeClass('selected');
                $(this).addClass('selected');
                let obj=s
                obj['worker']=workerNameCode
                obj['nonce']=nonce
                obj['overclock']=template
                $.post('/config?a=set',obj, function (response) {

                });
            });
        }
    })
}
function getNowOCtemp() {
    $.ajax({
        url:'/config?a=get',
        type:'post',
        data:{
            worker:workerNameCode
        },
        success:function (res) {
            getTempList(res.data)
        }
    })
}
$('#startUsing').on('click',function () {
    $('#startUsingWin').show()
    $('.popupbackground').fadeIn()
    $('#startUsingWin .title').html(_mx('start using')+' '+workerName)
})
$('#forbidden').on('click',function () {
    $('#forbiddenWin').show()
    $('.popupbackground').fadeIn()
    $('#forbiddenWin .title').html(_mx('forbidden')+' '+workerName)
})

$('#startUsingWin .blue').on('click',function () {
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    $.ajax({
        url:'/workers',
        type:'post',
        data:{
          Enable:1,
          worker:workerNameCode
        },
        success:function () {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#startUsingWin').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#startUsingWin .outlined_button, #startUsingWin .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
                window.location.reload()
            }, 3000);
        }
    })
})

$('#forbiddenWin .red').on('click',function () {
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    $.ajax({
        url:'/workers',
        type:'post',
        data:{
          Enable:0,
          worker:workerNameCode
        },
        success:function () {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#forbiddenWin').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#forbiddenWin .outlined_button, #forbiddenWin .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
                window.location.reload()
            }, 3000);
        }
    })
})


var myCache=undefined
//获取软件日志
function setConsoleText() {
    if(textLog.length>1024*1024*5){
        textLog=''
        myCache=''
    }
    $.ajax({
        url:`/softlog?&mid=${workerNameCode}&cache=`+myCache,
        type:'post',
        dataType:'json',
        success:function (res) {
            if(res.type=="wait"){
                $('.text_frame').html('无日志')
            }else if(res.type=="new"){
                let str=res.context.replace(/[<]/g,"&lt;").replace(/\r\n/g,"<br>")
                $('.text_frame').html(str)
                textLog=str
                if($('#ConsloleimgWin').is(':visible')){
                    $('#ConsloleimgWin .inTextmm').html(textLog)

                }
            }else {
                let str=res.context.replace(/[<]/g,"&lt;").replace(/\r\n/g,"<br>")
                $('.text_frame').append(str)
                textLog=textLog+str
                if($('#ConsloleimgWin').is(':visible')){
                    $('#ConsloleimgWin .inTextmm').html(textLog)
                }
            }
            if(res.context!==''&&rollState){
                $('#ConsloleimgWin .inTextmm')[0].scrollTop= $('#ConsloleimgWin .inTextmm')[0].scrollHeight
            }
            myCache=res.cache
        }
    })
}
//获取核心日志
function setClientText() {
    if(textLog.length>1024*1024*5){
        textLog=''
        myCache=''
    }
    $.ajax({
        url:`/minerlog?&mid=${workerNameCode}&cache=`+myCache,
        type:'post',
        dataType:'json',
        success:function (res) {
            if(res.type=="wait"){
                $('.text_frame').html('无日志')
            }else if(res.type=="new"){
                let str=res.context.replace(/[<]/g,"&lt;").replace(/\r\n/g,"<br>")
                $('.text_frame').html(str)
                textLog=str
                textLog=str
                if($('#ConsloleimgWin').is(':visible')){
                    $('#ConsloleimgWin .inTextmm').html(textLog)
                }
            }else {
                let str=res.context.replace(/[<]/g,"&lt;").replace(/\r\n/g,"<br>")
                $('.text_frame').append(str)
                textLog=textLog+str

                if($('#ConsloleimgWin').is(':visible')){
                    $('#ConsloleimgWin .inTextmm').html(textLog)
                }
           }
            if(res.context!==''&&rollState){
                $('#ConsloleimgWin .inTextmm')[0].scrollTop= $('#ConsloleimgWin .inTextmm')[0].scrollHeight
            }
            myCache=res.cache
        }
    })
}
function rouseMachine() {
    if (!$('#rouseMachine').hasClass('disabled')) {
        $('#RouseMachineWin .title').html(_mx('Rouse Machine') + ' ' + workerName + '?');
        $('.popupbackground').fadeToggle();
        $('#RouseMachineWin').fadeToggle('fast');
    }
}
$('#RouseMachineWin .blue').on('click', function () {
    if ($(this).hasClass('disabled')) {
        return false;
    }
    $('#RouseMachineWin .outlined_button, #RouseMachineWin .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var nonce = $('#nonce').val();
    $.post('/workers', {wakeUp: workerNameCode, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#rouseMachine').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#RouseMachineWin .outlined_button, #RouseMachineWin .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
            }, 3000);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#RouseMachineWin .outlined_button, #RouseMachineWin .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#RouseMachineWin .outlined_button, #RouseMachineWin .blue').removeClass('disabled');
        }, 4500);
    });
});
//获取截图
let myErrImgT=0
let errLock=1
function errImg() {
    myErrImgT=setTimeout(function () {
        var url = `/WorkerInfo?a=screenshot&mid=${workerNameCode}`;
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = "blob";
        xhr.setRequestHeader("client_type", "DESKTOP_WEB");
        // xhr.setRequestHeader("desktop_web_access_key", _desktop_web_access_key);
        xhr.onload = function() {
            if(this.response.type == 'image/jpeg'){
                $("#imgWin_1").attr('src',window.URL.createObjectURL(this.response));
                $("#imgWin_1").show()
                $("#imgWin_2").hide()
                $('#imgLoading').hide()
            }else {
                if(!$('#imgWin').is(':hidden')){
                    errImg()
                }
                // $("#imgWin_1").attr('src','');
                // $("#imgWin_2").show()
                // $("#imgWin_1").hide()
            }
            // clearTimeout(myErrImgT)
            errLock=1
        }
        xhr.send();
    },1000)
}

function toLinkS() {
    window.location.href=`/worker-statistics#${workerNameCode}`
}

function RefreshImg(e) {
    if(errLock==0){
        return
    }
    $('#imgLoading').show()
    errLock=0
    errImg()
    // $('#imgWin_1').attr('src','')
    // $('#imgWin_1').hide()
    // $("#imgWin_2").show()
    // $('#imgWin img').attr('src',`/WorkerInfo?a=screenshot&mid=${workerNameCode}`)
}
selectOcList('select_Gpu_list')
function setInofOCDom() {
    var valuesBoxStr = '';

    var selectedGPU = $('#clocktune_nvidia_windows > select').val();
    jQuery.each(list_OC_GPU_type[selectedGPU].num, function (parameter, value) {
        if (parameter != 'popularity') {
            valuesBoxStr += '<div class="row"><label class="parameter">' + _mx(ocTypeCs(parameter)) + '</label><label class="value">' + OCUnit(value,parameter) + '</label></div>';
        }
    });
    $('#clocktune_nvidia_windows_values').html(valuesBoxStr);
}
function openDropdown(dropdownType) {
    if (!$('#' + dropdownType).closest('.col_1_2').hasClass('disabled')) {
        if ($('#' + dropdownType).css('display') == 'none' || $('#' + dropdownType).css("visibility") == "hidden") {
            $('.clocktune_values').hide();
        }
        setInofOCDom()
        $('#' + dropdownType).toggle();
    }
}

$('#clocktune_nvidia_windows > select').on('change', function () {
    setInofOCDom()
});

var spaceChar = ' ';
if (typeof newProfile != 'undefined' && newProfile == '1') {
    spaceChar = '';
}
function loadValues(dropdownType, thisEl) {
    var selectedGPU = $(thisEl).parent().children('select').val();
    // var clocktuneDataJson = jQuery.parseJSON(clocktuneData);
    var clocktuneDataJson = clocktuneData;
    if (dropdownType == 'clocktune_nvidia_windows') {
        if(!myAllLock){
            var powerlimit = spaceChar + 'skip';
            var coreclock = spaceChar + 'skip';
            var memoryclock = spaceChar + 'skip';
            let Temperature= spaceChar + 'skip'
            let Corevoltage= spaceChar + 'skip'
            let Memoryvoltage= spaceChar + 'skip'
            let fanx= spaceChar + '0'
            jQuery.each(list_OC_GPU_type[selectedGPU].num, function (parameter, value) {
                if (parameter == 'power') {
                    powerlimit = spaceChar + parseInt(value);
                }
                if (parameter == 'core') {
                    coreclock = spaceChar + parseInt(value);
                }
                if (parameter == 'cvolt') {
                    Corevoltage = spaceChar + parseInt(value);
                }
                if (parameter == 'mvolt') {
                    Memoryvoltage = spaceChar + parseInt(value);
                }
                if (parameter == 'mem') {
                    memoryclock = spaceChar + parseInt(value);
                }
                if (parameter == 'fan') {
                    fan = spaceChar + parseInt(value);
                }
            });
            $('.fixed_frame').find('.powerlimit').val($('.fixed_frame').find('.powerlimit').val() + powerlimit);
            $('.fixed_frame').find('.coreclock').val($('.fixed_frame').find('.coreclock').val() + coreclock);
            $('.fixed_frame').find('.memoryclock').val($('.fixed_frame').find('.memoryclock').val() + memoryclock);
            // $('.fixed_frame').find('.pstate').val($('.fixed_frame').find('.pstate').val() + pstate);
            $('.fixed_frame').find('.Mtemperature').val($('.fixed_frame').find('.Mtemperature').val() + Temperature);
            $('.fixed_frame').find('.Mvoltage').val($('.fixed_frame').find('.Mvoltage').val() + Memoryvoltage);
            $('.fixed_frame').find('.Cvoltage').val($('.fixed_frame').find('.Cvoltage').val() + Corevoltage);
            $('.fixed_frame').find('.fans').val($('.fixed_frame').find('.fans').val() + fanx);
        }else {
            var powerlimit = 'skip';
            var coreclock = 'skip';
            var memoryclock = 'skip';
            // var pstate = 'skip';
            let Temperature='skip'
            let Corevoltage='skip'
            let Memoryvoltage='skip'
            let fan=0
            jQuery.each(list_OC_GPU_type[selectedGPU].num, function (parameter, value) {
                if (parameter == 'power') {
                    powerlimit = parseInt(value);
                }
                if (parameter == 'core') {
                    coreclock =  parseInt(value);
                }
                if (parameter == 'cvolt') {
                    Corevoltage = parseInt(value);
                }
                if (parameter == 'mvolt') {
                    Memoryvoltage = parseInt(value);
                }
                if (parameter == 'mem') {
                    memoryclock = parseInt(value);
                }
                if (parameter == 'fan') {
                    fan = parseInt(value);
                }
            });
            $('.fixed_frame').find('.powerlimit').val(powerlimit);
            $('.fixed_frame').find('.coreclock').val(coreclock);
            $('.fixed_frame').find('.memoryclock').val(memoryclock);
            // $('.fixed_frame').find('.pstate').val(pstate);
            $('.fixed_frame').find('.Mtemperature').val(Temperature);
            $('.fixed_frame').find('.Mvoltage').val(Memoryvoltage);
            $('.fixed_frame').find('.Cvoltage').val(Corevoltage);
            $('.fixed_frame').find('.fans').val(fan);
        }
        spaceChar = ' '
    }
}
$(document).mousedown(function (e) {
    var container = $(".clocktune_values");
    if (!container.is(e.target) && container.has(e.target).length === 0 && (!$(".button.gray").is(e.target)) && e.target.localName != 'html') {
        container.hide();
    }
});
function setOcFrom(data) {
    if(typeof data!='undefined'){
        $('.fixed_frame').find('.powerlimit').val(data.power);
        $('.fixed_frame').find('.coreclock').val(data.core);
        $('.fixed_frame').find('.memoryclock').val(data.mem);
        $('.fixed_frame').find('.Mtemperature').val(data.temp);
        $('.fixed_frame').find('.Mvoltage').val(data.mvolt);
        $('.fixed_frame').find('.Cvoltage').val(data.cvolt);
        $('.fixed_frame').find('.fans').val(data.fan)
    }else {
        $('.fixed_frame').find('.powerlimit').val('');
        $('.fixed_frame').find('.coreclock').val('');
        $('.fixed_frame').find('.memoryclock').val('');
        $('.fixed_frame').find('.Mtemperature').val('');
        $('.fixed_frame').find('.Mvoltage').val('');
        $('.fixed_frame').find('.Cvoltage').val('');
        $('.fixed_frame').find('.fans').val('')
    }
}

//设置按钮隐藏显示
function setBtnShow(type) {
   if(my_wy_key>0){
       switch (type) {
           case 'anyhowmining':
               $('#notificationsButton').show()//消息
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').show()//禁用机器
               $('#static_href').show()
               $('#snapshoot').show()//快照
               $('#newDataHtml').show()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启内核
               $('#rebootMachine').hide()//重启机器
               $('#stopMining').show()//停止挖矿
               $('#shutdownMachine').hide()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startUsing').hide()//启用
               $('#startMining').hide()//启动挖矿
               break
           case 'online':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').show()//禁用机器
               $('#snapshoot').show()//快照
               $('#newDataHtml').show()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启软件
               $('#rebootMachine').show()//重启机器
               $('#stopMining').show()//停止挖矿
               $('#shutdownMachine').show()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startUsing').hide()//启用
               $('#startMining').hide()//启动挖矿
               break
           case 'offline':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').show()//禁用机器
               $('#snapshoot').hide()//快照
               $('#newDataHtml').hide()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').hide()//重启软件
               $('#restartMiner').hide()//重启软件
               $('#rebootMachine').hide()//重启机器
               $('#stopMining').hide()//停止挖矿
               $('#startMining').hide()//启动挖矿
               $('#shutdownMachine').hide()//关机
               $('#rouseMachine').show()//唤醒机器
               $('#startUsing').hide()//启用
               break
           case 'idle':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').show()//禁用机器
               $('#snapshoot').show()//快照
               $('#newDataHtml').hide()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启软件
               $('#rebootMachine').show()//重启机器
               $('#stopMining').hide()//停止挖矿
               $('#shutdownMachine').show()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startMining').show()//启动挖矿
               $('#startUsing').hide()//启用
               break
           case 'disable':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').hide()//禁用机器
               $('#snapshoot').show()//快照
               $('#newDataHtml').hide()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启软件
               $('#rebootMachine').show()//重启机器
               $('#stopMining').hide()//停止挖矿
               $('#shutdownMachine').show()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startMining').show()//启动挖矿
               $('#startUsing').show()//启用
               break
           case 'unable':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').hide()//禁用机器
               $('#snapshoot').show()//快照
               $('#newDataHtml').hide()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启软件
               $('#rebootMachine').show()//重启机器
               $('#stopMining').hide()//停止挖矿
               $('#shutdownMachine').show()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startMining').hide()//启动挖矿
               $('#startUsing').hide()//启用
               break
           case 'untime':
               $('#notificationsButton').show()//消息
               $('#static_href').show()
               $('#editConfig').show()//配置
               $('#s_tx').show()//统计
               $('#forbidden').show()//禁用机器
               $('#snapshoot').show()//快照
               $('#newDataHtml').hide()//网页挖矿数据
               $('#clockTune').show()//超频模板
               $('#restartSoftware').show()//重启软件
               $('#restartMiner').show()//重启软件
               $('#rebootMachine').show()//重启机器
               $('#stopMining').hide()//停止挖矿
               $('#shutdownMachine').show()//关机
               $('#rouseMachine').hide()//唤醒机器
               $('#startMining').show()//启动挖矿
               $('#startUsing').hide()//启用
               break
           // case 'starting':
           //     $('#notificationsButton').hide()//消息
           //     $('#editConfig').hide()//配置
           //     $('#s_tx').hide()//统计
           //     $('#forbidden').hide()//禁用机器
           //     $('#snapshoot').hide()//快照
           //     $('#newDataHtml').hide()//网页挖矿数据
           //     $('#clockTune').hide()//超频模板
           //     $('#restartSoftware').hide()//重启软件
           //     $('#restartMiner').hide()//重启软件
           //     $('#rebootMachine').hide()//重启机器
           //     $('#stopMining').hide()//停止挖矿
           //     $('#shutdownMachine').hide()//关机
           //     $('#rouseMachine').hide()//唤醒机器
           //     $('#startMining').hide()//启动挖矿
           //     $('#startUsing').hide()//启用
           //     break
           // case 'stoping':
           //     $('#notificationsButton').hide()//消息
           //     $('#editConfig').hide()//配置
           //     $('#s_tx').hide()//统计
           //     $('#forbidden').hide()//禁用机器
           //     $('#snapshoot').hide()//快照
           //     $('#newDataHtml').hide()//网页挖矿数据
           //     $('#clockTune').hide()//超频模板
           //     $('#restartSoftware').hide()//重启软件
           //     $('#restartMiner').hide()//重启软件
           //     $('#rebootMachine').hide()//重启机器
           //     $('#stopMining').hide()//停止挖矿
           //     $('#shutdownMachine').hide()//关机
           //     $('#rouseMachine').hide()//唤醒机器
           //     $('#startMining').hide()//启动挖矿
           //     $('#startUsing').hide()//启用
           //     break
       }
   }else {
       hideBtnAll()
   }

}

//设置是否滚动
function setRoll() {
    let type = $('#rollBtn').attr('data-vax')
    if(type=='1'){
        rollState=false
        $('#rollBtn').addClass('blue')
        $('#rollBtn').html(_mx('开启滚动'))
        $('#rollBtn').attr('data-vax','0')
    }else {
        rollState=true
        $('#rollBtn').removeClass('blue')
        $('#rollBtn').html(_mx('关闭滚动'))
        $('#rollBtn').attr('data-vax','1')
    }
}
$(document).on('visibilitychange', function () {

    if (document.visibilityState == 'hidden') {
        if ($('.clocktune_popup').is(":visible")) {
            wasHidden = 0;
        } else {
            wasHidden = 1;
        }
    } else {
        if ((globalStatus == 'offline' || globalStatus == 'idle') && wasHidden == 1) {
            wasHidden = 0;
            dataRefresh();
        } else {
            wasHidden = 0;
        }
    }
});
