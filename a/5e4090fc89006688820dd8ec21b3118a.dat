var checkedNum = 0;
var refreshStop = 0;
var jsonWorkers = [];
var restWorkers = []
var toFixedValue = 2;
if (currency == "BTC") {
    toFixedValue = 5;
}
var groupsFrame;
var coinsFrame;
var clientsFrame;
var wasHidden = 0;
$(document).on('visibilitychange', function () {
    if (document.visibilityState == 'hidden') {
        if ($('.new_worker_menu').is(":visible")) {
            wasHidden = 0;
        } else {
            wasHidden = 1;
        }
    } else {
        wasHidden = 0;
        workersRefresh(true);
    }
});
var workersStabilityArray = [];
if (workersStability != 'null') {
    workersStabilityArray = JSON.parse(workersStability);
}
var workersRebootsArray = [];
if (workersReboots != 'null') {
    workersRebootsArray = JSON.parse(workersReboots);
}
var workersConsoleArray = [];
if (workersConsole != 'null') {
    workersConsoleArray = JSON.parse(workersConsole);
}
if ($('.discover_workers_menu').length > 0) {
    var ps_discovery = new PerfectScrollbar('.discover_workers_menu #finish .frame', {
        wheelSpeed: 1,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
if ($('.actions_submenu').length > 0) {
    var ps_bulk_switch = new PerfectScrollbar('.actions_submenu .frame', {
        wheelSpeed: 1,
        minScrollbarLength: 20,
        wheelPropagation: false,
        suppressScrollX: true
    });
}
(function ($) {
    $(window).on("load", function () {
        if (document.getElementById("groupsFrame") !== null) {
            groupsFrame = new PerfectScrollbar('#groupsFrame', {wheelSpeed: 1, wheelPropagation: false});
            groupsFrame.update();
        }
        if (document.getElementById("coinsFrame") !== null) {
            coinsFrame = new PerfectScrollbar('#coinsFrame', {wheelSpeed: 1, wheelPropagation: false});
            coinsFrame.update();
        }
        if (document.getElementById("clientsFrame") !== null) {
            clientsFrame = new PerfectScrollbar('#clientsFrame', {wheelSpeed: 1, wheelPropagation: false});
            clientsFrame.update();
        }
    });
})(jQuery);
/****************************************************************************************************/
var total_page=0
var search_page=1
var search_count=10
var search_text=''
var searchObj={
    'Status':'',
    'Mining issues':'',
    'Temperature':'',
    'Misc':'',
    'Stability':'',
    'Groups':'',
    'Coins':'',
}
/********************/
var selectedWorkers = [];
function selectAll(thisElem) {
    totalNumWorkers = jsonWorkers.length;
    if (checkedNum > 0) {
        $('#checked_rows').hide();
        $('th').removeClass('hidden');
        $('#actions_menu').hide();
        $('table .checkbox').removeClass('selected');
        checkedNum = 0;
        $('#count').html(0);
        selectedWorkers = [];
    } else {
        $('table .checkbox').removeClass('selected');
        $('table tr:visible .checkbox').addClass('selected');
        $('#checked_rows').show();
        $('th').addClass('hidden');
        $('.check').show();
        selectedWorkers = [];
        $.each(jsonWorkers, function (wName, value) {
            var searchFound = false;
            var tagFound = false;
            if (tag != '') {
                var tagsTag = tag.split(":");
                var tagsArray = value.groups.toLowerCase().split(",");
                var tagsArrayFilter = value.filterString.split(",");
                tagsArray = tagsArray.concat(tagsArrayFilter);
                var tagsArrayNew = tagsArray.filter(function (el) {
                    return el != null && el != "";
                });
                tagsArray = tagsArrayNew;
                $.each(tagsTag, function (tagIndex, tagValue) {
                    if (tagsArray.indexOf(tagValue) !== -1) {
                        tagFound = true;
                    } else {
                        tagFound = false;
                        return false;
                    }
                });
            } else {
                tagFound = true;
            }
            if (search != '') {
                if (value['crypto'].toLowerCase().indexOf(search.toLowerCase()) >= 0 || value['name'].toLowerCase().indexOf(search.toLowerCase()) >= 0 || value['groups'].toLowerCase().indexOf(search.toLowerCase()) >= 0 || value['localip'].indexOf(search.toLowerCase()) >= 0 || value['remoteip'].indexOf(search.toLowerCase()) >= 0) {
                    searchFound = true;
                }
            } else {
                searchFound = true;
            }
            if (searchFound && tagFound) {
                selectedWorkers.push(value['id']);
                checkedNum++;
                $('#count').html(checkedNum);
            }
        });
    }
}

$(function () {
    $('table').on('click', 'td .checkbox', function () {
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            checkedNum--;
            $('#count').html(checkedNum);
            if (checkedNum == 0) {
                $('#checked_rows').hide();
                $('th').removeClass('hidden');
                $('#actions_menu').hide();
                selectedWorkers = [];

            } else {
                // var index = selectedWorkers.indexOf($(this).closest('[data-name]').attr('data-name'));
                var index = selectedWorkers.indexOf($(this).closest('[data-id]').attr('data-id'));
                if (index > -1) {
                    selectedWorkers.splice(index, 1);
                }
            }
        } else {
            $(this).addClass('selected');
            checkedNum++;
            $('#checked_rows').show();
            $('th').addClass('hidden');
            $('#count').html(checkedNum);
            $('.check').show();
            selectedWorkers.push($(this).closest('[data-id]').attr('data-id'));
        }
    });
    $('.filter_menu .checkbox').click(function () {
        var filterVal = $(this).parent().attr('data-value');
        if ($(this).hasClass('selected')) {
            $(this).removeClass('selected');
            $('table .filter_' + filterVal).each(function () {
                $(this).hide();
            });
        } else {
            $(this).addClass('selected');
            $('table .filter_' + filterVal).each(function () {
                $(this).show();
            });
        }
    });
    $('#actions_button').click(function () {
        $('#actions_menu').fadeToggle('fast');
    });
    $('#addNewWorker').click(function () {
        $('.new_worker_menu').fadeToggle('fast');
    });
    var manualMode = 1;
    $('#discoverNewWorker').click(function () {
        if ($('#discoverNewWorker').parent().hasClass('button_group')) {
            $('.discover_workers_menu').fadeToggle('fast');
        } else {
            if (manualMode == 1) {
                $('.discover_workers_menu').show();
                $('.add_new_worker_menu').hide();
                $(this).html(_('Switch to manual mode'));
                manualMode = 0;
            } else {
                $('.discover_workers_menu').hide();
                $('.add_new_worker_menu').show();
                $(this).html(_('Switch to Discovery tool'));
                manualMode = 1;
            }
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".button_group .new_worker_menu");
        if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#addNewWorker").is(e.target)) && (!$(".icon.plus").is(e.target)) && e.target.localName != 'html') {
            container.hide();
        }
    });
    $(document).mousedown(function (e) {
        var container = $(".button_group .discover_workers_menu");
        if (!container.is(e.target) && container.has(e.target).length === 0 && (!$("#discoverNewWorker").is(e.target)) && (!$(".icon.discover").is(e.target)) && e.target.localName != 'html') {
            container.hide();
        }
    });
    $('#type').change(function () {
        if ($(this).val() == 'asic') {
            $('#asic_login').show();
            $('#system_asic').show();
            $('#system_gpu').hide();
            $('#tags .tag_system').html($('#system_asic option:selected').val());
        } else {
            $('#system_gpu').show();
            $('#system_asic').hide();
            $('#asic_login').hide();
            $('#tags .tag_system').html($('#system_gpu option:selected').val());
        }
        $('#tags .tag_type').html($(this).val());
    });
    $('#system_asic,#system_gpu').change(function () {
        if ($(this).val() == 'dragonmint') {
            $('#sshpass').val('dragonadmin');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'antminer') {
            $('#sshpass').val('admin');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'aisen') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'avalon') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'obelisk') {
            $('#sshpass').val('admin');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'blackminer') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'strongu') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'baikal') {
            $('#sshpass').val('root');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'fusionsilicon') {
            $('#sshpass').val('fusion');
            $('#sshuser').val('fusion');
        } else if ($(this).val() == 'innosilicon') {
            $('#sshpass').val('innot1t2');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'goldshell') {
            $('#sshpass').val('123456789');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'ebang') {
            $('#sshpass').val('admin');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'toddminer') {
            $('#sshpass').val('admin');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'cheetah') {
            $('#sshpass').val('admin');
            $('#sshuser').val('admin');
        } else if ($(this).val() == 'dayun') {
            $('#sshpass').val('envision');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'spondoolies') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'hyperbit') {
            $('#sshpass').val('bwcon');
            $('#sshuser').val('root');
        } else if ($(this).val() == 'whatsminer') {
            $('#sshpass').val('root');
            $('#sshuser').val('root');
        }
        $('#tags .tag_system').html($(this).val());
    });
    $("#tag").keyup(function (e) {
        var value = $('#tag').val();
        value = value.replace(/[^a-zA-Z0-9]+/g, "");
        value = value.substring(0, 10);
        $('#tag').val(value);
        if ((e.which == 13 || e.which == 32) && value != '') {
            $("#tags #tag").before('<div class="tag" data-value="' + value + '">' + value + ' <div class="icon close"></div></div>');
            $('#tag').val('').focus();
        }
    });
    $("#tags").click(function (event) {
        if (event.target.id == "tags") {
            $('#tag').focus();
        }
    });
    $(document).on('click', '.tag .close', function () {
        $(this).parent().remove();
    });
    $('#popup_type').change(function () {
        if ($(this).val() == 'asic') {
            $('.text.asic').show();
            $('#popup_system_asic').show();
            $('#popup_system_gpu').hide();
            $('#rename_worker #popup_system_asic option').removeAttr('selected');
            $('#rename_worker #popup_system_gpu option').removeAttr('selected');
            $('#popup_system_asic option[value="antminer"]').attr("selected", "selected");
            $('.asicpassword').val('admin');
            $('.asicuser').val('root');
            $('#groups .tag_system').html($('#popup_system_asic option:selected').val());
        } else {
            $('#popup_system_gpu').show();
            $('#popup_system_asic').hide();
            $('.text.asic').hide();
            $('#groups .tag_system').html($('#popup_system_gpu option:selected').val());
        }
        $('#groups .tag_type').html($(this).val());
    });
    $('#popup_system_asic,#popup_system_gpu').change(function () {
        if ($(this).val() == 'dragonmint') {
            $('.asicpassword').val('dragonadmin');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'antminer') {
            $('.asicpassword').val('admin');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'aisen') {
            $('.asicpassword').val('root');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'avalon') {
            $('.asicpassword').val('root');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'obelisk') {
            $('.asicpassword').val('admin');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'blackminer') {
            $('.asicpassword').val('root');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'strongu') {
            $('.asicpassword').val('root');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'baikal') {
            $('.asicpassword').val('root');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'fusionsilicon') {
            $('.asicpassword').val('fusion');
            $('.asicuser').val('fusion');
        } else if ($(this).val() == 'innosilicon') {
            $('.asicpassword').val('innot1t2');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'goldshell') {
            $('.asicpassword').val('123456789');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'ebang') {
            $('.asicpassword').val('admin');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'toddminer') {
            $('.asicpassword').val('admin');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'cheetah') {
            $('.asicpassword').val('admin');
            $('.asicuser').val('admin');
        } else if ($(this).val() == 'dayun') {
            $('.asicpassword').val('envision');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'spondoolies') {
            $('.asicpassword').val('root');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'hyperbit') {
            $('.asicpassword').val('bwcon');
            $('.asicuser').val('root');
        } else if ($(this).val() == 'whatsminer') {
            $('asicpassword').val('root');
            $('.asicuser').val('root');
        }
        $('#groups .tag_system').html($(this).val());
    });
    $("#popup_tag").keyup(function (e) {
        var value = $('#popup_tag').val();
        value = value.replace(/[^a-zA-Z0-9]+/g, "");
        value = value.substring(0, 10);
        $('#popup_tag').val(value);
        if ((e.which == 13 || e.which == 32) && value != '') {
            $("#groups #popup_tag").before('<div class="tag" data-value="' + value + '">' + value + ' <div class="icon close"></div></div>');
            $('#popup_tag').val('').focus();
        }
    });
    $("#groups").click(function (event) {
        if (event.target.id == "groups") {
            $('#popup_tag').focus();
        }
    });
    $('#button_addworker').on('click', function () {
        var $this = $(this);
        if ($this.hasClass('disabled')) {
            return false;
        }
        $this.addClass('disabled');
        $('.checkmark').hide();
        $('.circle-loader').removeClass('load-complete');
        $('.circle-loader, .message_err, .message_suc').hide();
        $('.circle-loader').show();
        var workerName = $('#workerName').val();
        var type = $('#type').val();
        if (type == 'asic') {
            var system = $('#system_asic').val();
            var asicIp = $('#ip').val();
            var asicSSHuser = $('#sshuser').val();
            var asicSSHpass = $('#sshpass').val();
        } else {
            var system = $('#system_gpu').val();
            var asicIp = '';
            var asicSSHuser = '';
            var asicSSHpass = '';
        }
        var tags = '';
        $('#tags').find('.tag').each(function () {
            tags += ';' + $(this).attr('data-value') + ';';
        });
        var nonce = $('#nonce').val();
        var data = '';
        $.post(window.location.href, {
            workerName: workerName,
            sshuser: asicSSHuser,
            sshpass: asicSSHpass,
            asicIp: asicIp,
            type: type,
            system: system,
            groups: tags,
            nonce: nonce
        }, function (response) {
            data = response;
            if (data == '1') {
                if ($('#newWorker').val() == 'yes') {
                    var d = new Date();
                    d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * 365);
                    var expires = "expires=" + d.toLocaleTimeString();
                    document.cookie = "cmode=automaticConfig;" + expires + ";path=/";
                    window.location.replace("/worker/" + workerName);
                } else {
                    location.reload();
                }
            } else {
                $('.circle-loader').hide();
                $('.notification_row').addClass('finished');
                $this.removeClass('disabled');
                $('.message_err').html(data).show();
                if (data == _("Set worker's name.")) {
                    $('#workerName').addClass('error_value');
                }
                if (data.split('. ')[0] + '.' == _("Worker name already in use.")) {
                    $('#workerName').addClass('error_value');
                }
                if (data == _('Worker name can only contain<br>letters, numbers, "_", "-".')) {
                    $('#workerName').addClass('error_value');
                }
                if (data == _("Worker name shouldn't exceed 15 chars.")) {
                    $('#workerName').addClass('error_value');
                }
                if (data == _("Invalid ASIC IP.")) {
                    $('#ip').addClass('error_value');
                }
            }
        });
    });
    $('table').on('click', '.tag', function () {
        tag = $(this).text().toLowerCase();
        $('#checked_rows').hide();
        $('th').removeClass('hidden');
        $('#actions_menu').hide();
        $('table .checkbox').removeClass('selected');
        checkedNum = 0;
        selectedWorkers = [];
        if ($('.search_result').html().indexOf('<div class="result" >' + tag + ' <div class="icon close"></div></div>') == -1) {
            $('.search_result').html($('.search_result').html() + '<div class="result" >' + _mx(tag) + ' <div class="icon close"></div></div>');
            $('.filter_popup').find("#filter_group_" + $(this).text().toLowerCase() + "").prop('checked', true);
        }
        $('.search_result > .result').each(function () {
            if (tag != '') {
                tag = tag + ':' + $(this).text().trim();
            } else {
                tag = $(this).text().trim();
            }
        });
        var d = new Date;
        d.setTime(d.getTime() + 7 * 24 * 60 * 60 * 1000);
        // document.cookie = "workersFilter=" + _mxFi(tag) + ";path=/;expires=" + d.toGMTString();
        workersPage(page, search, tag, sort);
    });
    $('.icon.search').on('click', function () {
        $("#search").focus();
    });
    var delay = (function () {
        var timer = 0;
        return function (callback, ms) {
            clearTimeout(timer);
            timer = setTimeout(callback, ms);
        };
    })();
    $("#search").on('keyup', function () {
        delay(function () {
            search = $("#search").val().toLowerCase();
            workersPage(page, search, tag, sort);
            $('#checked_rows').hide();
            $('th').removeClass('hidden');
            $('#actions_menu').hide();
            $('table .checkbox').removeClass('selected');
            checkedNum = 0;
            selectedWorkers = [];
        }, 500);
    });
    $(document).on('click', '.result', function () {
        $('#checked_rows').hide();
        $('th').removeClass('hidden');
        $('#actions_menu').hide();
        $('table .checkbox').removeClass('selected');
        checkedNum = 0;
        selectedWorkers = [];
        tag = '';
        // console.log(_mxE($(this).text().toLowerCase().replace('(', '').replace(')', '').replace(' ', '') + ""))
        $('.search_result').html($('.search_result').html().replace('<div class="result" data-xxx-g="'+$(this).attr('data-xxx-g')+'" data-ixx="'+$(this).attr('data-ixx')+'">' + $(this).html() + '</div>', ''));
        $('.filter_popup').find("#filter_" +_mxE($(this).text().replace('(', '').replace(')', '').replace(' ', '') + "")).prop('checked', false);
        $('.filter_popup').find("#filter_group_" + _mxE($(this).text().replace('(', '').replace(')', '').replace(' ', '') + "")).prop('checked', false);
        $('.search_result > .result').each(function () {
            if (tag != '') {
                // tag = _mxE('tag') + ':' + _mxE($(this).text().trim());
                tag = 'tag' + ':' + $(this).text().trim();
            } else {
                // tag = _mxE($(this).text().trim())
                tag = $(this).text().trim()
            }
        });
        var d = new Date;
        d.setTime(d.getTime() + 7 * 24 * 60 * 60 * 1000);
        // document.cookie = "workersFilter=" + _mxFi(tag) + ";path=/;expires=" + d.toGMTString();
        // workersPage(page, search, _mxE(tag), sort);
        selectSearchConditionPage(1)
    });
    if (workers == null) {
        preloaderHide();
    } else {
        workersInit();
    }
    $('.close,.close_popup').click(function () {
        $('.popupbackground').fadeOut('fast');
        $('.popup').fadeOut('fast');
    });
    $('table').on('click', '.icons_list_hamburger', function () {
        if (!$(this).parent().children('.icons_list').hasClass('hide')) {
            $(this).parent().children('.icons_list').addClass('hide');
            refreshStop = 0;
        } else {
            $('.icons_list').addClass('hide');
            $(this).parent().children('.icons_list').removeClass('hide');
            refreshStop = 1;
        }
    });
});
var sort = '';
var page = 1;
var search = '';
// var tag = getFilterTag();
var tag = '';
var start = 0;
var end = 25;
var pageHash = window.location.hash.substr(1);
if (pageHash > 0) {
    page = pageHash;
}
if ("onhashchange" in window) {
    window.onhashchange = function () {
        workersPage(window.location.hash.substr(1), search, tag, type);
    }
} else {
    var storedHash = window.location.hash.substr(1);
    window.setInterval(function () {
        if (window.location.hash.substr(1) != storedHash) {
            storedHash = window.location.hash.substr(1);
            workersPage(storedHash, search, tag, type);
        }
    }, 100);
}

function workersSort(type) {
    sort = type;
    var d = new Date;
    d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * 15);
    document.cookie = "workersSort=" + type + ";path=/;expires=" + d.toGMTString();
    workersPage(page, search, tag, type);
}

function workersPage(currentPage, currentSearch, currentTag, currentSort) {
    if (typeof currentPage == 'undefined' || currentPage == '') {
        currentPage = page;
    }
    if (typeof currentSearch == 'undefined' || currentSearch == '') {
        currentSearch = search;
    }
    if (typeof currentTag == 'undefined' || currentTag == '') {
        currentTag = tag;
    }
    if (typeof currentSort == 'undefined' || currentSort == '') {
        currentSort = sort;
    }
    // currentSort = '';
    page = currentPage;
    if (page > 0) {
        if (history.pushState) {
            history.pushState(null, null, '#' + page);
        } else {
            location.hash = '#' + page;
        }
    }
    search = currentSearch.toLowerCase();
    tag = currentTag.toLowerCase();
    sort = currentSort;
    start = (currentPage * 25) - 25;
    end = start + 25;
    var counter = 0;
    var pages = 1;
    $('.order_icon').removeClass('asc desc');
    $('#sort_name').attr('onclick', "workersSort('nameDesc');");
    $('#sort_mining').attr('onclick', "workersSort('miningDesc');");
    $('#sort_client').attr('onclick', "workersSort('clientDesc');");
    $('#sort_temp').attr('onclick', "workersSort('tempDesc');");
    $('#sort_fans').attr('onclick', "workersSort('fansDesc');");
    $('#sort_watt').attr('onclick', "workersSort('wattDesc');");
    $('#sort_uptime').attr('onclick', "workersSort('uptimeDesc');");
    $('#sort_earnings').attr('onclick', "workersSort('earningsDesc');");
    $('#sort_latency').attr('onclick', "workersSort('latencyDesc');");
    if (currentSort != '') {
        jsonWorkers.sort(function (row1, row2) {
            switch (currentSort) {
                case 'nameDesc':
                    var a = row2['name'];
                    var b = row1['name'];
                    $('#sort_name').attr('onclick', "workersSort('nameX');").addClass('desc');
                    break;
                case 'nameAsc':
                    var a = row1['name'];
                    var b = row2['name'];
                    $('#sort_name').attr('onclick', "workersSort('nameDesc');").addClass('asc');
                    break;
                case 'nameX':
                    $('#sort_name').attr('onclick', "workersSort('nameAsc');");
                    break;
                case 'miningDesc':
                    var a = row2['mining_status_value'];
                    var b = row1['mining_status_value'];
                    $('#sort_mining').attr('onclick', "workersSort('miningX');").addClass('desc');
                    break;
                case 'miningAsc':
                    var a = row1['mining_status_value'];
                    var b = row2['mining_status_value'];
                    $('#sort_mining').attr('onclick', "workersSort('miningDesc');").addClass('asc');
                    break;
                case 'miningX':
                    $('#sort_mining').attr('onclick', "workersSort('miningAsc');")
                    break;
                case 'tempDesc':
                    var a = row2['temp_value'];
                    var b = row1['temp_value'];
                    $('#sort_temp').attr('onclick', "workersSort('tempX');").addClass('desc');
                    break;
                case 'tempAsc':
                    var a = row1['temp_value'];
                    var b = row2['temp_value'];
                    $('#sort_temp').attr('onclick', "workersSort('tempDesc');").addClass('asc');
                    break;
                case 'tempX':
                    $('#sort_temp').attr('onclick', "workersSort('tempAsc');")
                    break;
                case 'fansDesc':
                    var a = row2['fan_value'];
                    var b = row1['fan_value'];
                    $('#sort_fans').attr('onclick', "workersSort('fansX');").addClass('desc');
                    break;
                case 'fansAsc':
                    var a = row1['fan_value'];
                    var b = row2['fan_value'];
                    $('#sort_fans').attr('onclick', "workersSort('fansDesc');").addClass('asc');
                    break;
                case 'fansX':
                    $('#sort_fans').attr('onclick', "workersSort('fansAsc');")
                    break;
                case 'wattDesc':
                    var a = row2['watt_value'];
                    var b = row1['watt_value'];
                    $('#sort_watt').attr('onclick', "workersSort('wattX');").addClass('desc');
                    break;
                case 'wattAsc':
                    var a = row1['watt_value'];
                    var b = row2['watt_value'];
                    $('#sort_watt').attr('onclick', "workersSort('wattDesc');").addClass('asc');
                    break;
                case 'wattX':
                    $('#sort_watt').attr('onclick', "workersSort('wattAsc');")
                    break;
                case 'uptimeDesc':
                    var a = row2['uptime_value'];
                    var b = row1['uptime_value'];
                    $('#sort_uptime').attr('onclick', "workersSort('uptimeX');").addClass('desc');
                    break;
                case 'uptimeAsc':
                    var a = row1['uptime_value'];
                    var b = row2['uptime_value'];
                    $('#sort_uptime').attr('onclick', "workersSort('uptimeDesc');").addClass('asc');
                    break;
                case 'uptimeX':
                    $('#sort_uptime').attr('onclick', "workersSort('uptimeAsc');")
                    break;
                case 'earningsDesc':
                    var a = row2['revenue_value'];
                    var b = row1['revenue_value'];
                    $('#sort_earnings').attr('onclick', "workersSort('earningsX');").addClass('desc');
                    break;
                case 'earningsAsc':
                    var a = row1['revenue_value'];
                    var b = row2['revenue_value'];
                    $('#sort_earnings').attr('onclick', "workersSort('earningsDesc');").addClass('asc');
                    break;
                case 'earningsX':
                    $('#sort_earnings').attr('onclick', "workersSort('earningsAsc');")
                    break;
                case 'latencyDesc':
                    var a = row2['latency'];
                    var b = row1['latency'];
                    $('#sort_latency').attr('onclick', "workersSort('latencyX');").addClass('desc');
                    break;
                case 'latencyAsc':
                    var a = row1['latency'];
                    var b = row2['latency'];
                    $('#sort_latency').attr('onclick', "workersSort('latencyDesc');").addClass('asc');
                    break;
                case 'latencyX':
                    $('#sort_latency').attr('onclick', "workersSort('latencyAsc');")
                    break;
            }
            if (currentSort == 'nameDesc' || currentSort == 'nameAsc' ||currentSort == 'latencyDesc' || currentSort == 'latencyAsc' || currentSort == 'miningDesc' || currentSort == 'miningAsc' || currentSort == 'clientDesc' || currentSort == 'clientAsc') {
                if (a > b) return 1; else if (a < b) return -1;
                return 0;
            }
            if (currentSort == 'earningsAsc' || currentSort == 'earningsDesc' || currentSort == 'uptimeAsc' || currentSort == 'uptimeDesc') {
                a = parseFloat(a);
                b = parseFloat(b);
                if (a > b) return 1; else if (a < b) return -1;
                return 0;
            }
            if(
                currentSort=='nameX'||
                currentSort=='miningX'||
                currentSort=='tempX'||
                currentSort=='fansX'||
                currentSort=='wattX'||
                currentSort=='uptimeX'||
                currentSort=='earningsX'||
                currentSort=='latencyX'
            ){
                return 0
            }
            var reA = /[^a-zA-Z]/g;
            var reN = /[^0-9]/g;
            if (typeof a !== 'undefined') {
                var aA = a.replace(reA, "");
                var bA = b.replace(reA, "");
                if (aA === bA) {
                    var aN = parseInt(a.replace(reN, ""), 10);
                    var bN = parseInt(b.replace(reN, ""), 10);
                    return aN === bN ? 0 : aN > bN ? 1 : -1;
                } else {
                    return aA > bA ? 1 : -1;
                }
            }
        });
    }
    if(
        currentSort=='nameX'||
        currentSort=='miningX'||
        currentSort=='tempX'||
        currentSort=='fansX'||
        currentSort=='wattX'||
        currentSort=='uptimeX'||
        currentSort=='earningsX'||
        currentSort=='latencyX')
    {
        jsonWorkers=JSON.parse(JSON.stringify(restWorkers))
    }
    printWorkers();
}

function toSeconds(uptimeStr) {
    var uptimeStrArray = (uptimeStr).split(' ');
    uptimeSeconds = 0;
    $.each(uptimeStrArray, function (timeI, timeD) {
        if (timeD.indexOf('d') != -1) {
            uptimeSeconds = uptimeSeconds + parseInt(timeD) * 24 * 60 * 60;
        }
        if (timeD.indexOf('h') != -1) {
            uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60 * 60;
        }
        if (timeD.indexOf('m') != -1) {
            uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60;
        }
        if (timeD.indexOf('s') != -1) {
            uptimeSeconds = uptimeSeconds + parseInt(timeD);
        }
    });
    return uptimeSeconds;
}

function workersInit() {
    workersRefresh(true);
}

function workersRefresh(cache) {
    if (wasHidden > 0) {
        return;
    }
    if (checkedNum > 0 || refreshStop > 0) {
        setTimeout(function () {
            workersRefresh(false);
        }, 5 * 1000);
        return false;
    }
    var workersList = '';
    // if (typeof (Storage) !== "undefined" && cache) {
    // }
    if (cacheExpired || workersList == '' || workersList == null) {
        // var apiUrl = '/static-ssl.minerstat.farm/hercules.php?token=' + workerToken + '&count=' + workersCount;
        // var apiUrl = '/hercules.php?token=' + workerToken + '&count=' + workersCount;
        var apiUrl = '/hercules2.php?p=1&c=10'
        // if (demoAccount == 1) {
        //     apiUrl = '/api.minerstat.com/v2/demo-worker';
        // }
        $.getJSON('/simpleboard', function (msg) {
            setCardData(msg)
        });

        selectSearchConditionPage()
        // $.getJSON(apiUrl, function (res) {
        //     loadWorkers(res.data.workers);
        //     // if (workersList != '' && window.sessionStorage) {
        //     //     sessionStorage.setItem(workerToken.toLowerCase() + ".workersList", JSON.stringify(workersList));
        //     //     var newDate = new Date();
        //     //     sessionStorage.setItem("lastUpdate", newDate.getTime());
        //     // }
        // });
    } else {
        selectSearchConditionPage()
        // loadWorkers(JSON.parse(workersList));
    }
}
function loadWorkers(workersList) {
    jsonWorkers = [];
    restWorkers = []
    // var count_online = 0;
    // var count_offline = 0;
    // var count_idle = 0;
    // var count_alerts_pause = 0;
    // var count_triggers_pause = 0;
    // var count_notes = 0;
    // var count_profitswitch = 0;
    // var count_nospeed = 0;
    // var count_noefficiency = 0;
    // var count_notemperature = 0;
    // var count_nofans = 0;
    // var count_nopool = 0;
    // var count_nocoin = 0;
    // var count_missinggpus = 0;
    // var count_idlegpus = 0;
    // var count_hotlimit = 0;
    // var count_veryhotlimit = 0;
    // var count_duplicatedips = 0;
    // var count_nospace = 0;
    // var count_stability = 0;
    // var count_reboots = 0;
    // var count_console = 0;
    var filter_groups = {};
    var filter_coins = {};
    var filter_clients = {};
    var asicArrayIP = {};
    var asicArrayIPGroups = {};
    var groupsString = ",msos,windows,asic,nvidia,amd,innosilicon,goldshell,toddminer,cheetah,ebang,whatsminer,antminer,avalon,aisen,blackminer,baikal,dragonmint,dayun,spondoolies,hyperbit,obelisk,strongu,fusionsilicon,";
    $.each(workersList, function (i, w) {
        var filters_string = '';
        var uptimeSeconds = 24 * 60 * 60;
        if (typeof w['info'].uptime != 'undefined' && w['info'].uptime != null) {
            var uptimeStrArray = (w['info'].uptime).split(' ');
            uptimeSeconds = 0;
            $.each(uptimeStrArray, function (timeI, timeD) {
                if (timeD.indexOf('d') != -1) {
                    uptimeSeconds = uptimeSeconds + parseInt(timeD) * 24 * 60 * 60;
                }
                if (timeD.indexOf('h') != -1) {
                    uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60 * 60;
                }
                if (timeD.indexOf('m') != -1) {
                    uptimeSeconds = uptimeSeconds + parseInt(timeD) * 60;
                }
                if (timeD.indexOf('s') != -1) {
                    uptimeSeconds = uptimeSeconds + parseInt(timeD);
                }
            });
        }
        var jsonWorker = {};
        jsonWorker['id'] = w['info'].id
        jsonWorker['type'] = w['info'].type;
        jsonWorker['system'] = w['info'].system;
        jsonWorker['groups'] = w['info'].groups;
        if (typeof w['info'].os != 'undefined' && typeof w['info'].os.localip != 'undefined') {
            jsonWorker['localip'] = w['info'].os.localip;
        } else {
            jsonWorker['localip'] = '';
        }
        if (typeof w['info'].os != 'undefined' && typeof w['info'].os.remoteip != 'undefined') {
            jsonWorker['remoteip'] = w['info'].os.remoteip;
        } else {
            jsonWorker['remoteip'] = '';
        }
        jsonWorker['client'] = '';
        jsonWorker['name'] = w['info'].name;
        var groupsList = w['info'].groups.split(',');
        $.each(groupsList, function (groupIndex, groupName) {
            if (typeof filter_groups[groupName.toUpperCase()] == 'undefined') filter_groups[groupName.toUpperCase()] = 0;
            filter_groups[groupName.toUpperCase()]++;
        });
        jsonWorker['mining_status_value'] = '0';
        jsonWorker['temp_value'] = '0';
        jsonWorker['fan_value'] = '0';
        jsonWorker['watt_value'] = '0';
        jsonWorker['uptime_value'] = '0';
        jsonWorker['revenue_value'] = '0';
        jsonWorker['crypto'] = '';
        jsonWorker['profit_switch'] = '';
        jsonWorker['mining_unit'] = '';
        jsonWorker['hardware_list'] = [];
        jsonWorker['temp_hot'] = '';
        jsonWorker['temp_veryhot'] = '';
        jsonWorker['type'] = '';
        var statusClass;
        var statusName;
        if (w['info'].status == 'idle') {
            statusClass = 'idle';
            statusName = _mx('Idle');
            // count_idle++;
            filters_string += 'idle,';
        } else {
            if (w['info'].status == 'offline' && w['info'].status_reason != 'SWITCHING' && w['info'].status_reason != 'FLASHING' && w['info'].status_reason != 'BENCHMARKING' && w['info'].status_reason != 'INITIALIZING' && w['info'].status_reason != 'BOOTING') {
                statusClass = 'offline';
                statusName = _mx('Offline');
                // count_offline++;
                filters_string += 'offline,';
            } else {
                if (w['info'].status_reason == 'SWITCHING') {
                    statusClass = 'switching';
                    statusName = _('Switching');
                } else if (w['info'].status_reason == 'INITIALIZING') {
                    statusClass = 'initializing';
                    statusName = _('Initializing');
                } else if (w['info'].status_reason == 'BOOTING') {
                    statusClass = 'booting';
                    statusName = _('Booting');
                } else if (w['info'].status_reason == 'BENCHMARKING') {
                    statusClass = 'benchmarking';
                    statusName = _('Benchmarking');
                } else if (w['info'].status_reason == 'FLASHING') {
                    statusClass = 'flashing';
                    statusName = _('BIOS flashing');
                } else {
                    statusClass = 'online';
                    statusName = _mx('Online');
                }
                if(w['info'].status=='unable'){
                    statusClass = 'unable';
                    statusName = _mx2('unable');
                }
                if(w['info'].status=='disable'){
                    statusClass = 'forbid';
                    statusName = _mx2('disable');
                }
                // count_online++;
                filters_string += 'online,';
            }
        }
        if (typeof w['mining'] != 'undefined' && typeof w['mining']["crypto"] != 'undefined' && w['mining']["crypto"] == 'BENCHMARK') {
            statusName = _('Benchmarking');
            statusClass = 'benchmarking';
        }
        // statusClass = 'switching';
        if (w['info']['note'] == '0') {
            jsonWorker['status'] = '<div data-tooltip="' + statusName + '" data-html="' + statusClass + '" class="status ' + statusClass + '"><div class="bullet"></div></div><div onclick="editNote(\'' + i + '\',\''+w['info']['name']+'\')" data-tooltip="' + _mx('Without notes') + '" class="notes disabled"><div class="icon note"></div></div>';
            jsonWorker['note'] = 0;
        } else {
            jsonWorker['status'] = '<div data-tooltip="' + statusName + '" data-html="' + statusClass + '" class="status ' + statusClass + '"><div class="bullet"></div></div><div onclick="editNote(\'' + i + '\',\''+w['info']['name']+'\')" data-tooltip="' + _mx3('Note') + '" class="notes"><div class="icon note"></div></div>';
            jsonWorker['note'] = 1;
            // count_notes++;
            filters_string += 'notes,';
        }
        if (w['info']['profit_switch'] == '1') {
            // count_profitswitch++;
            filters_string += 'profitswitch,';
        }
        if (typeof w["info"]["os"] != 'undefined' && typeof w["info"]["os"]["localip"] != 'undefined' && w["info"]["os"]["localip"] != '0.0.0.0') {
            var groups = w["info"]["groups"].split(',');
            var workerGroups = [];
            $.each(groups, function (gIndex, group) {
                if (groupsString.indexOf(group) == -1) {
                    if (asicArrayIPGroups[group] == null) asicArrayIPGroups[group] = {};
                    if (asicArrayIPGroups[group][w["info"]["os"]["localip"]] == null) asicArrayIPGroups[group][w["info"]["os"]["localip"]] = [];
                    asicArrayIPGroups[group][w["info"]["os"]["localip"]].push(w["info"]["name"]);
                    workerGroups.push('group-' + group);
                }
            });
            if (w["info"]["type"] == 'asic') {
                if (asicArrayIP[w["info"]["os"]["localip"]] == null) asicArrayIP[w["info"]["os"]["localip"]] = [];
                asicArrayIP[w["info"]["os"]["localip"]].push([w["info"]["name"], workerGroups]);
            }
        }
        if (w["info"]["os"]["freespace"] == 0) {
            // count_nospace++;
            filters_string += 'nospace,';
        }
        if (jQuery.inArray(w['workersId'], workersStabilityArray) != -1) {
            // count_stability++;
            filters_string += 'stability,';
        }
        if (jQuery.inArray(w['workersId'], workersRebootsArray) != -1) {
            // count_reboots++;
            filters_string += 'reboots,';
        }
        if (jQuery.inArray(w['workersId'], workersConsoleArray) != -1) {
            // count_console++;
            filters_string += 'console,';
        }
        if (w['info']['pauseAlerts'] != 'undefined') {
            jsonWorker['pause_alerts'] = w['info']['pauseAlerts'];
            if (w['info']['pauseAlerts'] == 1) {
                // count_alerts_pause++;
                filters_string += 'alerts_pause,';
            }
        }
        if (w['info']['pauseTriggers'] != 'undefined') {
            jsonWorker['pause_triggers'] = w['info']['pauseTriggers'];
            if (w['info']['pauseTriggers'] == 1) {
                // count_triggers_pause++;
                filters_string += 'triggers_pause,';
            }
        }
        if (w['info'].status != 'offline' || w['info']['os'].status != 'offline') {
            if (typeof w['mining'].client != 'undefined' && w['mining'].client != null) {
                jsonWorker['client'] = w['mining'].client.toUpperCase();
            } else {
                jsonWorker['client'] = _('Undetected');
            }
            if (w['info']['type'] == 'asic') {
                jsonWorker['asic'] = 1;
                jsonWorker['client_cpu'] = '';
            } else {
                jsonWorker['asic'] = 0;
                jsonWorker['client_cpu'] = '';
                if (typeof w['mining'].client_cpu != 'undefined' && w['mining'].client_cpu != null && w['mining'].client_cpu != '') {
                    jsonWorker['client_cpu'] = w['mining'].client_cpu.toUpperCase();
                }
            }
            if (statusClass != 'offline') {
                var fanSuffix = '%';
                if (w['info']['type'] == 'asic') {
                    fanSuffix = ' RPM';
                }
                fanTooltip = '';
                tempTooltip = '';
                var hardwareCount = 0;
                var powerCount = 0;
                var hardwareFan = 0;
                var hardwareTemp = 0;
                var hardwareTemp2 = '';
                var memTemp = '';
                var driverError = 0;
                var tempCount = 0;
                var fanCount = 0;
                var fanError = 0;
                var speedError = 0;
                var throttlingError = 0;
                var speedCount = 0;
                var tempError = 0;
                var miningTooltipTop = '';
                var miningTooltip = '';
                var miningError = 0;
                var miningUndefined = 0;
                var wattSum = 0;
                var hardwareWatt = '';
                var wattTooltip = '';
                var numberGPUs = '';
                var tempWarning = 0;
                var g = 0;
                if (typeof w['info']['veryHot'] != 'undefined') {
                    jsonWorker['temp_veryhot'] = w['info']['veryHot'];
                }
                if (typeof w['info']['hot'] != 'undefined') {
                    jsonWorker['temp_hot'] = w['info']['hot'];
                }
                // jsonWorker['watt_h_n_ttp']=[]
                $.each(w['hardware'], function (hardwareIndex, hardwareData) {
                    var errorsList = '';
                    var isHardwareError = false;
                    if (typeof hardwareData['alertSlow'] != 'undefined') {
                        errorsList = '<span class="error_tag"> (' + _('GPU throttled') + ')</span>';
                        isHardwareError = true;
                        throttlingError = 1;
                    }
                    if (typeof hardwareData['alertThermal'] != 'undefined') {
                        errorsList = '<span class="error_tag"> (' + _('GPU throttled') + ')</span>';
                        isHardwareError = true;
                        throttlingError = 1;
                    }
                    if (typeof hardwareData['alertPower'] != 'undefined') {
                        errorsList = '<span class="error_tag"> (' + _('GPU throttled') + ')</span>';
                        isHardwareError = true;
                        throttlingError = 1;
                    }
                    if (typeof hardwareData['alertTemp'] != 'undefined') {
                        errorsList = '<span class="error_tag"> (' + _('GPU throttled') + ')</span>';
                        isHardwareError = true;
                        throttlingError = 1;
                    }
                    jsonWorker['hardware_list'].push(hardwareData);
                    if (hardwareData['temp'] > hardwareTemp && hardwareData['temp'] < 500) {
                        hardwareTemp = hardwareData['temp'];
                    }
                    if (typeof hardwareData['temp2'] != 'undefined' && hardwareData['temp2'] > hardwareTemp2 && hardwareData['temp2'] < 500) {
                        hardwareTemp2 = hardwareData['temp2'];
                    }
                    if (typeof hardwareData['memTemp'] != 'undefined' && hardwareData['memTemp'] > memTemp && hardwareData['memTemp'] < 500) {
                        memTemp = hardwareData['memTemp'];
                    }
                    if (hardwareData['fan'] > hardwareFan) {
                        hardwareFan = hardwareData['fan'];
                    }
                    if (hardwareData['temp'] > 500 || hardwareData['temp'] < 0) {
                        driverError = 1;
                    }
                    if (typeof hardwareData['temp'] == "undefined" || hardwareData['temp'] < 0) {
                        tempTooltip += '<div><span class="red">#' + hardwareIndex + ': -</span></div>';
                        tempError = 1;
                    } else {
                        var temp2 = '';
                        var temp2Value = 0;
                        if (typeof hardwareData['temp2'] != "undefined" && hardwareData['temp2'] > 0) {
                            temp2 = ' &middot; ' + convertTemperature(hardwareData['temp2']) + temperature;
                            temp2Value = hardwareData['temp2'];
                        }
                        if (typeof hardwareData['memTemp'] != "undefined" && hardwareData['memTemp'] > 0) {
                            temp2 = ' &middot; ' + convertTemperature(hardwareData['memTemp']) + temperature;
                            temp2Value = hardwareData['memTemp'];
                        }
                        if (hardwareData['temp'] >= w['info']['veryHot'] || hardwareData['temp'] < 0) {
                            tempWarning = 2;
                            tempError = 1;
                            tempTooltip += '<div><span class="red">#' + hardwareIndex + ': ' + convertTemperature(hardwareData['temp']) + temperature + temp2 + '</span></div>';
                        } else if (hardwareData['temp'] >= w['info']['hot']) {
                            tempTooltip += '<div><span class="yellow">#' + hardwareIndex + ': ' + convertTemperature(hardwareData['temp']) + temperature + temp2 + '</span></div>';
                        } else {
                            tempTooltip += '<div>#' + hardwareIndex + ': ' + convertTemperature(hardwareData['temp']) + temperature + temp2 + '</div>';
                        }
                    }
                    if (typeof hardwareData['fan'] == "undefined") {
                        fanTooltip += '<div><span class="red">#' + hardwareIndex + ': -</span></div>';
                    } else {
                        if ((w['info']['type'] == 'asic' && hardwareData['fan'] > 0) || w['info']['type'] != 'asic') {
                            fanTooltip += '<div>#' + hardwareIndex + ': ' + hardwareData['fan'] + fanSuffix + '</div>';
                            if ((hardwareData['fan'] == 0 && w['info']['type'] != 'asic') || (hardwareData['fan'] == 0 && w['info']['type'] == 'asic' && g < 2)) {
                                fanError = 1;
                            }
                        }
                    }
                    if (typeof hardwareData['speed'] == "undefined") {
                        speedError = 1;
                    } else {
                        if (w['info']['type'] != 'asic') {
                            if ((hardwareData['speed'] == 0)) {
                                speedError = 1;
                            } else {
                                speedCount++;
                            }
                        }
                    }
                    var hardwareName = '';
                    if (typeof hardwareData['name'] != 'undefined' && hardwareData['name'] != '') {
                        hardwareName = ' ' + hardwareData['name'] + errorsList;
                    }
                    if (typeof hardwareData['speed'] == "undefined") {
                        if (w['info']['type'] == 'asic') {
                            miningTooltip += '<div class="gpu_row"><div class="gpu_name">#' + hardwareIndex + hardwareName + '</div><div class="gpu_value">-</div></div>';
                        } else {
                            miningTooltip += '<div class="gpu_row"><div class="gpu_name"><span class="red">#' + hardwareIndex + hardwareName + '</span></div><div class="gpu_value"><span class="red">-</span></div></div>';
                            miningError = 1;
                        }
                    } else {
                        miningUndefined++;
                        if (isHardwareError) {
                            miningTooltip += '<div class="gpu_row"><div class="gpu_name"><span class="red">#' + hardwareIndex + hardwareName + '</span></div><div class="gpu_value">' + convertHashrate(speedToHash(parseFloat(hardwareData['speed']), w['mining']['hashrate']['hashrate_unit']), 'H/s') + '</div></div>';
                        } else {
                            miningTooltip += '<div class="gpu_row"><div class="gpu_name">#' + hardwareIndex + hardwareName + '</div><div class="gpu_value">' + convertHashrate(speedToHash(parseFloat(hardwareData['speed']), w['mining']['hashrate']['hashrate_unit']), 'H/s') + '</div></div>';
                        }
                        if (hardwareData['speed'] == 0) {
                            miningError = 1;
                        }
                    }
                    if (typeof hardwareData['power'] == 'undefined') {
                        if (w['info']['type'] == 'asic') {
                            wattTooltip += '<div>#' + hardwareIndex + ': -</div>';
                        } else {
                            wattTooltip += '<div><span class="red">#' + hardwareIndex + ': -</span></div>';
                        }
                    } else {
                        wattSum += hardwareData['power'];
                        wattTooltip += '<div>#' + hardwareIndex + ': ' + hardwareData['power'] + ' W</div>';
                        powerCount++;
                    }
                    g++;
                });
                // jsonWorker['watt_h_n_ttp']=wattTooltip
                hardwareCount = g;
                var revenueTooltip = '';
                var firstBtc = false;

                if (w['mining'].crypto.indexOf(' (') !== -1) {
                    firstBtc = true;
                }
                if (w['mining'].crypto.indexOf('+') == -1) {
                    revenueTooltip = '1 ' + getUnitFromCrypto(w['mining'].crypto) + ' = ' + (w['revenue'].cprice * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                }
                jsonWorker['coinUint']=revenueTooltip
                if (!(typeof w['mining'] != 'undefined' && typeof w['mining']['pool'] != 'undefined' && w['mining']['pool'] != '')) {
                    // count_nopool++;
                    filters_string += 'nopool,';
                }
                if (!(typeof w['mining'] != 'undefined' && typeof w['mining']['crypto'] != 'undefined' && w['mining']['crypto'] != '' && w['mining']['crypto'] != 'NO')) {
                    // count_nocoin++;
                    filters_string += 'nocoin,';
                }
                if (typeof w["hardware"] != 'undefined' && typeof w["info"] != 'undefined' && typeof w["info"]["devices"] != 'undefined' && w["info"]["devices"] != 0 && w["hardware"].length != w["info"]["devices"]) {
                    // count_missinggpus++;
                    filters_string += 'missinggpus,';
                }
                jsonWorker['mining_number']=w['mining']['hashrate'].hashrate
                var mining = w['mining'].crypto + ' - ' + convertHashrate(speedToHash(parseFloat(w['mining']['hashrate'].hashrate), w['mining']['hashrate'].hashrate_unit), 'H/s');
                var miningEfficiency = '';
                var miningWarning = '';
                var efficiencyValue = 0;
                if (typeof w['mining'] != 'undefined' && typeof w['mining']['shares'] != 'undefined' && (parseInt(w["mining"]["shares"]["accepted_share"]) + parseInt(w["mining"]["shares"]["rejected_share"])) > 0) {
                    var acceptedShares = w["mining"]["shares"]["accepted_share"];
                    var rejectedShares = w["mining"]["shares"]["rejected_share"];
                    jsonWorker['sAcceptedShares']=acceptedShares
                    jsonWorker['sRejectedShares']=rejectedShares
                    if (typeof w["mining"]["shares"]["accepted_share_dual"] != 'undefined') {
                        acceptedShares += w["mining"]["shares"]["accepted_share_dual"] + w["mining"]["shares"]["accepted_share_cpu"];
                        rejectedShares += w["mining"]["shares"]["rejected_share_dual"] + w["mining"]["shares"]["rejected_share_cpu"];
                    }
                    efficiencyValue = (100 * parseInt(acceptedShares) / (parseInt(acceptedShares) + parseInt(rejectedShares)));
                    if (efficiencyValue < 100) {
                        efficiencyValue = efficiencyValue.toFixed(2);
                    } else {
                        efficiencyValue = 100;
                    }
                    miningEfficiency = '<small>' + efficiencyValue + '% ' + _('efficiency') + ' &middot; ' + parseInt(acceptedShares) + ' &middot; ' + parseInt(rejectedShares) + '</small>';
                    if (efficiencyValue < 98 && uptimeSeconds >= 5 * 60) {
                        // count_noefficiency++;
                        filters_string += 'noefficiency,';
                    }
                    if (efficiencyValue < 90) {
                        miningWarning = '<div class="icon hot"></div>';
                    }
                } else {
                    miningEfficiency = '<small>' + '0% ' + _('efficiency') + ' &middot; 0 &middot; 0</small>';
                    if (uptimeSeconds >= 5 * 60) {
                        // count_noefficiency++;
                        filters_string += 'noefficiency,';
                        miningWarning = '<div class="icon hot"></div>';
                    }
                }
                var efficiencyValueMultiplier = efficiencyValue / 100;
                efficiencyValueMultiplier = 1;
                if (typeof w['mining'] != 'undefined' && typeof w['mining']['hashrate'] != 'undefined' && w['mining']['hashrate'].hashrate == 0 && w['info']['status'] == 'online') {
                    if (uptimeSeconds >= 1 * 60) {
                        // count_nospeed++;
                        filters_string += 'nospeed,';
                        miningWarning = '<div class="icon hot"></div>';
                    }
                }
                if (throttlingError == 1) {
                    miningWarning = '<div class="icon hot"></div>';
                }
                mining = miningWarning + mining;
                jsonWorker['type'] = w['info'].type;
                jsonWorker['crypto'] = w['mining'].crypto;
                jsonWorker['mining_unit'] = w['mining']['hashrate'].hashrate_unit;
                if (typeof filter_coins[w['mining'].crypto.toUpperCase()] == 'undefined') filter_coins[w['mining'].crypto.toUpperCase()] = 0;
                filter_coins[w['mining'].crypto.toUpperCase()]++;
                filters_string += w['mining'].crypto.toLowerCase() + ',';
                var miningSortingStr = mining;
                if (mining.indexOf(' - ') > 0) {
                    var miningSortingStr = '';
                    var miningSortingPrefix = mining.split(' - ')[0];
                    var miningSortingSpeed = mining.split(' - ')[1].split(' ')[0];
                    var miningSortingUnit = mining.split(' - ')[1].split(' ')[1];
                    if (miningSortingSpeed < 10) {
                        miningSortingSpeed = '000' + miningSortingSpeed;
                    } else if (miningSortingSpeed < 100) {
                        miningSortingSpeed = '00' + miningSortingSpeed;
                    } else if (miningSortingSpeed < 1000) {
                        miningSortingSpeed = '0' + miningSortingSpeed;
                    }
                    miningSortingStr = miningSortingPrefix + ' - ' + miningSortingSpeed + ' ' + miningSortingUnit;
                }
                jsonWorker['mining_status_value'] = miningSortingStr;
                if (typeof w['mining'].crypto_dual !== "undefined" && w['mining'].crypto_dual != '') {
                    jsonWorker['crypto'] += ',' + w['mining'].crypto_dual;
                    if (typeof filter_coins[w['mining'].crypto_dual.toUpperCase()] == 'undefined') filter_coins[w['mining'].crypto_dual.toUpperCase()] = 0;
                    filter_coins[w['mining'].crypto_dual.toUpperCase()]++;
                    filters_string += w['mining'].crypto_dual.toLowerCase() + ',';
                    mining = mining + '<br>' + w['mining'].crypto_dual + ' - ' + parseFloat(w['mining']['hashrate'].hashrate_dual).toFixed(2) + ' ' + w['mining']['hashrate'].hashrate_unit_dual + '/s';
                    if (w['mining'].crypto_dual.indexOf('+') !== -1) {
                        if (w['mining'].crypto_dual.indexOf(' (') !== -1) {
                            if (firstBtc != true) {
                                revenueTooltip = revenueTooltip + '<br>' + '1 ' + getUnitFromCrypto(w['mining'].crypto_dual) + ' = ' + (w['revenue'].cprice_dual * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                            }
                        } else {
                            revenueTooltip = revenueTooltip + '<br>' + '1 ' + w['mining'].crypto_dual + ' = ' + (w['revenue'].cprice_dual * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                        }
                    }
                }
                if (typeof w['mining'].crypto_cpu !== "undefined" && w['mining'].crypto_cpu != '') {
                    jsonWorker['crypto'] += ',' + w['mining'].crypto_cpu;
                    if (typeof filter_coins[w['mining'].crypto_cpu.toUpperCase()] == 'undefined') filter_coins[w['mining'].crypto_cpu.toUpperCase()] = 0;
                    filter_coins[w['mining'].crypto_cpu.toUpperCase()]++;
                    filters_string += w['mining'].crypto_cpu.toLowerCase() + ',';
                    mining = mining + '<br>' + w['mining'].crypto_cpu + ' - ' + parseFloat(w['mining']['hashrate'].hashrate_cpu).toFixed(2) + ' ' + w['mining']['hashrate'].hashrate_unit_cpu + '/s';
                    if (w['mining'].crypto_cpu.indexOf('+') !== -1) {
                        if (w['mining'].crypto_cpu.indexOf(' (') !== -1) {
                            if (firstBtc != true) {
                                revenueTooltip = revenueTooltip + '<br>' + '1 ' + getUnitFromCrypto(w['mining'].crypto_cpu) + ' = ' + (w['revenue'].cprice_cpu * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                            }
                        } else {
                            revenueTooltip = revenueTooltip + '<br>' + '1 ' + w['mining'].crypto_cpu + ' = ' + (w['revenue'].cprice_cpu * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                        }
                    }
                }
                if (typeof w['mining'].client != 'undefined' && w['mining'].client != null) {
                    if (typeof filter_clients[w['mining'].client.toUpperCase()] == 'undefined') {
                        filter_clients[w['mining'].client.toUpperCase()] = 0;
                    }
                    filter_clients[w['mining'].client.toUpperCase()]++;
                    filters_string += w['mining'].client.toLowerCase() + ',';
                }
                var cpuTooltip = _('CPU mining disabled');
                var cpuToggle = '';
                if (typeof w['mining'].client_cpu != 'undefined' && w['mining'].client_cpu != '' && w['mining'].client_cpu != null && w['mining'].client_cpu != 'disabled') {
                    cpuTooltip = _('CPU mining enabled');
                    cpuToggle = 'selected';
                }
                jsonWorker['profit_switch'] = w['info']['profit_switch'];
                var switchTooltip = _('Profit switch disabled');
                var switchToggle = '';
                if (jsonWorker['profit_switch'] == '1') {
                    switchTooltip = _('Profit switch enabled');
                    switchToggle = 'selected';
                }
                var cpuHtml = '';
                var rigType = w['info'].type;
                var rigSystem = w['info'].system;
                if (rigSystem == 'linux') {
                    rigSystem = 'msos';
                }
                if (rigSystem == 'win') {
                    rigSystem = 'windows';
                }
                var clientsList = '<b>' + _('Load from template') + '</b>';
                var countTemplates = 0;
                var configTemplatesArray = [];
                var configTemplatesObj = {};
                jQuery.each(clients, function (client, data) {
                    if ($.inArray(rigType, data['for']) !== -1 && $.inArray(rigSystem, data['for']) !== -1 && typeof data['templates'] != 'undefined') {
                        $.each(data['templates'], function (index, value) {
                            configTemplatesArray.push(value.name.toLowerCase());
                            configTemplatesObj[value.name.toLowerCase()] = {};
                            configTemplatesObj[value.name.toLowerCase()]['id'] = value.id;
                            configTemplatesObj[value.name.toLowerCase()]['name'] = value.name;
                            configTemplatesObj[value.name.toLowerCase()]['client'] = client.toUpperCase();
                            countTemplates++;
                        });
                    }
                    if (rigType != 'asic') {
                        if ($.inArray(rigSystem, data['for']) !== -1 && $.inArray('cpu', data['for']) !== -1) {
                            cpuHtml = '<div class="divider"></div><div class="row"><label>' + _('CPU mining') + '</label><div data-tooltip="' + cpuTooltip + '" class="cpumining toggle" onclick="cpuMining(\'' + i + '\');"><div class="bullet ' + cpuToggle + '"></div></div></div>';
                        }
                    }
                });
                configTemplatesArray.sort();
                jQuery.each(configTemplatesArray, function (configTemplateIndex, configTemplateName) {
                    configTemplateData = configTemplatesObj[configTemplateName];
                    clientsList += '<div class="row" data-template="' + configTemplateData['id'] + '">' + configTemplateData['name'] + '<small>' + configTemplateData['client'] + '</small></div>';
                });
                if (countTemplates == 0) {
                    clientsList += '<div class="empty">' + _('No templates') + '</div><a class="button green" href="/config-templates/new" title="' + _('Create new template') + '">' + _('Create new template') + '</a>';
                }
                if (typeof w['mining'].client != 'undefined' && w['mining'].client != null) {
                    var client = w['mining'].client.toUpperCase();
                } else {
                    var client = _('Undetected');
                }
                clientsList = clientsList.replace('class="row">' + client, 'class="row selected">' + client);
                jsonWorker['clients'] = clientsList;

                if (w['info'].uptime != 'undefined' && w['info'].uptime != null) {
                    var uptime = w['info'].uptime;
                    var sync = w['info'].sync;
                    if (statusClass == 'idle' && typeof w['info']['os'].sync != 'undefined') {
                        sync = w['info']['os'].sync;
                    }
                    jsonWorker['uptime_value'] = toSeconds(uptime);
                    jsonWorker['uptime'] = '<div class="ttp">' + uptime + '<small>' + _('Last seen') + ': ' + sync + 's' + '</small></div>';
                }
                jsonWorker['revenue_value'] = (((w['revenue'].usd_month) * currencyValue * efficiencyValueMultiplier).toFixed(toFixedValue)).toString();
                revenue = '<div class="earnings_dollar">' + ((w['revenue'].usd_month) * currencyValue * efficiencyValueMultiplier).toFixed(toFixedValue) + ' ' + currency + '</div>';
                var cryptoUnit = getUnitFromCrypto(w['mining'].crypto);
                var crypto_val = (30 * w['revenue'].coin * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                if (typeof w['mining'].crypto_dual !== "undefined" && w['mining'].crypto_dual != '') {
                    cryptoUnit = getUnitFromCrypto(w['mining'].crypto_dual);
                    crypto_val += '<br>' + (30 * w['revenue'].coin_dual * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                }
                if (typeof w['mining'].crypto_cpu !== "undefined" && w['mining'].crypto_cpu != '') {
                    cryptoUnit = getUnitFromCrypto(w['mining'].crypto_cpu);
                    crypto_val += '<br>' + (30 * w['revenue'].coin_cpu * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                }
                if (cryptoUnit.indexOf('+') > 0) {
                    crypto_val = _('Merged mining');
                }
                revenue += '<div class="earnings_btc">' + crypto_val + '</div>';
                jsonWorker['revenue_same']=Number((30 * w['revenue'].coin * efficiencyValueMultiplier).toFixed(6))
                var btcTooltip = '<div class="divider"></div>';
                btcTooltip += _('Est. '+w['mining']['crypto']) + ': ' + parseFloat(((w['revenue'].coin) * 30 * efficiencyValueMultiplier)).toFixed(8) + ' '+w['mining']['crypto'];
                jsonWorker['revenue'] = '<div class="ttp">' + revenue + '<div class="tooltip"><div class="arrow"></div>' + revenueTooltip + btcTooltip + '</div></div>';
                if (jQuery.type(w['info']['consumption']) !== "string" && w['info']['consumption'] > 0) {
                    wattSum = w['info']['consumption'];
                    if (powerCount == 0) {
                        wattTooltip = '';
                    }
                } else if (jQuery.type(w['info']['consumption']) === "string") {
                    wattSum += parseInt(w['info']['consumption'].replace('+', ''));
                    wattTooltip += '<div class="divider"></div><div>' + w['info']['consumption'] + ' W</div>';
                }
                if (typeof w['mining'] != 'undefined' && typeof w['mining']['client'] != 'undefined' && typeof w['mining']['pool'] != 'undefined') {
                    miningTooltipTop = '<b>' + w['mining']['client'] + '</b>' + '<br><small>' + w['mining']['pool'] + '</small>';
                    if (miningUndefined != 0) {
                        miningTooltipTop += '<br>' + miningTooltip;
                    }
                }
                var miningAddon = '';
                if (miningTooltipTop != '') {
                    miningAddon = '<div class="tooltip"><div class="arrow"></div>' + miningTooltipTop + '</div>';
                }
                if (statusClass == 'idle') {
                    jsonWorker['mining_status'] = _mx('Idle');
                } else if (statusClass == 'benchmarking') {
                    jsonWorker['mining_status'] = _('Benchmarking');
                } else if (statusClass == 'switching') {
                    jsonWorker['mining_status'] = _('Switching');
                } else if (statusClass == 'initializing') {
                    jsonWorker['mining_status'] = _('Initializing');
                } else if (statusClass == 'booting') {
                    jsonWorker['mining_status'] = _('Booting');
                } else if (statusClass == 'flashing') {
                    jsonWorker['mining_status'] = _('BIOS flashing');
                } else {
                    jsonWorker['mining_status'] = '<div class="ttp">' + mining + miningEfficiency + miningAddon + '</div>';
                }
                if (speedError == 1 && speedCount > 0) {
                    // count_idlegpus++;
                    filters_string += 'idlegpus,';
                }
                if (tempError == 1) {
                    // count_notemperature++;
                    filters_string += 'notemperature,';
                }
                if (hardwareFan > 105) {
                    hardwareFan += ' RPM';
                } else if (hardwareFan > 0) {
                    if (hardwareFan > 100) {
                        hardwareFan = 100;
                    }
                    hardwareFan += '%';
                    if (fanError == 1) {
                        hardwareFan = '<div class="icon hot"></div>' + hardwareFan;
                        // count_nofans++;
                        filters_string += 'nofans,';
                    }
                } else {
                    hardwareFan = '-';
                }
                if (hardwareTemp >= w['info']['hot'] && hardwareTemp < w['info']['veryHot']) {
                    // count_hotlimit++;
                    filters_string += 'hotlimit,';
                    hardwareTemp = '<div class="icon warning"></div>' + convertTemperature(hardwareTemp) + temperature;
                } else if (hardwareTemp >= w['info']['veryHot']) {
                    // count_veryhotlimit++;
                    filters_string += 'veryhotlimit,';
                    hardwareTemp = '<div class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature;
                } else if (driverError > 0) {
                    hardwareTemp = '<div class="icon hot"></div>' + convertTemperature(hardwareTemp) + temperature;
                } else if (hardwareTemp > 0) {
                    hardwareTemp = convertTemperature(hardwareTemp) + temperature;
                } else {
                    hardwareTemp = '-';
                }
                var fanAddon = '';
                var tempAddon = '';
                var wattAddon = '';
                if (hardwareFan != '-') {
                    fanAddon = '<div class="tooltip"><div class="arrow"></div>' + fanTooltip + '</div>';
                    jsonWorker['fan_n_value']=Number(hardwareFan.toString().match(/\d+(.\d+)?/g)[0])
                }
                if (hardwareTemp != '-') {
                    tempAddon = '<div class="tooltip"><div class="arrow"></div>' + tempTooltip + '</div>';
                }
                if (hardwareWatt != '-' && wattTooltip != '') {
                    wattAddon = '<div class="tooltip"><div class="arrow"></div>' + wattTooltip + '</div>';
                }
                var numberGPUsWarning = '';
                if (w['info']['devices'] != 'undefined' && w['info']['devices'] > 0) {
                    if (hardwareCount < w['info']['devices']) {
                        numberGPUsWarning = '<div data-tooltip="' + _('Missing GPUs') + '" class="icon hot"></div>';
                    }
                    if (hardwareCount > w['info']['devices']) {
                        numberGPUsWarning = '<div data-tooltip="' + _('GPUs count difference') + '" class="icon warning"></div>';
                    }
                    numberGPUs = numberGPUsWarning + hardwareCount + '/' + w['info']['devices'];
                    jsonWorker['hd_Sy']=Number(numberGPUsWarning + hardwareCount)
                    jsonWorker['hd_Sy_sum']=w['info']['devices']
                }
                //使用中的显卡

                jsonWorker['temp_n_value']=Number(hardwareTemp.toString().match(/\d+(.\d+)?/g))

                jsonWorker['watt_n_value']=Number(wattSum.toString())
                jsonWorker['temp_value'] = hardwareTemp.toString();
                jsonWorker['fan_value'] = hardwareFan.toString();
                jsonWorker['watt_value'] = wattSum.toString();
                if (numberGPUsWarning != '') {
                    jsonWorker['watt_value'] = "9999999" + hardwareCount + '/' + w['info']['devices'];
                }
                jsonWorker['fan'] = '<div class="ttp">' + hardwareFan + fanAddon + '</div>';
                if (hardwareTemp2 != '') {
                    hardwareTemp = hardwareTemp + ' &middot; ' + convertTemperature(hardwareTemp2) + temperature;
                }
                if (memTemp != '') {
                    hardwareTemp = hardwareTemp + '<small>' + convertTemperature(memTemp) + temperature + '</small>';
                }
                jsonWorker['temp'] = '<div class="ttp">' + hardwareTemp + tempAddon + '</div>';
                if (wattSum > 0) {
                    var efficiencyWatt = (w['mining']['hashrate']['hashrate'] / wattSum).toFixed(3);
                    if (w['mining']['hashrate']['hashrate'] == 0) {
                        efficiencyWatt = 0;
                    }
                    jsonWorker['watt_n_same']=Number(efficiencyWatt)
                    var efficiencyWattString = '<small>' + efficiencyWatt + ' ' + w['mining']['hashrate']['hashrate_unit'] + '/W</small>';
                    if (efficiencyWatt == 0 && w['mining']['hashrate']['hashrate_unit'] != 'H') {
                        efficiencyWatt = (w['mining']['hashrate']['hashrate'] * 1000 / wattSum).toFixed(3);
                        efficiencyWattString = '<small>' + efficiencyWatt + ' ' + hashrateUnitDown(w['mining']['hashrate']['hashrate_unit']) + '/W</small>';
                    }
                    jsonWorker['watt'] = '<div class="ttp">' + numberGPUs + ' ' + wattSum + ' W ' + efficiencyWattString + wattAddon + '</div>';
                    if (w['info']['electricity'] != 'undefined' && w['info']['electricity'] > 0) {
                        jsonWorker['revenue_value'] = (((w['revenue'].usd_month * efficiencyValueMultiplier - 30 * 24 * wattSum * w['info']['electricity'] / 1000) * currencyValue).toFixed(toFixedValue)).toString();
                        revenue = '<div class="earnings_dollar">' + ((w['revenue'].usd_month * efficiencyValueMultiplier - 30 * 24 * wattSum * w['info']['electricity'] / 1000) * currencyValue).toFixed(toFixedValue) + ' ' + currency + '</div>';
                        var cryptoUnit = getUnitFromCrypto(w['mining'].crypto);
                        var crypto_val = (30 * w['revenue'].coin * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                        if (typeof w['mining'].crypto_dual !== "undefined" && w['mining'].crypto_dual != '') {
                            cryptoUnit = getUnitFromCrypto(w['mining'].crypto_dual);
                            crypto_val += '<br>' + (30 * w['revenue'].coin_dual * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                        }
                        if (typeof w['mining'].crypto_cpu !== "undefined" && w['mining'].crypto_cpu != '') {
                            cryptoUnit = getUnitFromCrypto(w['mining'].crypto_cpu);
                            crypto_val += '<br>' + (30 * w['revenue'].coin_cpu * efficiencyValueMultiplier).toFixed(6) + ' ' + cryptoUnit;
                        }
                        if (cryptoUnit.indexOf('+') > 0) {
                            crypto_val = _('Merged mining');
                        }
                        revenue += '<div class="earnings_btc">' + crypto_val + '</div>';
                        var costsTooltip = '';
                        if (revenueTooltip != '') {
                            costsTooltip += '<br><br>';
                        }
                        costsTooltip += _('Est. income') + ': ' + (w['revenue'].usd_month * currencyValue * efficiencyValueMultiplier).toFixed(toFixedValue) + ' ' + currency + '<br>' + _('El. costs') + ': ' + ((30 * 24 * wattSum * w['info']['electricity'] / 1000) * currencyValue).toFixed(toFixedValue) + ' ' + currency;
                        costsTooltip += '<br>' + _('Est. profit') + ': ' + ((w['revenue'].usd_month - (30 * 24 * wattSum * w['info']['electricity'] / 1000)) * currencyValue * efficiencyValueMultiplier).toFixed(toFixedValue) + ' ' + currency;
                        costsTooltip += '<div class="divider"></div>';
                        costsTooltip += _('Est. BTC') + ': ' + parseFloat(((w['revenue'].usd_month - (30 * 24 * wattSum * w['info']['electricity'] / 1000)) * btcExchange) * efficiencyValueMultiplier).toFixed(8) + ' BTC';
                        jsonWorker['revenue'] = '<div class="ttp">' + revenue + '<div class="tooltip"><div class="arrow"></div>' + revenueTooltip + costsTooltip + '</div></div>';
                    }
                }
                else {
                    jsonWorker['watt'] = '<div class="ttp">' + numberGPUs + '</div>';
                }
                if (typeof w['info'].inactive != 'undefined' && w['info'].inactive != 0) {
                    var inactive = w['info'].inactive;
                    var timeNow = Math.round((new Date().getTime()) / 1000);
                    if (timeNow - 24 * 60 * 60 < inactive) {
                        var timeTotalSec = timeNow - inactive;
                        var minutes = 0;
                        var hours = 0;
                        var sec = 0;
                        minutes = timeTotalSec / 60;
                        if (minutes > 60) {
                            hours = Math.floor(minutes / 60);
                            minutes = Math.ceil(minutes - hours * 60);
                        } else {
                            minutes = Math.ceil(minutes);
                        }
                        var formattedTime = '';
                        if (hours == 0) {
                            formattedTime = ' ' + minutes + 'min';
                        } else {
                            formattedTime = ' ' + hours + 'h ' + minutes + 'min';
                        }
                        if (minutes == 0) {
                            formattedTime = ' < 1min';
                        }
                        var uptimeTemp = formattedTime;
                        var uptimeArrH = 0;
                        var uptimeArrM = 0;
                        var uptimeArrS = 0;
                        if (uptimeTemp.indexOf("h") >= 0) {
                            uptimeArrH = uptimeTemp.split('h');
                            uptimeArrH = parseInt(uptimeArrH[0]) * 3600;
                        }
                        if (uptimeTemp.indexOf("min") >= 0) {
                            uptimeArrM = uptimeTemp.split('min');
                            uptimeArrM = parseInt(uptimeArrM[0]) * 60;
                        }
                        if (uptimeTemp.indexOf("s") >= 0) {
                            uptimeArrS = uptimeTemp.split('s');
                            uptimeArrS = parseInt(uptimeArrS[0]);
                        }
                        uptimeTemp = -1 * (uptimeArrH + uptimeArrM + uptimeArrS);
                        jsonWorker['uptime_value'] = uptimeTemp.toString();
                        jsonWorker['uptime'] = _('Inactive for') + formattedTime;
                    } else {
                        uptimeTemp = -1 * (2 * 24 * 60 * 60);
                        jsonWorker['uptime_value'] = uptimeTemp.toString();
                        jsonWorker['uptime'] = _('Inactive for') + ' > 24h';
                    }
                }
            } else {
                if (typeof w['info'].last_seen != 'undefined') {
                    var lastSeen = w['info'].last_seen;
                    var timeNow = Math.round((new Date().getTime()) / 1000);
                    if (timeNow - 24 * 60 * 60 < lastSeen) {
                        var timeTotalSec = timeNow - lastSeen;
                        var minutes = 0;
                        var hours = 0;
                        var sec = 0;
                        minutes = timeTotalSec / 60;
                        if (minutes > 60) {
                            hours = Math.floor(minutes / 60);
                            minutes = Math.ceil(minutes - hours * 60);
                        } else {
                            minutes = Math.ceil(minutes);
                        }
                        var formattedTime = '';
                        if (hours == 0) {
                            formattedTime = ' ' + minutes + 'min';
                        } else {
                            formattedTime = ' ' + hours + 'h ' + minutes + 'min';
                        }
                        if (minutes == 0) {
                            formattedTime = ' < 1min';
                        }
                        jsonWorker['uptime'] = _('Offline for') + formattedTime;
                    } else {
                        jsonWorker['uptime'] = _('Offline for') + ' > 24h';
                    }
                }
            }
        } else {
            if (typeof w['info'].last_seen != 'undefined') {
                var lastSeen = w['info'].last_seen;
                var timeNow = Math.round((new Date().getTime()) / 1000);
                if (timeNow - 24 * 60 * 60 < lastSeen) {
                    var timeTotalSec = timeNow - lastSeen;
                    var minutes = 0;
                    var hours = 0;
                    var sec = 0;
                    minutes = timeTotalSec / 60;
                    if (minutes > 60) {
                        hours = Math.floor(minutes / 60);
                        minutes = Math.ceil(minutes - hours * 60);
                    } else {
                        minutes = Math.ceil(minutes);
                    }
                    var formattedTime = '';
                    if (hours == 0) {
                        formattedTime = ' ' + minutes + 'min';
                    } else {
                        formattedTime = ' ' + hours + 'h ' + minutes + 'min';
                    }
                    if (minutes == 0) {
                        formattedTime = ' < 1min';
                    }
                    jsonWorker['uptime'] = _('Offline for') + formattedTime;
                } else {
                    jsonWorker['uptime'] = _('Offline for') + ' > 24h';
                }
            }
        }

        jsonWorker['filterString'] = filters_string;
        if (typeof jsonWorker.remoteip == 'undefined') {
            jsonWorker.remoteip = '-';
        }
        if (typeof jsonWorker.localip == 'undefined') {
            jsonWorker.localip = '-';
        }
        if (typeof jsonWorker.mining_status == 'undefined') {
            jsonWorker.mining_status = '-';
        }
        if (typeof jsonWorker.temp == 'undefined') {
            jsonWorker.temp = '-';
        }
        if (typeof jsonWorker.fan == 'undefined') {
            jsonWorker.fan = '-';
        }
        if (typeof jsonWorker.watt == 'undefined') {
            jsonWorker.watt = '-';
        }
        if (typeof jsonWorker.uptime == 'undefined') {
            jsonWorker.uptime = '-';
        }
        if (typeof jsonWorker.revenue == 'undefined') {
            jsonWorker.revenue = '-';
        }
        if (typeof jsonWorker.revenue_value == 'undefined') {
            jsonWorker.revenue_value = '-';
        }
        // console.log('mining',w['mining'].latency)
        jsonWorker['latency']=w['mining'].latency
        jsonWorker['latency_type'] =w['mining'].latency_type
        jsonWorker['statusX']=w['info'].status
        jsonWorkers.push(jsonWorker);
        restWorkers.push(jsonWorker)
    });
    $.each(asicArrayIP, function (ip, workersArray) {
        if (workersArray.length > 1) {
            // count_duplicatedips++;
            $.each(workersArray, function (workerIndex, workerName) {
                $.each(jsonWorkers, function (jsonWorkersIndex, jsonWorkersData) {
                    if (jsonWorkersData["name"] == workerName[0]) {
                        jsonWorkersData["filterString"] += 'duplicatedips,';
                    }
                });
            });
        }
    });
    // $('#count_online').html(count_online);
    // if (count_online == 0) {
    //     $('#count_online').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_online').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_offline').html(count_offline);
    // if (count_offline == 0) {
    //     $('#count_offline').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_offline').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_idle').html(count_idle);
    // if (count_idle == 0) {
    //     $('#count_idle').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_idle').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_alerts_pause').html(count_alerts_pause);
    // if (count_alerts_pause == 0) {
    //     $('#count_alerts_pause').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_alerts_pause').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_triggers_pause').html(count_triggers_pause);
    // if (count_triggers_pause == 0) {
    //     $('#count_triggers_pause').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_triggers_pause').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_notes').html(count_notes);
    // if (count_notes == 0) {
    //     $('#count_notes').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_notes').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_profitswitch').html(count_profitswitch);
    // if (count_profitswitch == 0) {
    //     $('#count_profitswitch').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_profitswitch').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_duplicatedips').html(count_duplicatedips);
    // if (count_duplicatedips == 0) {
    //     $('#count_duplicatedips').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_duplicatedips').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_nospace').html(count_nospace);
    // if (count_nospace == 0) {
    //     $('#count_nospace').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_nospace').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_nospeed').html(count_nospeed);
    // if (count_nospeed == 0) {
    //     $('#count_nospeed').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_nospeed').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_noefficiency').html(count_noefficiency);
    // if (count_noefficiency == 0) {
    //     $('#count_noefficiency').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_noefficiency').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_notemperature').html(count_notemperature);
    // if (count_notemperature == 0) {
    //     $('#count_notemperature').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_notemperature').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_nofans').html(count_nofans);
    // if (count_nofans == 0) {
    //     $('#count_nofans').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_nofans').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_nopool').html(count_nopool);
    // if (count_nopool == 0) {
    //     $('#count_nopool').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_nopool').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_nocoin').html(count_nocoin);
    // if (count_nocoin == 0) {
    //     $('#count_nocoin').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_nocoin').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_missinggpus').html(count_missinggpus);
    // if (count_missinggpus == 0) {
    //     $('#count_missinggpus').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_missinggpus').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_idlegpus').html(count_idlegpus);
    // if (count_idlegpus == 0) {
    //     $('#count_idlegpus').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_idlegpus').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_hotlimit').html(count_hotlimit);
    // if (count_hotlimit == 0) {
    //     $('#count_hotlimit').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_hotlimit').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_veryhotlimit').html(count_veryhotlimit);
    // if (count_veryhotlimit == 0) {
    //     $('#count_veryhotlimit').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_veryhotlimit').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_stability').html(count_stability);
    // if (count_stability == 0) {
    //     $('#count_stability').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_stability').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_reboots').html(count_reboots);
    // if (count_reboots == 0) {
    //     $('#count_reboots').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_reboots').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    // $('#count_console').html(count_console);
    // if (count_console == 0) {
    //     $('#count_console').parent().addClass('noresults').parent().find('input').prop("disabled", true);
    // } else {
    //     $('#count_console').parent().removeClass('noresults').parent().find('input').prop("disabled", false);
    // }
    var groupsListStr = '';
    var groupsCount = 0;
    var filter_groups_ordered = [];
    $.each(filter_groups, function (groupName, groupCount) {
        filter_groups_ordered.push(groupName);
        groupsCount++;
    });
    filter_groups_ordered.sort();
    // for (var i = 0; i < groupsCount; i++) {
    //     groupName = filter_groups_ordered[i];
    //     groupCount = filter_groups[groupName];
    //     if ($('.search_result').html().indexOf('<div class="result">' + groupName.toLowerCase() + ' <div class="icon close"></div></div>') != -1) {
    //         var checkedHtml = 'checked="checked"';
    //     } else {
    //         var checkedHtml = '';
    //     }
    //     groupsListStr += '<div class="checkbox_row"><input type="checkbox" data-xxx-g="Groups" id="filter_group_' + groupName.toLowerCase() + '" data-filter="' + groupName.toLowerCase() + '" name="filter_group_' + groupName + '" value="1" ' + checkedHtml + '><label for="filter_group_' + groupName.toLowerCase() + '">' + groupName + ' (' + groupCount + ')</label></div>';
    // }
    // $('#groupsFrame .checkbox_group').html(groupsListStr);
    // if (groupsCount == 0) {
    //     $('#count_groups').parent().parent().hide();
    // } else {
    //     $('#count_groups').html(groupsCount);
    //     $('#count_groups').parent().parent().show();
    // }
    var coinsListStr = '';
    var coinsCount = 0;
    var filter_coins_ordered = [];
    $.each(filter_coins, function (coinName, coinCount) {
        filter_coins_ordered.push(coinName);
        coinsCount++;
    });
    filter_coins_ordered.sort();
    // for (var i = 0; i < coinsCount; i++) {
    //     coinName = filter_coins_ordered[i];
    //     coinCount = filter_coins[coinName];
    //     if ($('.search_result').html().indexOf('<div class="result">' + coinName.toLowerCase() + ' <div class="icon close"></div></div>') != -1) {
    //         var checkedHtml = 'checked="checked"';
    //     } else {
    //         var checkedHtml = '';
    //     }
    //     coinsListStr += '<div class="checkbox_row"><input data-xxx-g="Coins" type="checkbox" id="filter_group_' + coinName.toLowerCase().replace('(', '').replace(')', '').replace(' ', '') + '" data-filter="' + coinName.toLowerCase() + '" name="filter_group_' + coinName.toLowerCase().replace('(', '').replace(')', '').replace(' ', '') + '" value="1" ' + checkedHtml + '><label for="filter_group_' + coinName.toLowerCase().replace('(', '').replace(')', '').replace(' ', '') + '">' + coinName + ' (' + coinCount + ')</label></div>';
    // }
    // ;$('#coinsFrame .checkbox_group').html(coinsListStr);
    // if (coinsCount == 0) {
    //     $('#count_coins').parent().parent().hide();
    // } else {
    //     $('#count_coins').html(coinsCount);
    //     $('#count_coins').parent().parent().show();
    // }
    var clientsListStr = '';
    var clientsCount = 0;
    var filter_clients_ordered = [];
    // $.each(filter_clients, function (clientName, clientCount) {
    //     filter_clients_ordered.push(clientName);
    //     clientsCount++;
    // });
    // filter_clients_ordered.sort();
    // for (var i = 0; i < clientsCount; i++) {
    //     clientName = filter_clients_ordered[i];
    //     clientCount = filter_clients[clientName];
    //     if ($('.search_result').html().indexOf('<div class="result">' + clientName.toLowerCase() + ' <div class="icon close"></div></div>') != -1) {
    //         var checkedHtml = 'checked="checked"';
    //     } else {
    //         var checkedHtml = '';
    //     }
    //     clientsListStr += '<div class="checkbox_row"><input type="checkbox" id="filter_group_' + clientName.toLowerCase() + '" data-filter="' + clientName.toLowerCase() + '" name="filter_group_' + clientName + '" value="1" ' + checkedHtml + '><label for="filter_group_' + clientName.toLowerCase() + '">' + clientName + ' (' + clientCount + ')</label></div>';
    // }
    // $('#clientsFrame .checkbox_group').html(clientsListStr);
    if (clientsCount == 0) {
        $('#count_clients').parent().parent().hide();
    } else {
        $('#count_clients').html(clientsCount);
        $('#count_clients').parent().parent().show();
    }
    if (typeof groupsFrame != 'undefined' && groupsFrame != 'undefined') {
        groupsFrame.update();
    }
    if (typeof coinsFrame != 'undefined' && coinsFrame != 'undefined') {
        coinsFrame.update();
    }
    if (typeof clientsFrame != 'undefined' && clientsFrame != 'undefined') {
        clientsFrame.update();
    }
    var sortby = getUrlParameter('sortby');
    if (sortby == 'status') {
        sort = 'miningAsc';
    } else if (sortby == 'temperature') {
        sort = 'tempDesc';
    } else if (sortby == 'temperature-asc') {
        sort = 'tempAsc';
    } else {
        var v = document.cookie.match('(^|;) ?workersSort=([^;]*)(;|$)');
        sort = v ? v[2] : '';
    }
    if (sort != '') {
        workersSort(sort);
    } else {
        printWorkers();
    }
    if (userPermission == 'technical' || userPrimaryPermission == 'technical') {
        $('.flexRevenue').hide();
        $('.financialData').hide();
    }
    setTimeout(function () {
        workersRefresh(false);
    }, 20 * 1000);
    preloaderHide();
}
var displayCounter;

function printWorkers() {
    var hiddenTab = '';
    if (selectedWorkers.length < 1) {
        $('#checked_rows').hide();
    } else {
        hiddenTab = 'hidden';
    }
    var workersArray = jsonWorkers;

    var counter = 0;
    displayCounter = 0;
    var arrayLength = workersArray.length;
    var workersHtml = '<tr><th class="flexCheckbox check_width ' + hiddenTab + '"><div class="checkbox" onclick="selectAll(this);"></div></th><th class="flexStatus status_width"></th>';
    if (sort == 'nameDesc') {
        workersHtml += '<th onclick="workersSort(\'nameX\');" class="flexWorker ordered orderTh ' + hiddenTab + '"><div class="order_icon desc" id="sort_name"></div>' + _mx('Worker') + '</th>';
    } else if (sort == 'nameAsc') {
        workersHtml += '<th onclick="workersSort(\'nameDesc\');" class="flexWorker ordered orderTh ' + hiddenTab + '"><div class="order_icon asc" id="sort_name"></div>' + _mx('Worker') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'nameAsc\');" class="flexWorker orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_name"></div>' + _mx('Worker') + '</th>';
    }
    if (sort == 'miningDesc') {
        workersHtml += '<th onclick="workersSort(\'miningX\');" class="flexMining ordered orderTh ' + hiddenTab + '"><div class="order_icon desc" id="sort_mining"></div>' + _mx('Mining') + '</th>';
    } else if (sort == 'miningAsc') {
        workersHtml += '<th onclick="workersSort(\'miningDesc\');" class="flexMining ordered orderTh ' + hiddenTab + '"><div class="order_icon asc" id="sort_mining"></div>' + _mx('Mining') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'miningAsc\');" class="flexMining orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_mining"></div>' + _mx('Mining') + '</th>';
    }
    if (sort == 'tempDesc') {
        workersHtml += '<th onclick="workersSort(\'tempX\');" class="flexTemp orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_temp"></div>' + _mx('Max. Temp') + '</th>';
    } else if (sort == 'tempAsc') {
        workersHtml += '<th onclick="workersSort(\'tempDesc\');" class="flexTemp orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_temp"></div>' + _mx('Max. Temp') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'tempAsc\');" class="flexTemp orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_temp"></div>' + _mx('Max. Temp') + '</th>';
    }
    if (sort == 'fansDesc') {
        workersHtml += '<th onclick="workersSort(\'fansX\');" class="flexFans orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_fans"></div>' + _mx('Max. Fans') + '</th>';
    } else if (sort == 'fansAsc') {
        workersHtml += '<th onclick="workersSort(\'fansDesc\');" class="flexFans orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_fans"></div>' + _mx('Max. Fans') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'fansAsc\');" class="flexFans orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_fans"></div>' + _mx('Max. Fans') + '</th>';
    }
    if (sort == 'wattDesc') {
        workersHtml += '<th onclick="workersSort(\'wattX\');" class="flexPower orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_watt"></div>' + _mx('Power') + '</th>';
    } else if (sort == 'wattAsc') {
        workersHtml += '<th onclick="workersSort(\'wattDesc\');" class="flexPower orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_watt"></div>' + _mx('Power') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'wattAsc\');" class="flexPower orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_watt"></div>' + _mx('Power') + '</th>';
    }
    if (sort == 'uptimeDesc') {
        workersHtml += '<th onclick="workersSort(\'uptimeX\');" class="flexUptime orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_uptime"></div>' + _mx('Uptime') + '</th>';
    } else if (sort == 'uptimeAsc') {
        workersHtml += '<th onclick="workersSort(\'uptimeDesc\');" class="flexUptime orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_uptime"></div>' + _mx('Uptime') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'uptimeAsc\');" class="flexUptime orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_uptime"></div>' + _mx('Uptime') + '</th>';
    }
    if (sort == 'earningsDesc') {
        workersHtml += '<th onclick="workersSort(\'earningsX\');" class="flexRevenue orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_earnings"></div>' + _mx('Est. monthly') + '</th>';
    } else if (sort == 'earningsAsc') {
        workersHtml += '<th onclick="workersSort(\'earningsDesc\');" class="flexRevenue orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_earnings"></div>' + _mx('Est. monthly') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'earningsAsc\');" class="flexRevenue orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_earnings"></div>' + _mx('Est. monthly') + '</th>';
    }
    if (sort == 'latencyDesc') {
        workersHtml += '<th onclick="workersSort(\'latencyX\');" class="flexRevenue orderTh ordered ' + hiddenTab + '"><div class="order_icon desc" id="sort_latency"></div>' + _mx('Latency') + '</th>';
    } else if (sort == 'latencyAsc') {
        workersHtml += '<th onclick="workersSort(\'latencyDesc\');" class="flexRevenue orderTh ordered ' + hiddenTab + '"><div class="order_icon asc" id="sort_latency"></div>' + _mx('Latency') + '</th>';
    } else {
        workersHtml += '<th onclick="workersSort(\'latencyAsc\');" class="flexRevenue orderTh ' + hiddenTab + '"><div class="order_icon" id="sort_latency"></div>' + _mx('Latency') + '</th>';
    }
    workersHtml += '<th class="flexActions align_right actions_width">' + _mx('Actions') + '</th></tr>';
    let sumMhashrate=0
    let avgTemp=0
    let avgFans=0
    let sumHdSy=0
    let sumHdSySum=0
    let sumPower=0
    let sumPowerSame=0
    let avgUpdateTime=0
    let sumEst=0
    let sumEstSame=0
    let avgLatency=0
    let mycount=0
    let coinIcon=''
    let acceptSum=0
    let rejectedSum=0
    $.each(workersArray, function (key, worker) {
        if(worker.statusX!=='offline'){
            mycount++
        }
        if(typeof worker.mining_number!='undefined'){
            sumMhashrate+=worker.mining_number
        }
        if(typeof worker.sAcceptedShares!='undefined'){
            acceptSum+=Number(worker.sAcceptedShares)
        }
        if(typeof worker.sRejectedShares!='undefined'){
            rejectedSum+=Number(worker.sRejectedShares)
        }
        if(typeof worker.coinUint!='undefined'){
            coinIcon=worker.coinUint
        }
        if(typeof worker.revenue_same!='undefined'){
            sumEstSame=Math.fround(Number(worker.revenue_same)+sumEstSame)
        }
        if(typeof worker.latency!='undefined'){
            avgLatency+= +worker.latency
        }
        if(typeof worker.revenue_value!='undefined'){
            sumEst=Math.fround(Number(worker.revenue_value)+sumEst)
        }
        if(typeof worker.watt_n_value!='undefined'){
            sumPower+=worker.watt_n_value
        }
        if(typeof worker.uptime_value!='undefined'){
            avgUpdateTime+=Number(worker.uptime_value)
        }
        if(typeof worker.watt_n_same!='undefined'){
            sumPowerSame+=worker.watt_n_same
        }
        if(typeof worker.hd_Sy!='undefined'){
            sumHdSy+=worker.hd_Sy
        }
        if(typeof worker.hd_Sy_sum!='undefined'){
            sumHdSySum+=worker.hd_Sy_sum
        }
        if(typeof worker.temp_n_value!='undefined'){
            avgTemp+=Number(worker.temp_n_value)
        }
        if(typeof worker.fan_n_value!='undefined'){
            avgFans+=Number(worker.fan_n_value)
        }
        if (displayCounter < end && displayCounter >= start) {
            var canShow = true;
        } else {
            var canShow = false;
        }
        // console.log('workerInfo',worker)
        counter++;
        $tags = (',' + worker.filterString + ',' + worker.crypto + ',' + worker.name + ',' + worker.groups + ',' + worker.localip + ',' + worker.remoteip + ',').toLowerCase();
        var tagAll = tag.split(":");
        var tagsCount = tagAll.length;
        var tagsLoop = 0;
        var tagsFound = 0;
        $.each(tagAll, function (tKey, tVal) {
            tagsFound++;
            // if (tVal != '' && search != '') {
            //     if ($tags.indexOf(',' + tVal + ',') == -1 || $tags.indexOf(search) == -1) {
            //         var display = 'display:none;';
            //     } else {
            //         tagsFound++;
            //     }
            // } else if (tVal != '') {
            //     if ($tags.indexOf(',' + tVal + ',') == -1) {
            //         var display = 'display:none;';
            //     } else {
            //         tagsFound++;
            //     }
            // } else if (search != '') {
            //     if ($tags.indexOf(search) == -1) {
            //         var display = 'display:none;';
            //     } else {
            //         tagsFound++;
            //     }
            // } else {
            //     tagsFound++;
            // }
            tagsLoop++;
            tagsCount--;
            if (tagsCount == 0) {

                if (tagsFound == tagsLoop) {
                    displayCounter++;

                    if (canShow) {
                        var display = '';
                    } else {
                        var display = 'display:none;';
                    }
                    var tags = '';
                    var tagsArray = worker.groups.split(",");
                    $.each(tagsArray, function (key, tag) {
                        var tag = tag.replace(';', '');
                        if (tag != '') {
                            tags += '<span class="tag">' + tag + '</span>';
                        }
                    });
                    var borderAddOn = '';
                    if (viewMode == 1) {
                        borderAddOn = ' class="noborder"';
                    }
                    if (access == 'guest') {
                        if (worker.mining_status != '-') {
                            if (rigType == 'asic') {
                                actions = '<div class="icons_list hide">';
                                actions += '	<a data-tooltip="' + _('Statistics') + '" href="/worker-statistics/' + worker.name + '" class="icon_box"><div class="icon stats"></div></a>';
                                // actions += '	<a data-tooltip="' + _('Details') + '" href="/worker#' + worker.id + '" class="icon_box"><div class="icon details"></div></a>';
                                actions += '	<a data-tooltip="' + _('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                                actions += '</div>';
                                actions += '<div class="icons_list_hamburger"></div>';
                            } else {
                                actions = '<div class="icons_list hide">';
                                actions += '	<a data-tooltip="' + _('Statistics') + '" href="/worker-statistics/' + worker.name + '" class="icon_box"><div class="icon stats"></div></a>';
                                actions += '	<a data-tooltip="' + _('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                                actions += '</div>';
                                actions += '<div class="icons_list_hamburger"></div>';
                            }
                        } else {
                            actions = '<div class="icons_list hide">';
                            actions += '	<a data-tooltip="' + _('Statistics') + '" href="/worker-statistics/' + worker.name + '" class="icon_box"><div class="icon stats"></div></a>';
                            actions += '	<a data-tooltip="' + _('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                            actions += '</div>';
                            actions += '<div class="icons_list_hamburger"></div>';
                        }
                        var pauseTags = '';
                        if (worker['pause_alerts'] == 1) {
                            pauseTags += '<div data-tooltip="' + _('Alerts paused') + '" class="icon pause_alerts"></div>';
                        }
                        if (worker['pause_triggers'] == 1) {
                            pauseTags += '<div data-tooltip="' + _('Triggers paused') + '" class="icon pause_triggers"></div>';
                        }
                        if (pauseTags != '') {
                            pauseTags = '<div class="pause_icons">' + pauseTags + '</div>';
                        }
                        workersHtml += '<tr data-worker="' + worker.name.toLowerCase() + '" data-id="'+worker.id+'" data-name="' + worker.name + '" style="' + display + '"' + borderAddOn + '>';
                        workersHtml += '	<td class="flexCheckbox check_width"><div class="checkbox"></div></td>';
                        workersHtml += '	<td class="flexStatus status_width">' + worker.status + '</td>';
                        workersHtml += '	<td class="flexWorker"><div class="worker_name_box"><a class="worker_name" href="/worker#' + worker.id + '">' + worker.name + '</a>' + pauseTags + '</div><span class="tags">' + tags + '</span></td>';
                        workersHtml += '	<td data-responsive="' + _mx("Mining") + '" class="flexMining mining_status"></div>' + worker.mining_status + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Max. Temp") + '" class="flexTemp filter_avgtemp">' + worker.temp + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Max. Fans") + '" class="flexFans filter_avgfans">' + worker.fan + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Power") + '" class="flexPower filter_watt">' + worker.watt + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Uptime") + '" class="flexUptime filter_uptime">' + worker.uptime + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Est. monthly") + '" class="flexRevenue mining_revenue">' + worker.revenue + '</td>';
                        workersHtml += '	<td data-responsive="' + _mx("Latency") + '" class="flexFans mining_revenue" style="order: 10">' + (worker.latency_type!=''?worker.latency+'('+worker.latency_type+')':worker.latency) + '</td>';
                        workersHtml += '	<td class="flexActions align_right actions_width">' + actions + '</td>';
                        workersHtml += '</tr>';
                    } else {
                        var cpuTooltip = _('CPU mining disabled');
                        var cpuToggle = '';
                        if (worker.client_cpu != '' && worker.client_cpu != 'disabled') {
                            cpuTooltip = _('CPU mining enabled');
                            cpuToggle = 'selected';
                        }
                        var switchTooltip = _('Profit switch disabled');
                        var switchToggle = '';
                        if (worker.profit_switch == '1') {
                            switchTooltip = _('Profit switch enabled');
                            switchToggle = 'selected';
                        }
                        var cpuHtml = '';
                        var rigType = worker.type;
                        var rigSystem = worker.system;
                        if (rigSystem == 'linux') {
                            rigSystem = 'msos';
                        }
                        if (rigSystem == 'win') {
                            rigSystem = 'windows';
                        }
                        var clientsList = '<b>' + _('Load from template') + '</b>';
                        var countTemplates = 0;
                        var configTemplatesArray = [];
                        var configTemplatesObj = {};
                        jQuery.each(clients, function (client, data) {
                            if ($.inArray(rigType, data['for']) !== -1 && $.inArray(rigSystem, data['for']) !== -1 && typeof data['templates'] != 'undefined') {
                                $.each(data['templates'], function (index, value) {
                                    configTemplatesArray.push(value.name.toLowerCase());
                                    configTemplatesObj[value.name.toLowerCase()] = {};
                                    configTemplatesObj[value.name.toLowerCase()]['id'] = value.id;
                                    configTemplatesObj[value.name.toLowerCase()]['name'] = value.name;
                                    configTemplatesObj[value.name.toLowerCase()]['client'] = client.toUpperCase();
                                    countTemplates++;
                                });
                            }
                            if (rigType != 'asic') {
                                if ($.inArray(rigSystem, data['for']) !== -1 && $.inArray('cpu', data['for']) !== -1) {
                                    cpuHtml = '<div class="divider"></div><div class="row"><label>' + _('CPU mining') + '</label><div data-tooltip="' + cpuTooltip + '" class="cpumining toggle" onclick="cpuMining(\'' + worker.name + '\');"><div class="bullet ' + cpuToggle + '"></div></div></div>';
                                }
                            }
                        });
                        configTemplatesArray.sort();
                        jQuery.each(configTemplatesArray, function (configTemplateIndex, configTemplateName) {
                            configTemplateData = configTemplatesObj[configTemplateName];
                            clientsList += '<div class="row" data-template="' + configTemplateData['id'] + '">' + configTemplateData['name'] + '<small>' + configTemplateData['client'] + '</small></div>';
                        });
                        if (countTemplates == 0) {
                            clientsList += '<div class="empty">' + _('No templates') + '</div><a class="button green" href="/config-templates/new" title="' + _('Create new template') + '">' + _('Create new template') + '</a>';
                        }
                        var client = worker.client.toUpperCase();
                        clientsList = clientsList.replace('class="row">' + client, 'class="row selected">' + client);
                        if (display == '') {
                            if (worker.mining_status != '-') {
                                if (rigType == 'asic') {
                                    actions = '<div class="icons_list hide">';
                                    actions += '	<div data-tooltip="' + _mx('Delete') + '" class="icon_box" onclick="deleteWorker(\'' + worker.name + '\','+worker.id+');"><div class="icon bin"></div></div>';
                                    actions += '	<div data-tooltip="' + _mx('Reboot machine') + '" class="icon_box" onclick="rebootMachine(\'' + worker.name + '\','+worker.id+');"><div class="icon reboot"></div></div>';
                                    actions += '	<div data-tooltip="' + _mx('Restart software') + '" class="icon_box" onclick="restartSoftware(\'' + worker.name + '\','+worker.id+');"><div class="icon restart"></div></div>';
                                    actions += '	<a data-tooltip="' + _mx('Config') + '" onclick="linkConfig('+worker.id+')" class="financialData icon_box"><div class="icon config"></div></a>';
                                    // actions += '	<a data-tooltip="' + _mx('Details') + '" href="/worker#' + worker.id + '" class="icon_box"><div class="icon details"></div></a>';
                                    actions += '	<a data-tooltip="' + _mx('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                                    actions += '	<a data-tooltip="' + _mx('Worker statistics') + '" href="/worker-statistics#' + worker.id + '" class="icon_box"><div class="icon s_st"></div></a>';
                                    actions += '</div>';
                                    actions += '<div class="icons_list_hamburger"></div>';
                                } else {
                                    actions = '<div class="icons_list hide">';
                                    actions += '	<div data-tooltip="' + _mx('Delete') + '" class="icon_box" onclick="deleteWorker(\'' + worker.name + '\','+worker.id+');"><div class="icon bin"></div></div>';
                                    actions += '	<div data-tooltip="' + _mx('Reboot machine') + '" class="icon_box" onclick="rebootMachine(\'' + worker.name + '\','+worker.id+');"><div class="icon reboot"></div></div>';
                                    actions += '	<div data-tooltip="' + _mx('Restart software') + '" class="icon_box" onclick="restartSoftware(\'' + worker.name + '\','+worker.id+');"><div class="icon restart"></div></div>';
                                    actions += '	<a data-tooltip="' + _mx('Config') + '" onclick="linkConfig('+worker.id+')" class="financialData icon_box"><div class="icon config"></div></a>';
                                    actions += '	<a data-tooltip="' + _mx('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                                    actions += '	<a data-tooltip="' + _mx('Worker statistics') + '" href="/worker-statistics#' + worker.id + '" class="icon_box"><div class="icon s_st"></div></a>';
                                    actions += '</div>';
                                    actions += '<div class="icons_list_hamburger"></div>';
                                }
                            } else {
                                actions = '<div class="icons_list hide">';
                                actions += '	<div data-tooltip="' + _mx('Delete') + '" class="icon_box" onclick="deleteWorker(\'' + worker.name + '\','+worker.id+');"><div class="icon bin"></div></div>';
                                 actions += '	<div data-tooltip="' + _mx('Reboot machine') + '" class="icon_box" onclick="rebootMachine(\'' + worker.name + '\','+worker.id+');"><div class="icon reboot"></div></div>';
                                actions += '	<div data-tooltip="' + _mx('Restart software') + '" class="icon_box" onclick="restartSoftware(\'' + worker.name + '\','+worker.id+');"><div class="icon restart"></div></div>';
                                actions += '	<a data-tooltip="' + _mx('Config') + '" onclick="linkConfig('+worker.id+')" class="financialData icon_box"><div class="icon config"></div></a>';
                                actions += '	<a data-tooltip="' + _mx('Details') + '" onclick="toWorkerInfo('+worker.id+')" class="icon_box"><div class="icon details"></div></a>';
                                actions += '	<a data-tooltip="' + _mx('Worker statistics') + '" href="/worker-statistics#' + worker.id + '" class="icon_box"><div class="icon s_st"></div></a>';
                                actions += '</div>';
                                actions += '<div class="icons_list_hamburger"></div>';
                            }
                            if (selectedWorkers.indexOf(worker.id) > -1) {
                                var selected = 'selected';
                            } else {
                                var selected = '';
                            }
                            var pauseTags = '';
                            if (worker['pause_alerts'] == 1) {
                                pauseTags += '<div data-tooltip="' + _('Alerts paused') + '" class="icon pause_alerts"></div>';
                            }
                            if (worker['pause_triggers'] == 1) {
                                pauseTags += '<div data-tooltip="' + _('Triggers paused') + '" class="icon pause_triggers"></div>';
                            }
                            if (pauseTags != '') {
                                pauseTags = '<div class="pause_icons">' + pauseTags + '</div>';
                            }
                            workersHtml += '<tr data-worker="' + worker.name.toLowerCase() + '" data-id="'+worker.id+'" data-name="' + worker.name + '" style="' + display + '"' + borderAddOn + '>';
                            workersHtml += '	<td class="flexCheckbox check_width"><div class="checkbox ' + selected + '"></div></td>';
                            workersHtml += '	<td class="flexStatus status_width">' + worker.status + '</td>';
                            // workersHtml += '	<td class="flexWorker"><div class="worker_name_box"><a class="worker_name" href="/worker#' + worker.id + '">' + worker.name + '</a>' + pauseTags + '</div></div><span class="tags">' + tags + '</span></td>';
                            workersHtml += '	<td class="flexWorker"><div class="worker_name_box"><a class="worker_name" onclick="toWorkerInfo('+worker.id+')">' + worker.name + '</a>' + pauseTags + '</div></div><span class="tags">' + tags + '</span></td>';
                            workersHtml += '	<td data-responsive="' + _mx("Mining") + '" class="flexMining mining_status"></div>' + worker.mining_status + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Max. Temp") + '" class="flexTemp filter_avgtemp">' + worker.temp + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Max. Fans") + '" class="flexFans filter_avgfans">' + worker.fan + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Power") + '" class="flexPower filter_watt">' + worker.watt + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Uptime") + '" class="flexUptime filter_uptime">' + worker.uptime + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Est. monthly") + '" class="flexRevenue mining_revenue">' + worker.revenue + '</td>';
                            workersHtml += '	<td data-responsive="' + _mx("Latency") + '" class="flexFans mining_revenue" style="order: 10">' + (worker.latency_type!=''?worker.latency+'('+worker.latency_type+')':worker.latency ) + '</td>';
                            workersHtml += '	<td class="flexActions align_right actions_width">' + actions + '</td>';
                            workersHtml += '</tr>';
                        }
                    }
                    if (viewMode == 1) {
                        workersHtml += '<tr data-worker="' + worker.name.toLowerCase() + '" data-id="'+worker.id+'" data-name="' + worker.name + '" style="' + display + '" class="hardware_list">';
                        workersHtml += '	<td colspan="10">';
                        workersHtml += '		<div class="hardware_row">';
                        if (typeof worker.hardware_list != 'undefined' && worker.hardware_list.length != 0) {
                            var hardwareCount = 0;
                            var speedCount = 0;
                            jQuery.each(worker.hardware_list, function (hardwareIndex, hardwareData) {
                                if (typeof hardwareData.speed != 'undefined') {
                                    speedCount++;
                                }
                            });
                            jQuery.each(worker.hardware_list, function (hardwareIndex, hardwareData) {
                                var hardwareName = hardwareData.name;
                                if (typeof hardwareName != 'undefined' && hardwareName != '') {
                                    hardwareName = hardwareName.replace(/AMD|Nvidia|GeForce|MSI|Gigabyte|ASUS|ZOTAC|eVga|Sapphire|XFX|Radeon|Series|24GB|16GB|11GB|10GB|8GB|6GB|4GB|3GB|0GB/g, '');
                                    hardwareName = hardwareName.replace('VII', 'Radeon VII');
                                    if (hardwareName.indexOf('Ellesmere') != -1) {
                                        hardwareName = '';
                                    }
                                    hardwareName = '#' + hardwareCount + ' ' + hardwareName;
                                } else {
                                    hardwareName = '#' + hardwareCount;
                                }
                                var hardwareFan = '-';
                                if (typeof hardwareData.fan != 'undefined' && hardwareData.fan > 0) {
                                    if (hardwareData.fan > 105) {
                                        hardwareFan = hardwareData.fan + ' RPM';
                                    } else {
                                        if (hardwareData.fan > 105) {
                                            hardwareData.fan = 100;
                                        }
                                        hardwareFan = hardwareData.fan + '%';
                                    }
                                }
                                var elColor = 0;
                                var tempColor = 0;
                                var speedColor = 0;
                                var tempAddOn = '';
                                if (typeof worker.temp_hot != 'undefined' && worker.temp_hot != 'undefined' > 0 && hardwareData.temp >= worker.temp_hot) {
                                    tempAddOn = '<div class="icon warning"></div>';
                                    tempColor = 1;
                                    elColor = 1;
                                }
                                if (typeof worker.temp_veryhot != 'undefined' && worker.temp_veryhot != 'undefined' > 0 && hardwareData.temp >= worker.temp_veryhot) {
                                    tempAddOn = '<div class="icon hot"></div>';
                                    tempColor = 2;
                                    elColor = 2;
                                }
                                var hardwareTemp = '-';
                                if (typeof hardwareData.temp != 'undefined') {
                                    hardwareTemp = convertTemperature(hardwareData.temp) + temperature;
                                }
                                if (typeof hardwareData.temp2 != 'undefined') {
                                    hardwareTemp += ' &middot; ' + convertTemperature(hardwareData.temp2) + temperature;
                                }
                                if (typeof hardwareData.memTemp != 'undefined') {
                                    hardwareTemp += ' &middot; ' + convertTemperature(hardwareData.memTemp) + temperature;
                                }
                                var hardwarePower = '-';
                                if (typeof hardwareData.power != 'undefined') {
                                    hardwarePower = hardwareData.power + ' W';
                                }
                                var hardwareSpeed = '-';
                                if (typeof hardwareData.speed != 'undefined') {
                                    var convertedHashrate = convertHashrate(speedToHash(hardwareData.speed, worker.mining_unit), 'H/s');
                                    hardwareSpeed = convertedHashrate.split(' ')[0] + '<span class="sub">' + convertedHashrate.split(' ')[1] + '</span>';
                                } else {
                                    if (speedCount > 0 && worker.type != 'asic') {
                                        elColor = 2;
                                        speedColor = 2;
                                    }
                                }
                                workersHtml += '		<div class="hardware_el color' + elColor + '">';
                                workersHtml += '			<div class="hardware_header">' + hardwareName + '</div>';
                                if (speedCount > 0) {
                                    workersHtml += '			<div class="el_row el_hashrate color' + speedColor + '"><b>' + hardwareSpeed + '</b></div>';
                                    workersHtml += '			<div class="divider"></div>';
                                }
                                workersHtml += '			<div class="el_row el_data color' + tempColor + '">' + hardwareTemp + '</div>';
                                workersHtml += '			<div class="el_row el_data">' + hardwareFan + '</div>';
                                workersHtml += '			<div class="el_row el_data">' + hardwarePower + '</div>';
                                if (typeof hardwareData.core != 'undefined' || typeof hardwareData.vddc != 'undefined' || typeof hardwareData.memory != 'undefined' || typeof hardwareData.mvdd != 'undefined') {
                                    workersHtml += '			<div class="hardware_tooltip">';
                                    workersHtml += '				<div class="el_row">';
                                    if (typeof hardwareData.core != 'undefined' && hardwareData.core != '') {
                                        workersHtml += '<label>CORE</label>' + '<b>' + hardwareData.core + ' MHz</b>';
                                    }
                                    if (typeof hardwareData.vddc != 'undefined' && hardwareData.vddc != '') {
                                        workersHtml += '<label>VDDC</label>' + '<b>' + hardwareData.vddc + ' mV</b>';
                                    }
                                    if (typeof hardwareData.memory != 'undefined' && hardwareData.memory != '') {
                                        workersHtml += '<label>MEM</label>' + '<b>' + hardwareData.memory + ' MHz</b>';
                                    }
                                    if (typeof hardwareData.mvdd != 'undefined' && hardwareData.mvdd != '') {
                                        workersHtml += '<label>MVDD</label>' + '<b>' + hardwareData.mvdd + ' mV</b>';
                                    }
                                    workersHtml += '				</div>';
                                    workersHtml += '			</div>';
                                }
                                workersHtml += '		</div>';
                                hardwareCount++;
                            });
                        }
                        workersHtml += '		</div>';
                        workersHtml += '	</td>';
                        workersHtml += '</tr>';
                    }
                }
            }
        });
        if (counter == arrayLength) {
            $('table').html(workersHtml);
            let strMx='<tr data-worker="c010" data-id="38656729711" data-name="C010" style="">\n' +
                '\t<td>\n' +
                '\t\t\n' +
                '\t</td>\n' +
                '\t<td class="flexStatus status_width">\n' +
                '\t\t\n' +
                '\t</td>\n' +
                '\t<td class="flexWorker">\n' +
                '\t\t<div class="worker_name_box">\n' +
                '\t\t\t<div>\n' +
                '\t\t\t\t'+_mx('Total')+'\n' +
                '\t\t\t</a>\n' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '\t<td data-responsive="'+_mx("Mining")+'" class="flexMining mining_status">\n' +
                '\t\t<div class="ttp">\n' +
                +sumMhashrate.toFixed(2)+'MH/s\n' +
                '\t\t\t<small>\n'
                if((parseInt(acceptSum) + parseInt(rejectedSum))!=0){
                  strMx+= '\t\t\t\t'+Math.fround(100 * parseInt(acceptSum) / (parseInt(acceptSum) + parseInt(rejectedSum))).toFixed(2)+' efficiency · '+parseInt(acceptSum)+' · '+parseInt(rejectedSum)+'\n'
                }else {
                  strMx+= '\t\t\t\t0 efficiency · '+parseInt(acceptSum)+' · '+parseInt(rejectedSum)+'\n'
                }
                strMx+='\t\t\t</small>\n' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '<td data-responsive="'+_mx("Avg. Temp")+'" class="flexTemp filter_avgtemp">'+
                '<div class="ttp">'+
                (mycount>0?Math.floor(avgTemp/mycount):'0')+'℃'+
                '</div>'+
                '</td>'+
                '\t<td data-responsive="'+ _mx("Avg. Fans") +'" class="flexFans filter_avgfans">\n' +
                '\t\t<div class="ttp">\n' +
                    (mycount>0?Math.floor(avgFans/mycount):'0')+'%' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '\t<td data-responsive="'+ _mx("Power") +'" class="flexPower filter_watt">\n' +
                '\t\t<div class="ttp">\n' +
                    sumHdSy+'/'+sumHdSySum+' '+sumPower+' W\n' +
                '\t\t\t<small>\n' +
                '\t\t\t\t'+(sumPower>0?(Math.fround(sumMhashrate/sumPower).toFixed(4)):'0')+' MH/W\n' +
                '\t\t\t</small>\n' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '\t<td data-responsive="'+_mx("Uptime")+'" class="flexUptime filter_uptime">\n' +
                '\t\t<div class="ttp">\n' +
                '\t\t\t'+(mycount>0?Math.floor(avgUpdateTime/mycount):'0')+'s\n' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '\t<td data-responsive="'+_mx("Est. monthly")+'" class="flexRevenue mining_revenue">\n' +
                '\t\t<div class="ttp">\n' +
                '\t\t\t<div class="earnings_dollar">\n' +
                '\t\t\t\t'+sumEst.toFixed(2)+' CNY\n' +
                '\t\t\t</div>\n' +
                '\t\t\t<div class="earnings_btc">\n' +
                '\t\t\t\t'+sumEstSame.toFixed(6)+' ETH\n' +
                '\t\t\t</div>\n' +
                '\t\t\t<div class="tooltip">\n' +
                '\t\t\t\t<div class="arrow">\n' +
                '\t\t\t\t</div>\n' +
                '\t\t\t\t'+coinIcon+'\n' +
                '\t\t\t\t<div class="divider">\n' +
                '\t\t\t\t</div>\n' +
                '\t\t\t\tEst. ETH: '+sumEstSame.toFixed(8)+' ETH\n' +
                '\t\t\t</div>\n' +
                '\t\t</div>\n' +
                '\t</td>\n' +
                '\t<td data-responsive="'+ _mx("Avg. Latency")+'" class="flexFans mining_revenue" style="order: 10">\n' +
                    (mycount>0?Math.floor(avgLatency/mycount):'0')+'\n' +
                '\t</td>\n' +
                '\t<td class="flexActions align_right actions_width">\n' +
                '\t</td>\n' +
                '</tr>'
            $('table').append(strMx);
            $('.loader_frame').removeClass('display');
            var pagesHtml = '';
            // pages = Math.ceil(displayCounter / 25);
            if (total_page > 0) {
                for (p = 1; p <= total_page; p++) {
                    if (p == search_page) {
                        pagesHtml += '<div class="page selected" onclick="selectSearchConditionPage(' + p + ');">' + p + '</div>';
                    } else {
                        pagesHtml += '<div class="page" onclick="selectSearchConditionPage(' + p + ');">' + p + '</div>';
                    }
                }
                $('.pages').html(pagesHtml);
            }
        }
    });
    if(jsonWorkers.length==0){
        $('table').html(workersHtml);
        $('.pages').html('');
    }
    if (userPermission == 'technical' || userPrimaryPermission == 'technical') {
        $('.flexRevenue').hide();
        $('.financialData').hide();
    }
}

$('table').on('click', '.switch_menu > .frame > .row', function () {
    if ($(this).hasClass('selected')) {
        $('.switch_menu').fadeOut('fast');
        return false;
    }
    var workerName = $(this).closest('tr').attr('data-worker');
    var template = $(this).attr('data-template');
    var nonce = $('#nonce').val();
    if (workerName == '' || template == '' || nonce == '') {
        return false;
    }
    $.post(window.location.href, {worker: workerName, template: template, nonce: nonce}, function (response) {
        $('.switch_menu').fadeOut('fast');
    });
});
$('#rename_worker .green').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    var groupUnfinished = $('#popup_tag').val();
    if (groupUnfinished != '') {
        $('#popup_tag').before('<div class="tag" data-value="' + groupUnfinished + '">' + groupUnfinished + ' <div class="icon close"></div></div>');
        $('#popup_tag').val('');
    }
    $('#rename_worker .outlined_button, #rename_worker .green').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    var newName = $('#rename_worker input').val();
    if (newName == '') {
        return false;
    }
    var ip = $('#rename_worker .asicip').val();
    var username = $('#rename_worker .asicuser').val();
    var password = $('#rename_worker .asicpassword').val();
    var type = $('#rename_worker #popup_type').val();
    var systemAsic = $('#rename_worker #popup_system_asic').val();
    var systemGpu = $('#rename_worker #popup_system_gpu').val();
    var groups = '';
    $('#rename_worker #groups').find('.tag').each(function () {
        groups += ';' + $(this).attr('data-value') + ';';
    });
    $.post(window.location.href, {
        worker: workerNameId,
        groups: groups,
        type: type,
        systemAsic: systemAsic,
        systemGpu: systemGpu,
        name: newName,
        ip: ip,
        username: username,
        password: password,
        nonce: nonce
    }, function (response) {
        if (response == '1') {
            workersRefresh(false);
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#rename_worker').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#rename_worker .outlined_button, #rename_worker .green').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            location.reload();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#rename_worker .outlined_button, #rename_worker .green').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#rename_worker .outlined_button, #rename_worker .green').removeClass('disabled');
        }, 2010);
    });
});

function editNote(wn,name) {
    var nonce = $('#nonce').val();
    $.post(window.location.href, {workerNote: wn, nonce: nonce}, function (response) {
        $('#edit_note textarea').val(response);
    });
    var scrollTop = $(window).scrollTop() + 20;
    $('#edit_note').css('top', scrollTop + 'px');
    $('#edit_note .title').html(name + _mx('\'s notes'));
    $('.popupbackground').fadeToggle();
    $('#edit_note').fadeToggle('fast');
    $('#edit_note .green').attr('data-wn', wn);
}

$('.reset_button').click(function () {
    $('#edit_note textarea').val('');
});
$('#edit_note .green').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#edit_note .outlined_button, #edit_note .green').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var nonce = $('#nonce').val();
    var note = $('#edit_note textarea').val();
    $.post(window.location.href, {worker: workerName, note: note, nonce: nonce}, function (response) {
        if (response == '1') {
            workersRefresh(false);
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#edit_note').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#edit_note .outlined_button, #edit_note .green').removeClass('disabled');
        }, 4500);
    });
});

function renameWorker(wn,wnId) {
    $('#rename_worker .asic > input').val('');
    $('#rename_worker .asic').hide();
    $('#rename_worker .asicpassword').val('admin');
    $('#rename_worker .asicuser').val('root');
    $('#rename_worker #popup_system_asic').hide();
    $('#rename_worker #popup_system_gpu').hide();
    $('#rename_worker #popup_type option').prop('selected', false);
    $('#rename_worker #popup_type option').removeAttr('selected');
    $('#rename_worker #popup_system_asic option').prop('selected', false);
    $('#rename_worker #popup_system_asic option').removeAttr('selected');
    $('#rename_worker #popup_system_gpu option').prop('selected', false);
    $('#rename_worker #popup_system_gpu option').removeAttr('selected');
    $('#rename_worker #groups .tag').remove();
    var workersArray = $.parseJSON(workers);
    var counterOfWorkers = 0;
    $.each(workersArray, function (key, worker) {
        counterOfWorkers++;
        if (worker.workersName == wn) {
            var groupsList = (worker.workersGroups).split(';');
            $.each(groupsList, function (gi, gn) {
                if (gn != '') {
                    $('#popup_tag').before('<div class="tag" data-value="' + gn + '">' + gn + ' <div class="icon close"></div></div>');
                }
            });
            if (worker.workersType == 'asic') {
                $('#rename_worker .asic').show();
                $('#rename_worker #popup_system_asic').show();
                $('#popup_type option[value="asic"]').prop('selected', true);
                $('#popup_type option[value="asic"]').attr("selected", "selected");
                $('#popup_system_asic option[value="' + worker.workersSystem + '"]').prop('selected', true);
                $('#popup_system_asic option[value="' + worker.workersSystem + '"]').attr("selected", "selected");
                var wlist = sessionStorage.getItem(workerToken.toLowerCase() + ".workersList");
                var wtemp = $.parseJSON(wlist);
                $.each(wtemp, function (w, d) {
                    if (w == wn) {
                        $('#rename_worker .asic .asicip').val(d.info.os.localip);
                        $('#rename_worker .asic .asicuser').val(d.info.auth.user);
                        $('#rename_worker .asic .asicpassword').val(d.info.auth.pass);
                        return;
                    }
                });
            } else {
                if (worker.workersType == 'amd') {
                    $('#popup_type option[value="amd"]').prop('selected', true);
                    $('#popup_type option[value="amd"]').attr("selected", "selected");
                }
                if (worker.workersType == 'nvidia') {
                    $('#popup_type option[value="nvidia"]').prop('selected', true);
                    $('#popup_type option[value="nvidia"]').attr("selected", "selected");
                }
                if (worker.workersSystem == 'msos' || worker.workersSystem == 'linux') {
                    $('#popup_system_gpu option[value="msos"]').prop('selected', true);
                    $('#popup_system_gpu option[value="msos"]').attr("selected", "selected");
                }
                if (worker.workersSystem == 'windows') {
                    $('#popup_system_gpu option[value="windows"]').prop('selected', true);
                    $('#popup_system_gpu option[value="windows"]').attr("selected", "selected");
                }
                $('#rename_worker #popup_system_gpu').show();
            }
            return;
        }
    });
    var nonce = $('#nonce').val();
    var scrollTop = $(window).scrollTop() + 20;
    $('#rename_worker').css('top', scrollTop + 'px');
    $('.popupbackground').fadeToggle();
    $('#rename_worker').fadeToggle('fast');
    $('#rename_worker > .text > .row > .chars_left').html((15 - wn.length) + ' ' + _('chars left'));
    $('#rename_worker > .text > .row > .wn').val(wn);
    $('#rename_worker .green').attr('data-wn', wn);
    $('#rename_worker .green').attr('data-wn-id', wnId);
}

function deleteWorker(wn,wnId) {
    $('#worker_delete .title').html(_mx('Delete') + ' ' + wn + '?');
    $('#worker_delete .gray').text(_mx('No, keep it'));
    $('#worker_delete .red').text(_mx('Yes, delete it'));
    $('.popupbackground').fadeToggle();
    $('#worker_delete').fadeToggle('fast');
    $('#worker_delete .red').attr('data-wn', wn);
    $('#worker_delete .red').attr('data-wn-id', wnId);
}

$('#worker_delete .red').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_delete .outlined_button, #worker_delete .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {workerDelete: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            var workersCountTotal = 0;
            $("#workersList > [data-name]").each(function () {
                if (!($(this).css('display') == 'none' || $(this).css("visibility") == "hidden")) {
                    workersCountTotal++;
                }
            });
            workersCountTotal = workersCountTotal - (1 + (workerName.match(/,/g) || []).length);
            if (workersCountTotal < 1) {
                location.reload();
                return;
            }
            $('.subscription_plan .row p b:first').html(workersCountTotal);
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_delete').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_delete .outlined_button, #worker_delete .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
            var workersArray = workerName.split(',');
            for (var i = 0; i < workersArray.length; i++) {
                $('tr[data-worker="' + workersArray[i].toLowerCase() + '"]').fadeOut('fast');
            }
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_delete .outlined_button, #worker_delete .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_delete .outlined_button, #worker_delete .red').removeClass('disabled');
        }, 4500);
    });
});

function restartSoftware(wn,wnId) {
    $('#software_restart .title').html(_mx('Restart') + ' ' + wn + '?');
    $('#software_restart .gray').text(_mx('No, keep it'));
    $('#software_restart .blue').text(_mx('Yes, restart it'));
    $('.popupbackground').fadeToggle();
    $('#software_restart').fadeToggle('fast');
    $('#software_restart .blue').attr('data-wn', wn);
    $('#software_restart .blue').attr('data-wn-id', wnId);
}

$('#software_restart .blue').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#software_restart .outlined_button, #software_restart .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {restartSoftware: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_restart').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
        }, 4500);
    });
});

function openSwitch(thisEl) {
    if ($(thisEl).hasClass('disabled') == false) {
        if ($(thisEl).parent().children('.switch_menu').is(':visible')) {
            $('.switch_menu').hide();
            $(thisEl).parent().children('.switch_menu').fadeOut('fast');
            refreshStop = 0;
        } else {
            $('.switch_menu').hide();
            $(thisEl).parent().children('.switch_menu').fadeIn('fast');
            refreshStop = 1;
        }
    }
}

function rebootMachine(wn,wnId) {
    $('#hardware_reboot .title').html(_mx2('Reboot') + ' ' + wn + '?');
    $('#hardware_reboot .gray').text(_mx('No, keep it'));
    $('#hardware_reboot .blue').text(_mx2('Yes, reboot it'));
    $('.popupbackground').fadeToggle();
    $('#hardware_reboot').fadeToggle('fast');
    $('#hardware_reboot .blue').attr('data-wn', wn);
    $('#hardware_reboot .blue').attr('data-wn-id', wnId);
}

$('#hardware_reboot .blue').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#hardware_reboot .outlined_button, #hardware_reboot .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {rebootMachine: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#hardware_reboot').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#hardware_reboot .outlined_button, #hardware_reboot .blue').removeClass('disabled');
        }, 4500);
    });
});
$('#workerName').on('keyup', function (event) {
    var str = $(this).val();
    str = str.replace(/[^A-Za-z-0-9_-]/g, "").substring(0, 15);
    if ($(this).val() != str) {
        $(this).val(str);
    }
    var chars = (15 - $(this).val().length) + ' ' + _('chars left');
    $('.chars_left').html(chars);
});
$('#rename_worker .wn').on('keyup', function (event) {
    var str = $(this).val();
    str = str.replace(/[^A-Za-z-0-9_-]/g, "").substring(0, 15);
    if ($(this).val() != str) {
        $(this).val(str);
    }
    var chars = (15 - $(this).val().length) + ' ' + _('chars left');
    $('#rename_worker .chars_left').html(chars);
});

function cpuMining(workerName) {
    var nonce = $('#nonce').val();
    var $worker = $('tr[data-worker="' + workerName.toLowerCase() + '"]');
    if ($worker.find('.cpumining .bullet').hasClass('selected')) {
        var statusCPU = 0;
    } else {
        var statusCPU = 1;
    }
    $.post('/workers', {'cpuMining': workerName, 'status': statusCPU, 'nonce': nonce}, function (response) {
        if (response == '1') {
            if (statusCPU == 0) {
                $worker.find('.cpumining .bullet').removeClass('selected');
                $worker.find('.cpumining .toggle').attr('data-tooltip', _('CPU mining disabled'));
            } else {
                $worker.find('.cpumining .bullet').addClass('selected');
                $worker.find('.cpumining .toggle').attr('data-tooltip', _('CPU mining enabled'));
            }
        }
    });
}

function profitSwitch(workerName) {
    var nonce = $('#nonce').val();
    var $worker = $('tr[data-worker="' + workerName.toLowerCase() + '"]');
    if ($worker.find('.profitswitch .bullet').hasClass('selected')) {
        var statusProfitSwitch = 0;
    } else {
        var statusProfitSwitch = 1;
    }
    $.post('/workers', {'profitSwitch': workerName, 'status': statusProfitSwitch, 'nonce': nonce}, function (response) {
        if (statusProfitSwitch == '0') {
            $worker.find('.profitswitch .bullet').removeClass('selected');
            $worker.find('.profitswitch').attr('data-tooltip', _('Profit switch disabled'));
        } else {
            $worker.find('.profitswitch .bullet').addClass('selected');
            $worker.find('.profitswitch').attr('data-tooltip', _('Profit switch enabled'));
        }
    });
}

$('#worker_shutdown .red').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_shutdown .outlined_button, #worker_shutdown .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {workerShutdownSafe: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_shutdown').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_shutdown .outlined_button, #worker_shutdown .red').removeClass('disabled');
        }, 4500);
    });
});
$('#worker_power_cycle .red').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {workerPowerCycle: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#worker_power_cycle').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#worker_power_cycle .outlined_button, #worker_power_cycle .red').removeClass('disabled');
        }, 4500);
    });
});
$('#software_update .blue').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#software_update .outlined_button, #software_update .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {update: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_update').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_update .outlined_button, #software_update .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_update .outlined_button, #software_update .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_update .outlined_button, #software_update .blue').removeClass('disabled');
        }, 4500);
    });
});
$('#software_start .blue').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#software_start .outlined_button, #software_start .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {startMining: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_start').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_start .outlined_button, #software_start .blue').removeClass('disabled');
        }, 4500);
    });
});
$('#software_stop .blue').on('click', function () {
    if ($(this).attr('data-wn') == '' || $(this).hasClass('disabled')) {
        return false;
    }
    $('#software_stop .outlined_button, #software_stop .blue').addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = $(this).attr('data-wn');
    var workerNameId = $(this).attr('data-wn-id');
    var nonce = $('#nonce').val();
    $.post(window.location.href, {stopMining: workerNameId, nonce: nonce}, function (response) {
        if (response == '1') {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#software_stop').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#software_stop .outlined_button, #software_stop .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 100);
            }, 1200);
            deselectAll();
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $('#software_stop .outlined_button, #software_stop .blue').removeClass('\'s notes');
            $('.message_err').show();
        }
        setTimeout(function () {
            $('#software_stop .outlined_button, #software_stop .blue').removeClass('disabled');
        }, 4500);
    });
});
$('#search_templates').keyup(function () {
    var searchQuery = $(this).val();
    var countResults = 0;
    $('#actions_submenu_switch .frame .empty').remove();
    if (searchQuery == '') {
        $('#actions_submenu_switch .frame .row').show();
        if (ps_bulk_switch != null) {
            ps_bulk_switch.update();
        }
    } else {
        searchQuery = searchQuery.toLowerCase();
        $('#actions_submenu_switch .frame .row').each(function () {
            var profileStr = $(this).text();
            if (profileStr != '') {
                profileStr = profileStr.toLowerCase();
                profileStr = profileStr.replace('<small>', '----');
                profileStr = profileStr.replace('</small>', '');
                if (profileStr.indexOf(searchQuery) != -1) {
                    $(this).show();
                    countResults++;
                } else {
                    $(this).hide();
                }
            }
        });
        if (countResults == 0) {
            $('#actions_submenu_switch .frame').append('<div class="empty">' + _('No results') + '</div>');
        }
        if (ps_bulk_switch != null) {
            ps_bulk_switch.update();
        }
    }
});

function openSubmenu(type) {
    if (type == 'switch') {
        $('#actions_submenu_command').hide();
        $('#actions_submenu_relocate').hide();
        $('#actions_submenu_switch').toggle();
        ps_bulk_switch.update();
        $('#search_templates').focus();
    }
    if (type == 'command') {
        $('#actions_submenu_switch').hide();
        $('#actions_submenu_relocate').hide();
        $('#actions_submenu_command').toggle();
    }
    if (type == 'relocate') {
        $('#actions_submenu_switch').hide();
        $('#actions_submenu_command').hide();
        $('#actions_submenu_relocate').toggle();
    }
}

$(document).mousedown(function (e) {
    if (!$("#actions_submenu_switch").is(e.target) && $("#actions_submenu_switch").has(e.target).length === 0 && !$(".submenu_row").is(e.target)) {
        $("#actions_submenu_switch").hide();
    }
});
$(document).mousedown(function (e) {
    if (!$("#actions_submenu_command").is(e.target) && $("#actions_submenu_command").has(e.target).length === 0 && !$(".submenu_row").is(e.target)) {
        $("#actions_submenu_command").hide();
    }
});
$(document).mousedown(function (e) {
    if (!$("#actions_submenu_relocate").is(e.target) && $("#actions_submenu_relocate").has(e.target).length === 0 && !$(".submenu_row").is(e.target)) {
        $("#actions_submenu_relocate").hide();
    }
});

function massAction(type) {
    if (checkedNum > 0) {
        $('#actions_menu').hide();
        var workersInAction = '';
        let myWorkersInfo=''
        $.each(selectedWorkers, function (wName, value) {
            workersInAction = workersInAction + ',' + value;
        });
        workersInAction = workersInAction.substr(1);
        if (type == 'delete') {
            $('#worker_delete .title').html(_('Delete') + ' ' + checkedNum + ' ' + _('workers') + '?');
            if (checkedNum > 1) {
                $('#worker_delete .gray').text(_('No, keep them'));
                $('#worker_delete .red').text(_('Yes, delete them'));
            }
            $('.popupbackground').fadeToggle();
            $('#worker_delete').fadeToggle('fast');
            $('#worker_delete .red').attr('data-wn-id', workersInAction);
        }
        if (type == 'shutdown') {
            $('#worker_shutdown .title').html(_mx2('Shut down') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#worker_shutdown .gray').text(_mx2('No, keep them'));
                $('#worker_shutdown .red').text(_mx2('Yes, shut them down'));
            }
            $('.popupbackground').fadeToggle();
            $('#worker_shutdown').fadeToggle('fast');
            $('#worker_shutdown .red').attr('data-wn-id', workersInAction);
        }
        if (type == 'powercycle') {
            $('#worker_power_cycle .title').html(_mx3('Power cycle') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#worker_power_cycle .gray').text(_mx2('No, keep them'));
                $('#worker_power_cycle .red').text(_mx2('Yes, power cycle'));
            }
            $('.popupbackground').fadeToggle();
            $('#worker_power_cycle').fadeToggle('fast');
            $('#worker_power_cycle .red').attr('data-wn-id', workersInAction);
        }
        if (type == 'reboot') {
            $('#hardware_reboot .title').html(_mx2('Reboot') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#hardware_reboot .gray').text(_mx2('No, keep them'));
                $('#hardware_reboot .blue').text(_mx2('Yes, reboot them'));
            }
            $('.popupbackground').fadeToggle();
            $('#hardware_reboot').fadeToggle('fast');
            $('#hardware_reboot .blue').attr('data-wn-id', workersInAction);
        }
        if (type == 'restart') {
            $('#software_restart .title').html(_mx('Restart') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#software_restart .gray').text(_mx2('No, keep them'));
                $('#software_restart .blue').text(_mx2('Yes, restart them'));
            }
            $('.popupbackground').fadeToggle();
            $('#software_restart').fadeToggle('fast');
            $('#software_restart .blue').attr('data-wn-id', workersInAction);
        }
        if (type == 'stop') {
            $('#software_stop .title').html(_mx('Stop') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#software_stop .gray').text(_mx2('No, keep them'));
                $('#software_stop .blue').text(_mx2('Yes, stop them'));
            }
            $('.popupbackground').fadeToggle();
            $('#software_stop').fadeToggle('fast');
            $('#software_stop .blue').attr('data-wn-id', workersInAction);
        }
        if (type == 'start') {
            $('#software_start .title').html(_mx('Start') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#software_start .gray').text(_mx2('No, keep them'));
                $('#software_start .blue').text(_mx2('Yes, start them'));
            }
            $('.popupbackground').fadeToggle();
            $('#software_start').fadeToggle('fast');
            $('#software_start .blue').attr('data-wn-id', workersInAction);
        }
        if (type == 'update') {
            $('#software_update .title').html(_mx('Update') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            if (checkedNum > 1) {
                $('#software_update .gray').text(_mx2('No, keep them'));
                $('#software_update .blue').text(_mx2('Yes, update them'));
            }
            $('.popupbackground').fadeToggle();
            $('#software_update').fadeToggle('fast');
            $('#software_update .blue').attr('data-wn-id', workersInAction);
        }
        if(type=='startUsing'){
            $('#startUsingWin .title').html(_mx('start using')+' '+checkedNum+' '+ _mx3('workers') + '?')
            $('.popupbackground').fadeToggle();
            $('#startUsingWin').fadeToggle('fast');
            $('#startUsingWin .blue').attr('data-wn-id', workersInAction);
        }
        if(type=='forbidden'){
            $('#forbiddenWin .title').html(_mx('forbidden')+' '+checkedNum+' '+ _mx3('workers') + '?')
            $('.popupbackground').fadeToggle();
            $('#forbiddenWin').fadeToggle('fast');
            $('#forbiddenWin .red').attr('data-wn-id', workersInAction);
        }
        if(type=='wakeUp'){
            $('#RouseMachineWin .title').html(_mx('Rouse Machine') + ' ' + checkedNum + ' ' + _mx3('workers') + '?');
            $('.popupbackground').fadeToggle();
            $('#RouseMachineWin').fadeToggle('fast');
            $('#RouseMachineWin .blue').attr('data-wn-id', workersInAction);
        }
        if (type == 'command') {
            if (workersInAction != '') {
                var workerName = workersInAction;
                var nonce = $('#nonce').val();
                var selectedCommand = $('#command').val();
                $.post(window.location.href, {
                    commandTo: workerName,
                    'command': selectedCommand,
                    nonce: nonce
                }, function (response) {
                    if (response == '1') {
                        $('.circle-loader').addClass('load-complete');
                        $('.notification_row').addClass('finished');
                        $('.checkmark').show();
                        $('.message_suc').show();
                        deselectAll();
                    } else {
                        $('.circle-loader').hide();
                        $('.notification_row').addClass('finished');
                        $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
                        $('.message_err').show();
                    }
                });
            }
        }
        if (type == 'switch') {
            if (workersInAction != '') {
                var workerName = workersInAction;
                var nonce = $('#nonce').val();
                var selectedTemplate = '';
                if (typeof $('#actions_submenu_switch').find('.selected').data('template') != 'undefined') {
                    selectedTemplate = $('#actions_submenu_switch').find('.selected').data('template');
                }
                var subProfitSwitch = $('#actions_submenu_switch #submenu_profitswitch option:selected').val();
                var subCpu = $('#actions_submenu_switch #submenu_cpu option:selected').val();
                $.post(window.location.href, {
                    switchTo: workerName,
                    switchTemplate: selectedTemplate,
                    switchProfit: subProfitSwitch,
                    switchCpu: subCpu,
                    nonce: nonce
                }, function (response) {
                    if (response == '1') {
                        $('.circle-loader').addClass('load-complete');
                        $('.notification_row').addClass('finished');
                        $('.checkmark').show();
                        $('.message_suc').show();
                        deselectAll();
                    } else {
                        $('.circle-loader').hide();
                        $('.notification_row').addClass('finished');
                        $('#software_restart .outlined_button, #software_restart .blue').removeClass('disabled');
                        $('.message_err').show();
                    }
                });
            }
        }
        if (type == 'relocate') {
            if (workersInAction != '') {
                var workerName = workersInAction;
                var nonce = $('#nonce').val();
                var userRelocate = $('#submenu_relocate option:selected').val();
                $.post(window.location.href, {
                    workerRelocate: workerName,
                    userRelocate: userRelocate,
                    nonce: nonce
                }, function (response) {
                    if (response == '1') {
                        $.each(selectedWorkers, function (wName, value) {
                            $('#workersList > tr[data-name="' + value + '"]').remove();
                        });
                        $('.circle-loader').addClass('load-complete');
                        $('.notification_row').addClass('finished');
                        $('.checkmark').show();
                        $('.message_suc').show();
                        deselectAll();
                    } else {
                        $('.circle-loader').hide();
                        $('.notification_row').addClass('finished');
                        $('.message_err').show();
                    }
                });
            }
        }
        if (type == 'export') {
            if (workersInAction != '') {
                var workerName = workersInAction;
                var nonce = $('#nonce').val();
                $.post(window.location.href, {workerExport: workerName, nonce: nonce}, function (response) {
                    if (response != '0') {
                        var blob = new Blob([response], {type: 'application/octet-stream'});
                        var today = new Date();
                        var dd = String(today.getDate()).padStart(2, '0');
                        var mm = String(today.getMonth() + 1).padStart(2, '0');
                        var yyyy = today.getFullYear();
                        today = yyyy + '-' + mm + '-' + dd;
                        saveAs(blob, "workers-export-" + today + ".ms");
                    }
                });
            }
        }
        if (type == 'edit') {
            var nonce = $('#nonce').val();
            localStorage.setItem('myWorkes',workersInAction)
            localStorage.setItem('myType','worker')
            window.location.href="/config#mx"
            // $.post('/config', {massEdit: workersInAction, nonce: nonce}, function (response) {
            //     if (response == '1') {
            //         preloaderShow();
            //         window.location.replace("/config");
            //         return false;
            //     }
            // });
        }
    }
}

$('#actions_submenu_switch .frame .row').click(function () {
    $('#actions_submenu_switch .frame .row').removeClass('selected');
    $(this).addClass('selected');
});
var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = decodeURIComponent(window.location.search.substring(1)), sURLVariables = sPageURL.split('&'),
        sParameterName, i;
    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : sParameterName[1];
        }
    }
};
$('.filter_el').click(function () {
    $('.filter_popup').toggle();
    groupsFrame.update();
    coinsFrame.update();
    // clientsFrame.update();
});
$('.filter_popup').on('change', 'input', function () {
    search_page = 1;
    window.location.hash = 1;
    // tag = $(this).data('filter').toString().toLowerCase();
    tag = $(this).data('filter').toString();
    let serx = $(this).data('search')!==undefined? $(this).data('search').toString():tag;
    var allTags = $('.search_result').html();
    let terx = $(this).attr('data-xxx-g')
    if (this.checked == false) {
        allTags = allTags.replace('<div class="result" data-xxx-g="'+terx+'" data-ixx="'+serx+'">' + tag + ' <div class="icon close"></div></div>', '');
        tag = '';
    } else {
        if (allTags.indexOf('<div class="result" data-xxx-g="'+terx+'" data-ixx="'+serx+'">' + tag + ' <div class="icon close"></div></div>') == -1) {
            allTags = allTags + '<div class="result" data-xxx-g="'+terx+'" data-ixx="'+serx+'">' + tag + ' <div class="icon close"></div></div>';
        }
    }

    $('.search_result').html(allTags);

    $('.search_result > .result').each(function () {
        if (tag != '') {
            tag =_mxE(tag) + ':' + _mxE($(this).text().trim());
        } else {
            tag = _mxE($(this).text().trim())
        }
    });
    $('#checked_rows').hide();
    $('th').removeClass('hidden');
    $('#actions_menu').hide();
    $('table .checkbox').removeClass('selected');
    checkedNum = 0;
    selectedWorkers = [];
    var d = new Date;
    d.setTime(d.getTime() + 7 * 24 * 60 * 60 * 1000);
    selectSearchConditionPage()
    // document.cookie = "workersFilter=" + _mxFi(tag)+ ";path=/;expires=" + d.toGMTString();
    // workersPage(page, search, tag, sort);
});
$(document).mousedown(function (e) {
    if (!$(".filter_popup").is(e.target) && $(".filter_popup").has(e.target).length === 0 && !$(".filter_el").is(e.target) && !$(".icon.filter").is(e.target)) {
        $(".filter_popup").hide();
    }
    if (!$(".icons_list_hamburger").is(e.target) && !$(".icon_box").is(e.target) && !$(".icon_box .icon").is(e.target) && !$(".switch_menu").find(e.target)) {
        $(".icons_list").addClass('hide');
        $(".switch_menu").hide();
        refreshStop = 0;
    }
});

function deselectAll() {
    $('#checked_rows').hide();
    $('th').removeClass('hidden');
    $('#actions_menu').hide();
    $('table .checkbox').removeClass('selected');
    checkedNum = 0;
    $('#count').html(0);
    selectedWorkers = [];
}

$('.view_el').on("click", function () {
    $('.loader_frame').addClass('display');
    if (viewMode == 0) {
        $('.view_el .icon').removeClass('view_compact');
        $('.view_el .icon').addClass('view_extended');
        $('.view_el').attr("data-tooltip", _mx('Change to compact view'));
        $('.view_el').attr("lang-data-ti", 'Change to compact view');
        viewMode = 1;
    } else {
        $('.view_el .icon').removeClass('view_extended');
        $('.view_el .icon').addClass('view_compact');
        $('.view_el').attr("data-tooltip", _mx('Change to extended view'));
        $('.view_el').attr("lang-data-ti", 'Change to extended view');
        viewMode = 0;
    }
    var d = new Date();
    d.setTime(d.getTime() + 3600 * 1000 * 24 * 7);
    var expires = "expires=" + d.toUTCString();
    document.cookie = "msWorkersView=" + viewMode + ";" + expires + ";path=/";
    setTimeout(function () {
        workersRefresh(true);
    }, 500);
});

function flarePing(url) {
    return new Promise(function (resolve, reject) {
        var xhr = new XMLHttpRequest();
        xhr.open("GET", "/" + url.replace(/\./g, '-') + ".lanflare.com:8008?discover=1");
        xhr.send()
        const timer = setTimeout(function () {
            done();
            xhr.abort();
        }, 1000);

        function done() {
            clearTimeout(timer);
            xhr.removeEventListener('error', error);
        }

        function error(e) {
            reject(e);
            done();
        }

        xhr.addEventListener('load', function () {
            resolve(xhr.response + '|' + url);
            done();
        });
        xhr.addEventListener('error', error);
    });
}

function flareUp(flare) {
    var nonce = $('#nonce').val();
    if (!$('.discover_workers_menu').find("[data-flare='" + flare + "']").find('.button').hasClass('finished')) {
        $('.discover_workers_menu').find("[data-flare='" + flare + "']").find('.button').addClass('waiting').html('<div class="bullet_1"></div><div class="bullet_2"></div><div class="bullet_3"></div>');
        $.post(window.location.href, {flareUp: flare, nonce: nonce}, function (response) {
            setTimeout(function () {
                if (response == '0') {
                    $('.discover_workers_menu').find("[data-flare='" + flare + "']").find('.button').removeClass('waiting').addClass('failed').html(_('Failed'));
                } else if (response == '1') {
                    $('.discover_workers_menu #start, .discover_workers_menu #error, .discover_workers_menu #finish').hide();
                    $('.discover_workers_menu #limit').show();
                } else {
                    var xhr2 = new XMLHttpRequest();
                    xhr2.open("GET", response);
                    xhr2.send();
                    $('.discover_workers_menu').find("[data-flare='" + flare + "']").find('.button').removeClass('waiting').addClass('finished').html(_('Added'));
                    workersRefresh(false);
                }
            }, 1000);
        });
    }
}

function flareScan() {
    var flareCount = 0;
    $('.discover_workers_menu #start, .discover_workers_menu #error, .discover_workers_menu #finish').hide();
    $('.discover_workers_menu .frame').html('');
    $('.discover_workers_menu #load').show();
    var nonce = $('#nonce').val();
    $.post(window.location.href, {flareCheck: '1', nonce: nonce}, function (response) {
        if (response == '0') {
            $('.discover_workers_menu #start, .discover_workers_menu #load, .discover_workers_menu #finish').hide();
            $('.discover_workers_menu #error').show();
        } else {
            flareNet = response.split(";");

            function flareLoop() {
                if ((flareCount + 1) % 5 === 0) {
                    timer = 1000;
                } else {
                    timer = 100;
                }
                setTimeout(function () {
                    flarePing(flareNet[flareCount]).then(function (reply) {
                        $('.discover_workers_menu #start, .discover_workers_menu #error, .discover_workers_menu #load').hide();
                        $('.discover_workers_menu #finish').show();
                        locdat = reply.split("|");
                        locdat[0] = reply.split("-")[0];
                        foundWorker = '<div class="row" data-flare="' + reply + '"><div class="element"><div class="tags"><div class="tag">' + locdat[0] + '</div><div class="tag tag_ip">' + locdat[1] + '</div></div></div><div class="element"><div class="button green" onclick="flareUp(\'' + reply + '\');">Add</div></div></div>';
                        $('.discover_workers_menu .frame').append(foundWorker);
                        ps_discovery.update();
                    });
                    flareCount++;
                    if (flareCount < flareNet.length) {
                        flareLoop();
                    } else {
                        setTimeout(function () {
                            if ($('.discover_workers_menu .frame').html() == '') {
                                $('.discover_workers_menu #load, .discover_workers_menu #error, .discover_workers_menu #finish').hide();
                                $('.discover_workers_menu #error').show();
                            }
                        }, 3000);
                    }
                }, timer);
            }

            flareLoop();
        }
    });
}

function getFilterTag() {
    var tagFromCookie = '';
    var tagCookie = (document.cookie).split(';');
    $.each(tagCookie, function (tci, tcv) {
        if (tcv.indexOf('workersFilter') != -1) {
            tagFromCookie = tcv.split('=')[1];
        }
    });
    if (tagFromCookie != '') {
        var tagFromCookieArray = tagFromCookie.split(':');
        var tagFromCookieStr = '';
        var tagFromCookieJson = {};
        $.each(tagFromCookieArray, function (tci, tcv) {
            if (typeof tagFromCookieJson[tcv] == 'undefined' || tagFromCookieJson[tcv] == null) {
                tagFromCookieJson[tcv] = 1;
                tagFromCookieStr += '<div class="result">' + tcv + ' <div class="icon close"></div></div>';
            }
        });
        $('.search_result').html(tagFromCookieStr);
    }
    return tagFromCookie;
}

var newWorkerType = '';
var newWorkerSystem = '';
var newWorkerASICIP = '';
var newWorkerASICUsername = '';
var newWorkerASICPassword = '';
var newWorkerName = '';

function newWorkerSelectType(workerType, thisEl) {
    $('.add_new_worker_step .message.red').hide();
    newWorkerType = workerType;
    $('.amd_element').removeClass('selected');
    $('.nvidia_element').removeClass('selected');
    $('.asic_element').removeClass('selected');
    $(thisEl).addClass('selected');
    $('#continueToSystem').removeClass('disabled');
}

function newWorkerSelectSystem(workerSystem, thisEl) {
    $('.add_new_worker_step .message.red').hide();
    newWorkerSystem = workerSystem;
    $('.msos_element').removeClass('selected');
    $('.windows_element').removeClass('selected');
    $(thisEl).addClass('selected');
    $('#continueToName').removeClass('disabled');
}

$('#new_worker_system_asic > .row > #ip').keyup(function () {
    $('#continueToName').removeClass('disabled');
});

function newWorkerContinue(step, thisEl) {
    $('.add_new_worker_step .message.red').hide();
    if (!$(thisEl).hasClass('disabled')) {
        $('.add_new_worker_step').hide();
        $('#new_worker_' + step).show();
        if (step == 'system') {
            $('.steps .step_2').addClass('selected');
            if (newWorkerType == 'asic') {
                $('#new_worker_system_gpu').hide();
                $('#new_worker_system_asic').show();
            } else {
                $('#new_worker_system_asic').hide();
                $('#new_worker_system_gpu').show();
            }
        }
        if (step == 'name') {
            if (newWorkerType == 'asic') {
                newWorkerSystem = $('#new_worker_system_asic > .row > #system_asic').val();
                newWorkerASICIP = $('#new_worker_system_asic > .row > #ip').val();
                newWorkerASICUsername = $('#new_worker_system_asic > .row > #sshuser').val();
                newWorkerASICPassword = $('#new_worker_system_asic > .row > #sshpass').val();
            }
            $('.steps .step_3').addClass('selected');
        }
    } else {
        $('.add_new_worker_step .message.red').show();
    }
}

function newWorkerBack(step, thisEl) {
    if ($(thisEl).hasClass('selected')) {
        $('.add_new_worker_step').hide();
        $('#new_worker_' + step).show();
        if (step == 'system') {
            $('.msos_element').removeClass('selected');
            $('.windows_element').removeClass('selected');
            $('.steps .step_3').removeClass('selected');
            $('#continueToName').addClass('disabled');
            newWorkerSystem = '';
            newWorkerName = '';
        }
        if (step == 'type') {
            $('.amd_element').removeClass('selected');
            $('.nvidia_element').removeClass('selected');
            $('.asic_element').removeClass('selected');
            $('.msos_element').removeClass('selected');
            $('.windows_element').removeClass('selected');
            $('.steps .step_3').removeClass('selected');
            $('.steps .step_2').removeClass('selected');
            $('#continueToSystem').addClass('disabled');
            $('#continueToName').addClass('disabled');
            newWorkerType = '';
            newWorkerSystem = '';
            newWorkerName = '';
        }
    }
}

$('#button_addfirstworker').on('click', function () {
    newWorkerName = $('#new_worker_name .row #workerName').val();
    var $this = $(this);
    if ($this.hasClass('disabled')) {
        return false;
    }
    $this.addClass('disabled');
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    var workerName = newWorkerName;
    var type = newWorkerType;
    if (type == 'asic') {
        var system = newWorkerSystem;
        var asicIp = newWorkerASICIP;
        var asicSSHuser = newWorkerASICUsername;
        var asicSSHpass = newWorkerASICPassword;
    } else {
        var system = newWorkerSystem;
        var asicIp = '';
        var asicSSHuser = '';
        var asicSSHpass = '';
    }
    var tags = '';
    var nonce = $('#nonce').val();
    var data = '';
    $.post(window.location.href, {
        workerName: workerName,
        sshuser: asicSSHuser,
        sshpass: asicSSHpass,
        asicIp: asicIp,
        type: type,
        system: system,
        groups: tags,
        nonce: nonce
    }, function (response) {
        data = response;
        if (data == '1') {
            var d = new Date();
            d.setTime(d.getTime() + 24 * 60 * 60 * 1000 * 365);
            var expires = "expires=" + d.toLocaleTimeString();
            document.cookie = "cmode=automaticConfig;" + expires + ";path=/";
            window.location.replace("/worker/" + workerName);
        } else {
            $('.circle-loader').hide();
            $('.notification_row').addClass('finished');
            $this.removeClass('disabled');
            $('.message_err').html(data).show();
        }
    });
});

function linkConfig(id) {
    localStorage.setItem('myWorkes',id)
    window.location.href='/config#mx'
    localStorage.setItem('myType','worker')
}
window.onload=function () {
    $.ajax({
        url:'/QUERY?STANDARD',
        type:'get',
        async:false,
        success:function (res) {
            currencyValue=res.STANDARD.currencyValue
            currency=res.STANDARD.currency
        }
    })

    if(localStorage.getItem('TageList')!=undefined && localStorage.getItem('TageList').length>0){
        setTageSite()
    }
}

function toWorkerInfo(id) {
    window.location.href='/worker#'+id
    let listSearch=$('.search_result .result')
    let x=[]
    $.each(listSearch,function (i,it) {
        let obj={
            name:$(it).attr('data-ixx').replace(/\s*/g,"").toLowerCase(),
            type:$(it).attr('data-xxx-g')
        }
        x.push(obj)
    })
    if(listSearch.length>0){
        localStorage.setItem('TageList',$('.search_result').html())
        localStorage.setItem('TageText',JSON.stringify(x))
        localStorage.setItem('pageItem',search_page)
    }
}

//信息页面跳转自动筛选tag
function setTageSite() {
    $('#checked_rows').hide();
    $('th').removeClass('hidden');
    $('#actions_menu').hide();
    $('table .checkbox').removeClass('selected');
    checkedNum = 0;
    selectedWorkers = [];
    $('.search_result').html(localStorage.getItem('TageList'))
    let m=JSON.parse(localStorage.getItem('TageText'))

    search_page=localStorage.getItem('pageItem')
    localStorage.removeItem('TageText')
    localStorage.removeItem('pageItem')
    localStorage.removeItem('TageList')
    $.each(m,function (i,it) {
        if(it.type=='Groups'||m.type=='Coins'){
            $('.filter_popup').find("#filter_group_"+it.name+"").prop("checked", true);
        }else {
            $('.filter_popup').find("#filter_"+it.name+"").prop("checked", true);
        }
    })
    selectSearchConditionPage()

}

$('#startUsingWin .blue').on('click',function () {
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();

    $.ajax({
        url:'/workers',
        type:'post',
        data:{
            Enable:1,
            worker:$('#startUsingWin .blue').attr('data-wn-id')
        },
        success:function () {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#startUsingWin').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#startUsingWin .outlined_button, #startUsingWin .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
                window.location.reload()
            }, 3000);
        }
    })
})

$('#forbiddenWin .red').on('click',function () {
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    $.ajax({
        url:'/workers',
        type:'post',
        data:{
            Enable:0,
            worker:$('#forbiddenWin .red').attr('data-wn-id')
        },
        success:function () {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#forbiddenWin').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#forbiddenWin .outlined_button, #forbiddenWin .red').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
                window.location.reload()
            }, 3000);
        }
    })
})
$('#RouseMachineWin .blue').on('click',function () {
    $('.checkmark').hide();
    $('.circle-loader').removeClass('load-complete');
    $('.circle-loader, .message_err, .message_suc').hide();
    $('.circle-loader').show();
    $.ajax({
        url:'/workers',
        type:'post',
        data:{
            wakeUp:$('#RouseMachineWin .blue').attr('data-wn-id')
        },
        success:function (res) {
            $('.circle-loader').addClass('load-complete');
            $('.notification_row').addClass('finished');
            $('.checkmark').show();
            $('.message_suc').show();
            setTimeout(function () {
                $('#RouseMachineWin').fadeOut('fast');
                $('.popupbackground').fadeOut('fast');
                setTimeout(function () {
                    $('#RouseMachineWin .outlined_button, #RouseMachineWin .blue').removeClass('disabled');
                    $('.checkmark').hide();
                    $('.circle-loader').removeClass('load-complete');
                    $('.circle-loader, .message_err, .message_suc').hide();
                }, 500);
                window.location.reload()
            }, 3000);
        }
    })
})

//设置卡片数据
function setCardData(data) {
    let str=''
    //矿工信息载入
    let w_online=data.data.workers_online
    let w_all=data.data.workers
    let w_offline=data.data.workers-data.data.workers_online
    // $('#workers_card_info .jdx').attr('style','width:'+Math.fround(w_online/w_all)*100+'%')
    // $('#workers_card_info .info_tx .txt_number_1').html(w_all)
    // $('#workers_card_info .info_tx .error_text').html(w_offline)
    str+='<div class="card" id="workers_card_info">\n' +
        '    <div class="jdt"  style="opacity: 1">\n' +
        '        <div class="jdx" style="width: '+Math.fround(w_online/w_all)*100+'%"></div>\n' +
        '    </div>\n' +
        '    <div class="info_tx">\n' +
        '        <div class="txt_number_1">'+w_all+'</div>\n' +
        '        <small></small>\n' +
        '        <div class="error_text">'+w_offline+'</div>\n' +
        '    </div>\n' +
        '    <div class="info_type">'+_mx2('Workers')+'</div>\n' +
        '</div>'

    //gpu信息载入
    let g_all=data.data.gpus
    let g_online=data.data.gpus_online
    let g_offline=data.data.gpus-data.data.gpus_online
    // $('#workers_card_GPU .jdx').attr('style','width:'+Math.fround(g_online/g_all)*100+'%')
    // $('#workers_card_GPU .info_tx .txt_number_1').html(g_all)
    // $('#workers_card_GPU .info_tx .error_text').html(g_offline)
    str+='<div class="card" id="workers_card_GPU">\n' +
         '    <div class="jdt"  style="opacity: 1">\n' +
         '        <div class="jdx" style="width: '+Math.fround(g_online/g_all)*100+'%"></div>\n' +
         '    </div>\n' +
         '    <div class="info_tx">\n' +
         '        <div class="txt_number_1">'+g_all+'</div>\n' +
         '        <small></small>\n' +
         '        <div class="error_text">'+g_offline+'</div>\n' +
         '    </div>\n' +
         '    <div class="info_type">GPU</div>\n' +
         '</div>'

    //能源功耗
    let p_all=data.data.power
    let p_unit=data.data.power_unit
    // $('#workers_card_power .info_tx .txt_number_1').html(p_all)
    // $('#workers_card_power .info_tx small').html(p_unit)
    str+=' <div class="card" id="workers_card_power">\n' +
         '     <div class="jdt"  style="opacity: 0">\n' +
         '         <div class="jdx" style="width: 0%"></div>\n' +
         '     </div>\n' +
         '     <div class="info_tx">\n' +
         '         <div class="txt_number_1">'+p_all+'</div>\n' +
         '         <small>'+p_unit+'</small>\n' +
         '     </div>\n' +
         '     <div class="info_type">'+_mx('Pow')+'</div>\n' +
         ' </div>'

    //每日预计收益 后台美金
    let money=data.data.usd_day
    // $('#workers_card_moeny .info_tx .txt_number_1').html(Math.fround(money*currencyValue).toFixed(2))
    // $('#workers_card_moeny .info_tx small').html(currency)
    str+=' <div class="card" id="workers_card_moeny">\n' +
         '     <div class="jdt"  style="opacity: 0">\n' +
         '         <div class="jdx" style="width: 10%"></div>\n' +
         '     </div>\n' +
         '     <div class="info_tx">\n' +
         '         <div class="txt_number_1">'+Math.fround(money*currencyValue).toFixed(2)+'</div>\n' +
         '         <small>'+currency+'</small>\n' +
         '     </div>\n' +
         '     <div class="info_type">'+_mx('Est. daily')+'</div>\n' +
         ' </div>'
    // data.data.hashrate['ETC']=data.data.hashrate['ETH']
    //币种收益
    $.each(data.data.hashrate,function (i,it) {
       str+='<div class="card">\n' +
            '    <div class="jdt" style="opacity: 0">\n' +
            '        <div class="jdx" style="width: 10%"></div>\n' +
            '    </div>\n' +
            '    <div class="info_tx">\n' +
            '        <div>'+it.rate+'</div>\n' +
            '        <small>'+it.rate_unit+'</small>\n' +
            '    </div>\n' +
            '    <div class="info_type">'+i+'</div>\n' +
            '</div>'
    })
    $('.sum_tab').html(str)
}

//查询
function selectWorkers() {
    let listSearch=$('.search_result .result')
    let Status1=[]
    let Mining1=[]
    let Temperature1=[]
    let Misc1=[]
    let Stability1=[]
    let Groups1=[]
    let Coins1=[]
    $.each(listSearch,function (i,it) {
        let x=$(it).attr('data-xxx-g')
        switch (x) {
            case 'Status':
                Status1.push($(it).attr('data-ixx'))
                break
            case 'Mining issues':
                Mining1.push($(it).attr('data-ixx'))
                break
            case 'Temperature':
                Temperature1.push($(it).attr('data-ixx'))
                break
            case 'Misc':
                Misc1.push($(it).attr('data-ixx'))
                break
            case 'Stability':
                Stability1.push($(it).attr('data-ixx'))
                break
            case 'Groups':
                Groups1.push($(it).attr('data-ixx'))
                break
            case 'Coins':
                Coins1.push($(it).attr('data-ixx'))
                break
        }
    })
    searchObj={
        'Status':Status1.join(','),
        'Mining issues':Mining1.join(','),
        'Temperature':Temperature1.join(','),
        'Misc':Misc1.join(','),
        'Stability':Stability1.join(','),
        'Groups':Groups1.join(','),
        'Coins':Coins1.join(','),
    }
}

//调用查询方法
function selectSearchConditionPage(page) {
    if(page!=undefined){
       search_page=page
    }
    selectWorkers()
    $.ajax({
        url:`/hercules2.php?p=${search_page}&c=${search_count}&text=${search_text}`,
        dataType:'json',
        type:'get',
        data:searchObj,
        success:function (res) {
            total_page=res.data.total_page
            hindTags(res.data.st)
            loadWorkers(res.data.workers);
        }
    })
}

//载入条件
function hindTags(data) {
    // noresults disabled
    let status=data.status
    status.online==0?$('#count_online').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_online').html(status.online)
    status.idle==0?$('#count_idle').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_idle').html(status.idle)
    status.offline==0?$('#count_offline').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_offline').html(status.offline)
    status['paused alerts']==0?$('#count_alerts_pause').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_alerts_pause').html(status['paused alerts'])
    status['paused triggers']==0?$('#count_triggers_pause').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_triggers_pause').html(status['paused triggers'])

    let mining_issues=data.mining_issues
    mining_issues['no speed']==0?$('#count_nospeed').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_nospeed').html(mining_issues['no speed'])
    mining_issues['low efficiency']==0?$('#count_noefficiency').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_noefficiency').html(mining_issues['low efficiency'])
    mining_issues['no temperature']==0?$('#count_notemperature').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_notemperature').html(mining_issues['no temperature'])
    mining_issues['no fans']==0?$('#count_nofans').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_nofans').html(mining_issues['no fans'])
    mining_issues['no pool']==0?$('#count_nopool').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_nopool').html(mining_issues['no pool'])
    mining_issues['no coin']==0?$('#count_nocoin').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_nocoin').html(mining_issues['no coin'])
    mining_issues['idle gpus']==0?$('#count_idlegpus').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_idlegpus').html(mining_issues['idle gpus'])
    // mining_issues['idle gpus']==0?$('#count_missinggpus').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_missinggpus').html(mining_issues['idle gpus'])


    let temperature=data.temperature
    temperature['hot limit']==0?$('#count_hotlimit').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_hotlimit').html(temperature['hot limit'])
    temperature['very hot limit']==0?$('#count_veryhotlimit').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_veryhotlimit').html(temperature['very hot limit'])

    let misc=data.misc
    misc['notes']==0?$('#count_notes').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_notes').html(misc['notes'])
    misc['out of space']==0?$('#count_nospace').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_nospace').html(misc['out of space'])

    let stability=data.stability
    stability['console errors']==0?$('#count_console').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_console').html(stability['console errors'])
    stability['poor stability rate']==0?$('#count_stability').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_stability').html(stability['poor stability rate'])
    stability['system reboots']==0?$('#count_reboots').parent().addClass('noresults').parent().find('input').prop("disabled", true):$('#count_reboots').html(stability['system reboots'])

    let str=''
    let group=data.group
    $.each(group,function (i,it) {
        if(searchObj.Groups.indexOf(i.toLowerCase())!=-1){
            str+='<div class="checkbox_row">' +
                '<input type="checkbox" data-xxx-g="Groups" data-search="'+i.toLowerCase()+'" id="filter_group_'+i.toLowerCase()+'" checked="checked" data-filter="'+i.toLowerCase()+'" name="filter_group_'+i.toUpperCase()+'" value="1">' +
                '<label for="filter_group_'+i.toLowerCase()+'">'+i.toUpperCase()+' ('+it+')</label>' +
                '</div>'
        }else {
            str+='<div class="checkbox_row">' +
                    '<input type="checkbox" data-xxx-g="Groups" data-search="'+i.toLowerCase()+'" id="filter_group_'+i.toLowerCase()+'" data-filter="'+i.toLowerCase()+'" name="filter_group_'+i.toUpperCase()+'" value="1">' +
                    '<label for="filter_group_'+i.toLowerCase()+'">'+i.toUpperCase()+' ('+it+')</label>' +
                '</div>'
        }
    })
    $('#groupsFrame .checkbox_group').html(str);

    let coinStr=''
    let coin=data.coin
    $.each(coin,function (i,it) {
        if(searchObj.Coins.indexOf(i.toLowerCase())!=-1){
            coinStr+='<div class="checkbox_row">' +
                        '<input data-xxx-g="Coins" type="checkbox" data-search="'+i.toLowerCase()+'" id="filter_group_'+i.toLowerCase()+'" checked="checked" data-filter="'+i.toLowerCase()+'" name="filter_group_'+i.toUpperCase()+'" value="1">' +
                        '<label for="filter_group_'+i.toLowerCase()+'">'+i.toUpperCase()+' ('+it+')</label>' +
                     '</div>'
        }else {
            coinStr+='<div class="checkbox_row">' +
                '<input data-xxx-g="Coins" type="checkbox" data-search="'+i.toLowerCase()+'" id="filter_group_'+i.toLowerCase()+'" data-filter="'+i.toLowerCase()+'" name="filter_group_'+i.toUpperCase()+'" value="1">' +
                '<label for="filter_group_'+i.toLowerCase()+'">'+i.toUpperCase()+' ('+it+')</label>' +
                '</div>'
        }
    })
    $('#coinsFrame .checkbox_group').html(coinStr);
}

$('#search_text').on('change',function () {
    search_text=$(this).val()
    selectSearchConditionPage(1)
})