var dailyProfitabilityColor = '#5767ff';
var chartTitle = $('.page .content h1').css("color");
var titleColor = $('.page .content h1').css("color");
var borderColor = $('.divider').css("border-top-color");
var borderLightColor = $('.divider').css("border-top-color");
var navigatorBorder = $('.divider').css("border-top-color");
var navigatorFill = "rgba(87,103,255,0.2)";
var navigatorHandles = $('.page .menu .subscription_plan p').css("color");
var navigatorBackground = 'transparent';
var buttonColor = $('.page .content h1').css("color");
var buttonFillHover = $('.page .content h1').css("color");
var buttonColorHover = '#ffffff';
var buttonDisabledFill = "transparent";
var buttonDisabledColor = $('.subscription_plan small').css("color");
var buttonSelectedFill = buttonFillHover;
var buttonSelectedColor = '#ffffff';
var hiddenColor = 'transparent';
var tooltipBackgroundColor = $('header .user_menu').css("background-color");
var tooltipBoxShadow = $('header .user_menu').css("box-shadow");
var tooltipBorderColor = $('header .user_menu').css("background-color");
var tooltipDateColor = $('header .user_menu .link').css("color");
var tooltipDarkerColor = $('.page .content h1').css("color");
var legendColor = $('.page .content h1').css("color");
var legendHiddenColor = $('.content.stats .data_row .element .change span.gray').css("color");
var averageDailyColor = $('body').css("background-color");
var titleSize = '18px';
var smallSize = $('.content.stats .data_row .element .change').css("font-size");
var fontWeightLight = '300';
var fontWeightBold = '600';
var selectorTop = 30;
var tooltipHeaderFontSize = '16px';
var powerConsumptionColor = '#5767ff';
var columnBorderColor = '#ffffff';
var legendHeight = 90;
var legendNavigationSize = '14px';
var legendNavigationWeight = '600';
var legendNavigationActiveColor = '#5767ff';
var legendNavigationInactiveColor = '#c7ccda';
if (theme == 'dark') {
    averageDailyColor = 'rgba(255,255,255,0.2)';
    buttonFillHover = 'rgba(255,255,255,0.1)';
    buttonSelectedFill = 'rgba(255,255,255,0.1)';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.05)';
    tooltipDarkerColor = '#fff';
    dailyProfitabilityColor = '#6574ff';
    legendNavigationActiveColor = '#6574ff';
    legendNavigationInactiveColor = '#444c60';
    columnBorderColor = '#343d52';
}
if (theme == 'hacker') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    fontWeightLight = '400';
    smallSize = '11px';
    titleSize = '12px';
    selectorTop = 36;
    fontWeightBold = '500';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#50b951';
    buttonColorHover = '#1a1a1a';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#50b951';
    buttonSelectedColor = '#1a1a1a';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    tooltipHeaderFontSize = '14px';
    tooltipDateColor = 'rgba(255,255,255,0.4)';
    dailyProfitabilityColor = '#50b951';
    legendHeight = 78;
    legendNavigationSize = '12px';
    legendNavigationWeight = '400';
    legendNavigationActiveColor = '#50b951';
    legendNavigationInactiveColor = '#2c2c2c';
    columnBorderColor = '#1a1a1a';
}
if (theme == 'electric') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#02dcff';
    buttonColorHover = '#001432';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#02dcff';
    buttonSelectedColor = '#001432';
    navigatorFill = "rgba(255,255,255,0.1)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    tooltipDarkerColor = '#fff';
    dailyProfitabilityColor = '#02dcff';
    legendNavigationActiveColor = '#2fcbf8';
    legendNavigationInactiveColor = '#20314b';
    columnBorderColor = '#0d203c';
}
if (theme == 'radioactive') {
    averageDailyColor = 'rgba(255,255,255,0.5)';
    selectorTop = 32;
    buttonColor = 'rgba(255,255,255,0.6)';
    buttonFillHover = '#ffdd00';
    buttonColorHover = '#1f262d';
    buttonDisabledFill = "transparent";
    buttonDisabledColor = 'rgba(255,255,255,0.2)';
    buttonSelectedFill = '#ffdd00';
    buttonSelectedColor = '#1f262d';
    navigatorFill = "rgba(255,255,255,0.05)";
    borderColor = 'rgba(255,255,255,0.1)';
    borderLightColor = 'rgba(255,255,255,0.08)';
    legendColor = 'rgba(255,255,255,1)';
    legendHiddenColor = 'rgba(255,255,255,0.2)';
    dailyProfitabilityColor = '#ffdd00';
    legendNavigationActiveColor = '#ffdd00';
    legendNavigationInactiveColor = '#41474c';
    columnBorderColor = '#31373d';
}
if (theme == 'office') {
    selectorTop = 32;
    buttonDisabledFill = "transparent";
    buttonDisabledColor = '#969dae';
    borderColor = 'rgba(0,0,0,0.1)';
    borderLightColor = 'rgba(0,0,0,0.05)';
    navigatorHandles = '#e2e5ef';
    navigatorBorder = '#e2e5ef';
    navigatorFill = "rgba(0,0,0,0.05)";
}

function getDayTimestamp(aTimestamp) {
    return aTimestamp - aTimestamp % (24 * 60 * 60);
}

Highcharts.setOptions({
    lang: {
        shortMonths: [_('Jan'), _('Feb'), _('Mar'), _('Apr'), _('May'), _('Jun'), _('Jul'), _('Aug'), _('Sep'), _('Oct'), _('Nov'), _('Dec')],
        shortWeekdays: [_('Mon'), _('Tue'), _('Wed'), _('Thu'), _('Fri'), _('Sat'), _('Sun')],
        rangeSelectorZoom: _('Zoom')
    }
});
var coinsUnits = {};
var groupsListObj = {};
var coinsList = [];
var coinsHashratesList = [];
var coinsEfficiencyList = [];
var coinsConsumptionList = [];
var coinConsumptionArray = [];
var coinConsumptionArrayObj = {};
var coinsDataAll = {};
var coinsListObj = {};

function setGlobalActivity(workersList) {
    var totalWorkers = 0;
    var activeWorkers = 0;
    var totalHardware = 0;
    var brokenTemp = 0;
    $.each(workersList, function (i, w) {
        totalWorkers++;
        if (w["info"]["status"] == "online") {
            activeWorkers++;
            var thisHardwareCount = 0;
            var tempMax = 0;
            $.each(w["hardware"], function (index, value) {
                thisHardwareCount++;
                if (Array.isArray(value["temp"])) {
                    for (var i = 0; i < value["temp"].length; i++) {
                        if (value["temp"][i] > 75) {
                            brokenTemp++;
                            break;
                        }
                    }
                } else {
                    if (value["temp"] > 75) {
                        brokenTemp++;
                    }
                }
            });
            totalHardware += thisHardwareCount;
        }
    });
    $('#activeHardware').html(totalHardware);
    $('#workerTemp').html((totalHardware - brokenTemp));
    $('#totalHardware').html(totalHardware);
    if (totalHardware > 0) {
        $('#workerTempPercent').css("width", Math.round(100 * (totalHardware - brokenTemp) / totalHardware) + "%");
    }
    if (totalHardware > 0) {
        $('#workerTempPercentValue').html(Math.round(100 * (totalHardware - brokenTemp) / totalHardware) + "%");
    }
    $('#totalWorkers').html(totalWorkers);
    $('#activeWorkers').html(activeWorkers);
    $('#activeWorkersPercent').css("width", Math.round(100 * activeWorkers / totalWorkers) + "%");
    $('#activeWorkersPercentValue').html(Math.round(100 * activeWorkers / totalWorkers) + "%");
}

var data = '';
var workersList = '';

function fetchData(cache) {
    data = '';
    if (typeof (Storage) !== "undefined" && cache) {
    }
    if (data == '' || data == null || cacheExpired) {
        var apiGlobal = '/v2/stats-global';
        var jqxhr = $.getJSON(apiGlobal, function (data) {
            if (typeof (Storage) !== "undefined" && data != '' && typeof data != 'undefined' && data != null) {
                if (typeof data.global == "undefined" || data.global == null) {
                    $('.stats').html('<div class="empty_state"><div class="empty_icon wait_bubble"><div class="empty_icon wait_stats"></div></div><div class="title">' + _('Your first data will be ready soon') + '</div><div class="text">' + ('please check again in few minutes') + '</div></div>');
                    preloaderHide();
                    return false;
                } else {
                    if ($('.empty_state').length) {
                        location.reload();
                        return false;
                    }
                    setData(data, cache);
                }
            }
        }).fail(function () {
            $('.stats').html('<div class="empty_state"><div class="empty_icon wait_bubble"><div class="empty_icon wait_stats"></div></div><div class="title">' + _('Your first data will be ready soon') + '</div><div class="text">' + ('please check again in few minutes') + '</div></div>');
            preloaderHide();
        });
    } else {
        setData(JSON.parse(data), cache);
    }

    function setData(data, cache) {
        workersList = '';
        if (typeof (Storage) !== "undefined" && cache) {
            workersList = sessionStorage.getItem(workerToken.toLowerCase() + ".workersList");
        }
        if (workersList == '' || workersList == null || cacheExpired) {
            //var apiStats = '/v2/stats/' + workerToken;
            var apiStats = '/v2/stats';
            if (demoAccount == 1) {
                apiStats = '/v2/demo-worker';
            }
            var jqxhr = $.getJSON(apiStats, function (workersList) {
                if (typeof (Storage) !== "undefined" && workersList != '' && typeof workersList != 'undefined' && workersList != null) {
                    setGlobalActivity(workersList);
                    sessionStorage.setItem(workerToken.toLowerCase() + ".workersList", JSON.stringify(workersList));
                }
            }).fail(function () {
                // window.location.replace("/workers");
                return false;
            });
        } else {
            setGlobalActivity(JSON.parse(workersList));
        }
        var colorString = '';
        var topCoinsToday = [];
        var topCoinsTodayObj = {};
        var topCoinsYesterday = [];
        var topCoinsYesterdayObj = {};
        var topCoinsLast3d = [];
        var topCoinsLast3dObj = {};
        var topCoinsLast7d = [];
        var topCoinsLast7dObj = {};
        var topCoinsThisMonth = [];
        var topCoinsThisMonthObj = {};
        var topCoinsLast30d = [];
        var topCoinsLast30dObj = {};
        var numDaysTotal = 0;
        var firstDate = 99999999999999;
        var lastDate = 0;
        var profToday = 0;
        var profTodayW = 0;
        var profYesterday = 0;
        var profYesterdayCompare = 0;
        var profYesterdayW = 0;
        var prof3d = 0;
        var prof3dCompare = 0;
        var prof3dW = 0;
        var prof7d = 0;
        var prof7dCompare = 0;
        var prof7dW = 0;
        var profThisMonth = 0;
        var profThisMonthCompare = 0;
        var profThisMonthW = 0;
        var prof30d = 0;
        var prof30dCompare = 0;
        var prof30dW = 0;
        var d = new Date();
        var day = d.getDate();
        var month = d.getMonth() + 1;
        var year = d.getYear();
        var daysOfMonth = 30;
        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {
            daysOfMonth = 31;
        } else if (month == 2) {
            daysOfMonth = 28;
            if (new Date(year, 1, 29).getDate() === 29) {
                daysOfMonth = 29;
            }
        }
        var topCoin = '';
        var topCoinValue = 0;
        dailyCoinsTemp = [];
        $.each(data["daily_coins"], function (timestamp, dataTimestamp) {
            dataTimestampTemp = [];
            $.each(dataTimestamp, function (coin, dataDailyCoins) {
                console.log('coin',coin)
                console.log('dataDailyCoins',dataDailyCoins)
                dataTimestampTemp.push([coin, dataDailyCoins]);
                topCoinsTodayObj[coin] = [0, 0];
                topCoinsYesterdayObj[coin] = [0, 0];
                topCoinsLast3dObj[coin] = [0, 0];
                topCoinsLast7dObj[coin] = [0, 0];
                topCoinsThisMonthObj[coin] = [0, 0];
                topCoinsLast30dObj[coin] = [0, 0];
            });
            dailyCoinsTemp.push([dataTimestampTemp]);
        });
        for (var i = 0; i < dailyCoinsTemp.length; i++) {
            var iDay = dailyCoinsTemp.length - 1 - i;
            var coins = dailyCoinsTemp[i][0];
            var todaySum = 0;
            var yesterdaySum = 0;
            var yesterdayPrevSum = 0;
            var last3dSum = 0;
            var prev3dSum = 0;
            var last7dSum = 0;
            var prev7dSum = 0;
            var thisMonthSum = 0;
            var lastMonthSum = 0;
            var last30dSum = 0;
            var prev30dSum = 0;
            for (var j = 0; j < coins.length; j++) {
                var coin = coins[j][0];
                var value = coins[j][1][0] * currencyValue;
                var count = coins[j][1][1];
                var amount = coins[j][1][2];
                if (iDay == 0) {
                    topCoinsTodayObj[coin][0] += value / count;
                    topCoinsTodayObj[coin][1] += amount / count;
                    todaySum += parseFloat(value / count);
                }
                if (iDay == 1) {
                    topCoinsYesterdayObj[coin][0] += value / count;
                    topCoinsYesterdayObj[coin][1] += amount / count;
                    yesterdaySum += parseFloat(value / count);
                }
                if (iDay == 8) {
                    yesterdayPrevSum += parseFloat(value / count);
                }
                if (iDay >= 0 && iDay < 3) {
                    topCoinsLast3dObj[coin][0] += value / count;
                    topCoinsLast3dObj[coin][1] += amount / count;
                    last3dSum += parseFloat(value / count);
                }
                if (iDay >= 3 && iDay < 6) {
                    prev3dSum += parseFloat(value / count);
                }
                if (iDay >= 0 && iDay < 7) {
                    topCoinsLast7dObj[coin][0] += value / count;
                    topCoinsLast7dObj[coin][1] += amount / count;
                    last7dSum += parseFloat(value / count);
                }
                if (iDay >= 7 && iDay < 14) {
                    prev7dSum += parseFloat(value / count);
                }
                if (iDay >= 0 && iDay < day) {
                    topCoinsThisMonthObj[coin][0] += value / count;
                    topCoinsThisMonthObj[coin][1] += amount / count;
                    thisMonthSum += parseFloat(value / count);
                }
                if (iDay >= 30 && iDay < 30 + day) {
                    lastMonthSum += parseFloat(value / count);
                }
                if (iDay >= 0 && iDay < 30) {
                    topCoinsLast30dObj[coin][0] += value / count;
                    topCoinsLast30dObj[coin][1] += amount / count;
                    last30dSum += parseFloat(value / count);
                }
                if (iDay >= 30 && iDay < 60) {
                    prev30dSum += parseFloat(value / count);
                }
            }
            if (iDay == 0) {
                profToday += todaySum;
            }
            if (iDay == 1) {
                profYesterday += yesterdaySum;
            }
            if (iDay == 8) {
                profYesterdayCompare += yesterdayPrevSum;
            }
            if (iDay >= 0 && iDay < 3) {
                prof3d += last3dSum;
            }
            if (iDay >= 3 && iDay < 6) {
                prof3dCompare += prev3dSum;
            }
            if (iDay >= 0 && iDay < 7) {
                prof7d += last7dSum;
            }
            if (iDay >= 7 && iDay < 14) {
                prof7dCompare += prev7dSum;
            }
            if (iDay >= 0 && iDay < day) {
                profThisMonth += thisMonthSum;
            }
            if (iDay >= 30 && iDay < 30 + day) {
                profThisMonthCompare += lastMonthSum;
            }
            if (iDay >= 0 && iDay < 30) {
                prof30d += last30dSum;
            }
            if (iDay >= 30 && iDay < 60) {
                prof30dCompare += prev30dSum;
            }
        }
        $.each(topCoinsTodayObj, function (i, v) {
            topCoinsToday.push([i, v[0], v[1]]);
        });
        $.each(topCoinsYesterdayObj, function (i, v) {
            topCoinsYesterday.push([i, v[0], v[1]]);
        });
        $.each(topCoinsLast3dObj, function (i, v) {
            topCoinsLast3d.push([i, v[0], v[1]]);
        });
        $.each(topCoinsLast7dObj, function (i, v) {
            topCoinsLast7d.push([i, v[0], v[1]]);
        });
        $.each(topCoinsThisMonthObj, function (i, v) {
            topCoinsThisMonth.push([i, v[0], v[1]]);
        });
        $.each(topCoinsLast30dObj, function (i, v) {
            topCoinsLast30d.push([i, v[0], v[1]]);
        });
        $('#profToday').html(profToday.toFixed(2) + ' ' + currency);
        $('#profYesterday').html(profYesterday.toFixed(2) + ' ' + currency);
        $('#prof3d').html(prof3d.toFixed(2) + ' ' + currency);
        $('#prof7d').html(prof7d.toFixed(2) + ' ' + currency);
        $('#profThisMonth').html(profThisMonth.toFixed(2) + ' ' + currency);
        $('#prof30d').html(prof30d.toFixed(2) + ' ' + currency);
        numDaysTotal = dailyCoinsTemp.length;
        var growth = 0;
        if (numDaysTotal > 1 && profYesterday != 0) {
            growth = (100 * (profToday - profYesterday) / profYesterday).toFixed(2);
            $('#profTodayCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#profTodayCompare').children('.icon').removeClass('arrow_down');
                $('#profTodayCompare').children('.icon').removeClass('arrow_none');
                $('#profTodayCompare').children('.icon').addClass('arrow_up');
                $('#profTodayCompare').children('.percent').removeClass('gray');
                $('#profTodayCompare').children('.percent').removeClass('red');
                $('#profTodayCompare').children('.percent').addClass('green');
            } else {
                $('#profTodayCompare').children('.icon').removeClass('arrow_up');
                $('#profTodayCompare').children('.icon').removeClass('arrow_none');
                $('#profTodayCompare').children('.icon').addClass('arrow_down');
                $('#profTodayCompare').children('.percent').removeClass('gray');
                $('#profTodayCompare').children('.percent').removeClass('green');
                $('#profTodayCompare').children('.percent').addClass('red');
            }
        }
        if (numDaysTotal > 8 && profYesterdayCompare != 0) {
            growth = (100 * (profYesterday - profYesterdayCompare) / profYesterdayCompare).toFixed(2);
            $('#profYesterdayCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#profYesterdayCompare').children('.icon').removeClass('arrow_down');
                $('#profYesterdayCompare').children('.icon').removeClass('arrow_none');
                $('#profYesterdayCompare').children('.icon').addClass('arrow_up');
                $('#profYesterdayCompare').children('.percent').removeClass('gray');
                $('#profYesterdayCompare').children('.percent').removeClass('red');
                $('#profYesterdayCompare').children('.percent').addClass('green');
            } else {
                $('#profYesterdayCompare').children('.icon').removeClass('arrow_up');
                $('#profYesterdayCompare').children('.icon').removeClass('arrow_none');
                $('#profYesterdayCompare').children('.icon').addClass('arrow_down');
                $('#profYesterdayCompare').children('.percent').removeClass('gray');
                $('#profYesterdayCompare').children('.percent').removeClass('green');
                $('#profYesterdayCompare').children('.percent').addClass('red');
            }
        }
        if (numDaysTotal > 6 && prof3dCompare != 0) {
            growth = (100 * (prof3d - prof3dCompare) / prof3dCompare).toFixed(2);
            $('#prof3dCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#prof3dCompare').children('.icon').removeClass('arrow_down');
                $('#prof3dCompare').children('.icon').removeClass('arrow_none');
                $('#prof3dCompare').children('.icon').addClass('arrow_up');
                $('#prof3dCompare').children('.percent').removeClass('gray');
                $('#prof3dCompare').children('.percent').removeClass('red');
                $('#prof3dCompare').children('.percent').addClass('green');
            } else {
                $('#prof3dCompare').children('.icon').removeClass('arrow_up');
                $('#prof3dCompare').children('.icon').removeClass('arrow_none');
                $('#prof3dCompare').children('.icon').addClass('arrow_down');
                $('#prof3dCompare').children('.percent').removeClass('gray');
                $('#prof3dCompare').children('.percent').removeClass('green');
                $('#prof3dCompare').children('.percent').addClass('red');
            }
        }
        if (numDaysTotal > 14 && prof7dCompare != 0) {
            growth = (100 * (prof7d - prof7dCompare) / prof7dCompare).toFixed(2);
            $('#prof7dCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#prof7dCompare').children('.icon').removeClass('arrow_down');
                $('#prof7dCompare').children('.icon').removeClass('arrow_none');
                $('#prof7dCompare').children('.icon').addClass('arrow_up');
                $('#prof7dCompare').children('.percent').removeClass('gray');
                $('#prof7dCompare').children('.percent').removeClass('red');
                $('#prof7dCompare').children('.percent').addClass('green');
            } else {
                $('#prof7dCompare').children('.icon').removeClass('arrow_up');
                $('#prof7dCompare').children('.icon').removeClass('arrow_none');
                $('#prof7dCompare').children('.icon').addClass('arrow_down');
                $('#prof7dCompare').children('.percent').removeClass('gray');
                $('#prof7dCompare').children('.percent').removeClass('green');
                $('#prof7dCompare').children('.percent').addClass('red');
            }
        }
        if (numDaysTotal > 30 + day && profThisMonthCompare != 0) {
            growth = (100 * (profThisMonth - profThisMonthCompare) / profThisMonthCompare).toFixed(2);
            $('#profThisMonthCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#profThisMonthCompare').children('.icon').removeClass('arrow_down');
                $('#profThisMonthCompare').children('.icon').removeClass('arrow_none');
                $('#profThisMonthCompare').children('.icon').addClass('arrow_up');
                $('#profThisMonthCompare').children('.percent').removeClass('gray');
                $('#profThisMonthCompare').children('.percent').removeClass('red');
                $('#profThisMonthCompare').children('.percent').addClass('green');
            } else {
                $('#profThisMonthCompare').children('.icon').removeClass('arrow_up');
                $('#profThisMonthCompare').children('.icon').removeClass('arrow_none');
                $('#profThisMonthCompare').children('.icon').addClass('arrow_down');
                $('#profThisMonthCompare').children('.percent').removeClass('gray');
                $('#profThisMonthCompare').children('.percent').removeClass('green');
                $('#profThisMonthCompare').children('.percent').addClass('red');
            }
        }
        if (numDaysTotal > 60 && prof30dCompare != 0) {
            growth = (100 * (prof30d - prof30dCompare) / prof30dCompare).toFixed(2);
            $('#prof30dCompare').children('.percent').html(growth + "%");
            if (growth >= 0) {
                $('#prof30dCompare').children('.icon').removeClass('arrow_down');
                $('#prof30dCompare').children('.icon').removeClass('arrow_none');
                $('#prof30dCompare').children('.icon').addClass('arrow_up');
                $('#prof30dCompare').children('.percent').removeClass('gray');
                $('#prof30dCompare').children('.percent').removeClass('red');
                $('#prof30dCompare').children('.percent').addClass('green');
            } else {
                $('#prof30dCompare').children('.icon').removeClass('arrow_up');
                $('#prof30dCompare').children('.icon').removeClass('arrow_none');
                $('#prof30dCompare').children('.icon').addClass('arrow_down');
                $('#prof30dCompare').children('.percent').removeClass('gray');
                $('#prof30dCompare').children('.percent').removeClass('green');
                $('#prof30dCompare').children('.percent').addClass('red');
            }
        }
        var topCoinsTodayDisplay = '';
        var topCoinsYesterdayDisplay = '';
        var topCoinsLast3dDisplay = '';
        var topCoinsLast7dDisplay = '';
        var coinsTop3Display = '';
        var coinsTop10DisplayLast3d = '';
        var coinsTop7Display = '';
        var coinsTop10DisplayLast7d = '';
        var topCoinsThisMonthDisplay = '';
        var topCoinsLast30dDisplay = '';
        var coinsTop10Display = '';
        var coinDisplay = '';
        var showCoins = 10;
        topCoinsToday = topCoinsToday.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsToday.length - 1; i >= 0; i--) {
            if (topCoinsToday[i][1] == 0 && topCoinsToday[i][2] == 0) continue;
            if (topCoinValue < topCoinsToday[i][1]) {
                topCoinValue = topCoinsToday[i][1];
                topCoin = topCoinsToday[i][0];
            }
            coinDisplay = getUnitFromCrypto(topCoinsToday[i][0]);
            topCoinsTodayDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsToday[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsToday[i][0]) + '.png">' + topCoinsToday[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsToday[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsToday.length - showCoins) break;
        }
        $('#topCoinsToday').html(topCoinsTodayDisplay);
        topCoinsYesterday = topCoinsYesterday.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsYesterday.length - 1; i >= 0; i--) {
            if (topCoinsYesterday[i][1] == 0 && topCoinsYesterday[i][2] == 0) continue;
            coinDisplay = getUnitFromCrypto(topCoinsYesterday[i][0]);
            topCoinsYesterdayDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsYesterday[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsYesterday[i][0]) + '.png">' + topCoinsYesterday[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsYesterday[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsYesterday.length - showCoins) break;
        }
        $('#topCoinsYesterday').html(topCoinsYesterdayDisplay);
        topCoinsLast3d = topCoinsLast3d.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsLast3d.length - 1; i >= 0; i--) {
            if (topCoinsLast3d[i][1] == 0 && topCoinsLast3d[i][2] == 0) continue;
            coinDisplay = getUnitFromCrypto(topCoinsLast3d[i][0]);
            topCoinsLast3dDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsLast3d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast3d[i][0]) + '.png">' + topCoinsLast3d[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsLast3d[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsLast3d.length - showCoins) break;
        }
        $('#topCoinsLast3d').html(topCoinsLast3dDisplay);
        for (var i = topCoinsLast3d.length - 1; i >= 0; i--) {
            var percent = Math.round(100 * topCoinsLast3d[i][1] / prof3d);
            var topCoinName = topCoinsLast3d[i][0];
            if (topCoinName.length > 6) {
                topCoinName = topCoinName.substr(0, 4) + '...';
            }
            coinsTop10DisplayLast3d += '<div class="row"><div class="name" data-tooltip="' + topCoinsLast3d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast3d[i][0]) + '.png">' + topCoinName + '</div><div class="progress_bar"><div class="progress" style="width:' + percent + '%;"></div><div class="value">' + percent + '%</div></div></div>';
            if (i == topCoinsLast3d.length - 10) break;
        }
        $('#top10coinsLast3d').html(coinsTop10DisplayLast3d);
        topCoinsLast7d = topCoinsLast7d.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsLast7d.length - 1; i >= 0; i--) {
            if (topCoinsLast7d[i][1] == 0 && topCoinsLast7d[i][2] == 0) continue;
            coinDisplay = getUnitFromCrypto(topCoinsLast7d[i][0]);
            topCoinsLast7dDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsLast7d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast7d[i][0]) + '.png">' + topCoinsLast7d[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsLast7d[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsLast7d.length - showCoins) break;
        }
        $('#topCoinsLast7d').html(topCoinsLast7dDisplay);
        for (var i = topCoinsLast7d.length - 1; i >= 0; i--) {
            var percent = Math.round(100 * topCoinsLast7d[i][1] / prof7d);
            var topCoinName = topCoinsLast7d[i][0];
            if (topCoinName.length > 6) {
                topCoinName = topCoinName.substr(0, 4) + '...';
            }
            coinsTop10DisplayLast7d += '<div class="row"><div class="name" data-tooltip="' + topCoinsLast7d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast7d[i][0]) + '.png">' + topCoinName + '</div><div class="progress_bar"><div class="progress" style="width:' + percent + '%;"></div><div class="value">' + percent + '%</div></div></div>';
            if (i == topCoinsLast7d.length - 10) break;
        }
        $('#top10coinsLast7d').html(coinsTop10DisplayLast7d);
        topCoinsThisMonth = topCoinsThisMonth.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsThisMonth.length - 1; i >= 0; i--) {
            if (topCoinsThisMonth[i][1] == 0 && topCoinsThisMonth[i][2] == 0) continue;
            coinDisplay = getUnitFromCrypto(topCoinsThisMonth[i][0]);
            topCoinsThisMonthDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsThisMonth[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsThisMonth[i][0]) + '.png">' + topCoinsThisMonth[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsThisMonth[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsThisMonth.length - showCoins) break;
        }
        $('#topCoinsThisMonth').html(topCoinsThisMonthDisplay);
        topCoinsLast30d = topCoinsLast30d.sort(function (a, b) {
            return a[1] - b[1];
        });
        for (var i = topCoinsLast30d.length - 1; i >= 0; i--) {
            if (topCoinsLast30d[i][1] == 0 && topCoinsLast30d[i][2] == 0) continue;
            coinDisplay = getUnitFromCrypto(topCoinsLast30d[i][0]);
            topCoinsLast30dDisplay += '<div class="row"><div class="coin" data-tooltip="' + topCoinsLast30d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast30d[i][0]) + '.png">' + topCoinsLast30d[i][2].toFixed(6) + ' ' + coinDisplay + '</div><div class="usd">' + topCoinsLast30d[i][1].toFixed(4) + ' ' + currency + '</div></div>';
            if (i == topCoinsLast30d.length - showCoins) break;
        }
        $('#topCoinsLast30d').html(topCoinsLast30dDisplay);
        for (var i = topCoinsLast30d.length - 1; i >= 0; i--) {
            var percent = Math.round(100 * topCoinsLast30d[i][1] / prof30d);
            var topCoinName = topCoinsLast30d[i][0];
            if (topCoinName.length > 6) {
                topCoinName = topCoinName.substr(0, 4) + '...';
            }
            coinsTop10Display += '<div class="row"><div class="name" data-tooltip="' + topCoinsLast30d[i][0] + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(topCoinsLast30d[i][0]) + '.png">' + topCoinName + '</div><div class="progress_bar"><div class="progress" style="width:' + percent + '%;"></div><div class="value">' + percent + '%</div></div></div>';
            if (i == topCoinsLast30d.length - 10) break;
        }
        $('#top10coins').html(coinsTop10Display);
        if (numDaysTotal < 2) {
            $('#prof30d').parent().hide();
            $('#topCoinsLast30d').parent().hide();
            $('#profThisMonth').parent().hide();
            $('#topCoinsThisMonth').parent().hide();
            $('#prof7d').parent().hide();
            $('#topCoinsLast7d').parent().hide();
            $('#prof3d').parent().hide();
            $('#topCoinsLast3d').parent().hide();
            $('#profYesterday').parent().hide();
            $('#topCoinsYesterday').parent().hide();
            $('.notEnoughData').css('display', 'flex');
        }
        ;var dataProfitabilityArray = [];
        var oldProfitabilityValue = 0;
        var averageDailyTemp = {};
        $.each(data["global"], function (index, value) {
            if (parseInt(index) + workerOffset * 60 * 60 > lastDate) {
                lastDate = parseInt(index) + workerOffset * 60 * 60;
            }
            if (parseInt(index) + workerOffset * 60 * 60 < firstDate) {
                firstDate = parseInt(index) + workerOffset * 60 * 60;
            }
            var newProfitabilityValue = value * currencyValue;
            var previouslyAdjusted = 0;
            dataProfitabilityArray.push([(parseInt(index) + workerOffset * 60 * 60) * 1000, newProfitabilityValue]);
            if (averageDailyTemp[getDayTimestamp(index)] == null) {
                averageDailyTemp[getDayTimestamp(index)] = {};
                averageDailyTemp[getDayTimestamp(index)]['sum'] = 0;
                averageDailyTemp[getDayTimestamp(index)]['count'] = 0;
            }
            averageDailyTemp[getDayTimestamp(index)]['sum'] += newProfitabilityValue;
            averageDailyTemp[getDayTimestamp(index)]['count'] += 1;
            oldProfitabilityValue = newProfitabilityValue;
        });
        var dailyAverage = [];
        $.each(data["global"], function (index, value) {
            var averageValue = averageDailyTemp[getDayTimestamp(index)]['sum'] / averageDailyTemp[getDayTimestamp(index)]['count'];
            dailyAverage.push([(parseInt(index) + workerOffset * 60 * 60) * 1000, averageValue]);
        });

        var globalProfitabilitySeriesArray = [];
        var coinsHashrateSeriesArray = [];
        var coinsConsumptionSeriesArray = [];
        var coinsEfficiencySeriesArray = [];

        globalProfitabilitySeriesArray.push({
            name: _('Daily profitability'),
            data: dataProfitabilityArray,
            tooltip: {valueDecimals: 2, valueSuffix: currency + '/' + _('day'), shared: true, split: false},
            showInNavigator: true,
            navigatorOptions: {fillOpacity: 0, fillColor: 'rgba(255,255,255,0)'},
            color: dailyProfitabilityColor,
            lineWidth: 2,
            dataGrouping: {approximation: "average", enabled: false, forced: false},
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillOpacity: 1,
            fillColor: {
                linearGradient: [0, 150, 0, 0],
                stops: [[0, Highcharts.Color(dailyProfitabilityColor).setOpacity(0).get('rgba')], [1, Highcharts.Color(dailyProfitabilityColor).setOpacity(0.6).get('rgba')]]
            },
            zIndex: 2,
            animation: false
        });
        globalProfitabilitySeriesArray.push({
            name: _('Avg. daily profitability'),
            data: dailyAverage,
            tooltip: {valueDecimals: 2, valueSuffix: currency + '/' + _('day'), shared: true, split: false},
            showInNavigator: false,
            color: averageDailyColor,
            dataGrouping: {approximation: "average", enabled: false, forced: false},
            marker: {
                enabled: false,
                symbol: 'circle',
                lineColor: 'rgba(255,255,255,0)',
                lineWidth: 0,
                states: {hover: {lineWidth: 0}}
            },
            states: {
                hover: {
                    enabled: true,
                    lineWidth: 2,
                    marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                }
            },
            fillColor: 'rgba(255,255,255,0)',
            fillOpacity: 0,
            zIndex: 0,
            animation: false
        });
        console.log('globalProfitabilitySeriesArray',globalProfitabilitySeriesArray)
        $.each(data["coins"], function (index, value) {
            if (index != 'NO' && index != '' && index.indexOf('+') == -1) {
                colorString += getIcon(index).toUpperCase() + ",";
                var coinArray = [];
                var coinHashrateArray = [];
                var coinEfficiencyArray = [];
                var coinWattArray = [];
                var largestEl = 0;
                var newHashrateValue = 0;
                var oldHashrateValue = 0;
                var previouslyAdjusted = 0;
                $.each(value, function (index2, value2) {
                    newHashrateValue = value2[2];
                    if (newHashrateValue > 500 * oldHashrateValue && oldHashrateValue != 0 && previouslyAdjusted == 0) {
                        value2[2] = oldHashrateValue;
                        newHashrateValue = value2[2];
                        previouslyAdjusted = 1;
                    } else {
                        previouslyAdjusted = 0;
                    }
                    oldHashrateValue = newHashrateValue;
                });
                newHashrateValue = 0;
                oldHashrateValue = 0;
                previouslyAdjusted = 0;
                $.each(value, function (index2, value2) {
                    newHashrateValue = value2[2];
                    if (newHashrateValue > 500 * oldHashrateValue && oldHashrateValue != 0 && previouslyAdjusted == 0) {
                        value2[2] = oldHashrateValue;
                        newHashrateValue = value2[2];
                        previouslyAdjusted = 1;
                    } else {
                        previouslyAdjusted = 0;
                    }
                    oldHashrateValue = newHashrateValue;
                });
                $.each(value, function (index2, value2) {
                    // console.log('value2',value2)
                    if (value2[2] > largestEl) {
                        largestEl = value2[2];
                    }
                });
                coinsUnits[index] = 'H';
                if (largestEl / 1000 > 20) {
                    coinsUnits[index] = 'KH';
                    if (largestEl / 1000000 > 20) {
                        coinsUnits[index] = 'MH';
                        if (largestEl / 1000000000 > 20) {
                            coinsUnits[index] = 'GH';
                            if (largestEl / 1000000000000 > 20) {
                                coinsUnits[index] = 'TH';
                            }
                        }
                    }
                }
                $.each(value, function (index2, value2) {
                    console.log('value2',value2)
                    coinArray.push([(parseInt(index2) + workerOffset * 60 * 60) * 1000, value2[0] * currencyValue, value2[1]]);
                    coinHashrateArray.push([(parseInt(index2) + workerOffset * 60 * 60) * 1000, correctHashrate(coinsUnits[index], value2[2]), value2[3]]);
                    coinWattArray.push([(parseInt(index2) + workerOffset * 60 * 60) * 1000, value2[3]]);
                    if (value2[3] > 0) {
                        coinEfficiencyArray.push([(parseInt(index2) + workerOffset * 60 * 60) * 1000, correctHashrate(coinsUnits[index], value2[2]) / value2[3]]);
                    } else {
                        coinEfficiencyArray.push([(parseInt(index2) + workerOffset * 60 * 60) * 1000, 0]);
                    }
                    if (coinConsumptionArrayObj[(parseInt(index2) + workerOffset * 60 * 60) * 1000] == null) {
                        coinConsumptionArrayObj[(parseInt(index2) + workerOffset * 60 * 60) * 1000] = 0;
                    }
                    coinConsumptionArrayObj[(parseInt(index2) + workerOffset * 60 * 60) * 1000] += value2[3];
                    if (coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000] == null) {
                        coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000] = {};
                    }
                    if (coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000][index] == null) {
                        coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000][index] = {};
                    }
                    coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000][index]['hashrate'] = correctHashrate(coinsUnits[index], value2[2]);
                    coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000][index]['unit'] = coinsUnits[index];
                    coinsDataAll[(parseInt(index2) + workerOffset * 60 * 60) * 1000][index]['power'] = value2[3];
                });
                console.log('index',index)
                coinsList.push([index, coinArray]);
                coinsHashratesList.push([index, coinHashrateArray]);
                coinsEfficiencyList.push([index, coinEfficiencyArray]);
                coinsConsumptionList.push([index, coinWattArray]);
            }
        });

        console.log('coinsHashratesList',coinsHashratesList)
        console.log('coinsDataAll',coinsDataAll)
        console.log('coinsEfficiencyList',coinsEfficiencyList)
        console.log('coinsConsumptionList',coinsConsumptionList)
        $.each(coinConsumptionArrayObj, function (timestamp, powerCon) {
            coinConsumptionArray.push([parseInt(timestamp), powerCon]);
        });
        var colors = [];
        if (colorString.length > 0) {
            colorString = colorString.substr(0, colorString.length - 1);
        }
        $.getJSON('/v2/colors.php?coins=' + colorString, function (data) {
            colors = data;
            var counter = 0;
            var show = false;
            for (var i = 0; i < coinsList.length; i++) {
                console.log('coinsList',coinsList)
                globalProfitabilitySeriesArray.push({
                    type: 'column',
                    name: coinsList[i][0] + ' ' + _('profitability'),
                    data: coinsList[i][1],
                    tooltip: {valueDecimals: 4, valueSuffix: currency + '/' + _('day'), pointFormat: coinsList[i][0]},
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    navigatorOptions: {fillColor: 'rgba(255,255,255,0)', fillOpacity: 0},
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    showInNavigator: true,
                    dataGrouping: {approximation: "average", enabled: false, forced: false},
                    fillOpacity: 0.8,
                    fillColor: {
                        linearGradient: [0, 100, 0, 0],
                        stops: [[0, Highcharts.Color(colors[getIcon(coinsList[i][0]).toUpperCase()]).setOpacity(0).get('rgba')], [1, Highcharts.Color(colors[getIcon(coinsList[i][0]).toUpperCase()]).setOpacity(0.8).get('rgba')]]
                    },
                    maxPointWidth: 5,
                    color: Highcharts.Color(colors[getIcon(coinsList[i][0]).toUpperCase()]).setOpacity(0.8).get('rgba')
                });
            }
            var coinsHashratesYindex = 0;
            for (var i = 0; i < coinsHashratesList.length; i++) {
                coinsHashrateSeriesArray.push({
                    name: coinsHashratesList[i][0] + ' ' + _('hashrate'),
                    data: coinsHashratesList[i][1],
                    yAxis: coinsHashratesYindex,
                    tooltip: {
                        valueDecimals: 4,
                        valueSuffix: coinsUnits[coinsHashratesList[i][0]] + '/s',
                        pointFormat: coinsHashratesList[i][0]
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    navigatorOptions: {fillColor: 'rgba(255,255,255,0)', fillOpacity: 0},
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    showInNavigator: true,
                    dataGrouping: {approximation: "average", enabled: false, forced: false},
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 100, 0, 0],
                        stops: [[0, Highcharts.Color(colors[getIcon(coinsHashratesList[i][0]).toUpperCase()]).setOpacity(0).get('rgba')], [1, Highcharts.Color(colors[getIcon(coinsHashratesList[i][0]).toUpperCase()]).setOpacity(0.5).get('rgba')]]
                    },
                    color: colors[getIcon(coinsHashratesList[i][0]).toUpperCase()]
                });
                coinsHashratesYindex++;
            }
            for (var i = 0; i < coinsConsumptionList.length; i++) {
                coinsConsumptionSeriesArray.push({
                    name: coinsConsumptionList[i][0] + ' ' + _('consumption'),
                    data: coinsConsumptionList[i][1],
                    tooltip: {valueDecimals: 0, valueSuffix: 'W', pointFormat: coinsHashratesList[i][0]},
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    navigatorOptions: {fillColor: 'rgba(255,255,255,0)', fillOpacity: 0},
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    showInNavigator: true,
                    dataGrouping: {approximation: "average", enabled: false, forced: false},
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 100, 0, 0],
                        stops: [[0, Highcharts.Color(colors[getIcon(coinsConsumptionList[i][0]).toUpperCase()]).setOpacity(0).get('rgba')], [1, Highcharts.Color(colors[getIcon(coinsConsumptionList[i][0]).toUpperCase()]).setOpacity(0.5).get('rgba')]]
                    },
                    color: colors[getIcon(coinsConsumptionList[i][0]).toUpperCase()]
                });
            }
            var coinsEfficiencyYindex = 0;
            for (var i = 0; i < coinsEfficiencyList.length; i++) {
                coinsEfficiencySeriesArray.push({
                    name: coinsEfficiencyList[i][0] + ' ' + _('efficiency'),
                    data: coinsEfficiencyList[i][1],
                    yAxis: coinsEfficiencyYindex,
                    tooltip: {
                        valueDecimals: 4,
                        valueSuffix: coinsUnits[coinsEfficiencyList[i][0]] + '/W',
                        pointFormat: coinsEfficiencyList[i][0]
                    },
                    marker: {
                        enabled: false,
                        symbol: 'circle',
                        lineColor: 'rgba(255,255,255,0)',
                        lineWidth: 0,
                        states: {hover: {lineWidth: 0}}
                    },
                    navigatorOptions: {fillColor: 'rgba(255,255,255,0)', fillOpacity: 0},
                    states: {
                        hover: {
                            enabled: true,
                            lineWidth: 2,
                            marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                        }
                    },
                    showInNavigator: true,
                    dataGrouping: {approximation: "average", enabled: false, forced: false},
                    fillOpacity: 1,
                    fillColor: {
                        linearGradient: [0, 100, 0, 0],
                        stops: [[0, Highcharts.Color(colors[getIcon(coinsEfficiencyList[i][0]).toUpperCase()]).setOpacity(0).get('rgba')], [1, Highcharts.Color(colors[getIcon(coinsEfficiencyList[i][0]).toUpperCase()]).setOpacity(0.5).get('rgba')]]
                    },
                    color: colors[getIcon(coinsEfficiencyList[i][0]).toUpperCase()]
                });
                coinsEfficiencyYindex++;
            }
            var buttonsArray = [{type: 'hour', count: 3, text: '3h'}, {
                type: 'hour',
                count: 12,
                text: '12h'
            }, {type: 'hour', count: 24, text: '1d'}, {type: 'all', text: _('All')}];
            if (plan == 2) {
                buttonsArray = [{type: 'hour', count: 3, text: '3h'}, {
                    type: 'hour',
                    count: 12,
                    text: '12h'
                }, {type: 'hour', count: 24, text: '1d'}, {type: 'day', count: 3, text: '3d'}, {
                    type: 'day',
                    count: 7,
                    text: '7d'
                }, {type: 'all', text: _('All')}];
            } else if (plan == 1) {
                buttonsArray = [{type: 'hour', count: 3, text: '3h'}, {
                    type: 'hour',
                    count: 12,
                    text: '12h'
                }, {type: 'hour', count: 24, text: '1d'}, {type: 'day', count: 3, text: '3d'}, {
                    type: 'all',
                    text: _('All')
                }];
            }
            $('#global-profitability').highcharts({
                series: globalProfitabilitySeriesArray,
                chart: {
                    animation: false,
                    alignTicks: false,
                    type: 'areaspline',
                    events: {
                        redraw: function () {
                            var chart = this;
                            var zoomText = chart.rangeSelector.zoomText.element;
                            $(zoomText).attr({y: 17, x: 0})
                            $.each(chart.rangeSelector.buttons, function (i, button) {
                                var textStr = button.element.childNodes[1];
                                $(textStr).attr({y: 17});
                            });
                        }
                    },
                    states: {hover: {enabled: true, lineWidth: 2, marker: {enabled: false, lineWidth: 0}}},
                    marginTop: selectorTop,
                    alignTicks: false,
                    backgroundColor: null
                },
                boost: {useGPUTranslations: true},
                title: {
                    text: _mx('Global profitability'),
                    align: 'left',
                    style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
                    y: 10
                },
                legend: {
                    itemMarginTop: 10,
                    itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor}
                },
                xAxis: {
                    type: 'datetime',
                    labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
                    lineColor: borderColor,
                    tickColor: borderColor
                },
                yAxis: [{
                    title: {text: ''},
                    minorGridLineWidth: 0,
                    gridLineWidth: 1,
                    gridLineColor: borderLightColor,
                    gridColor: borderColor,
                    alternateGridColor: null,
                    labels: {
                        align: 'left',
                        x: 0,
                        y: -5,
                        style: {color: titleColor, fontSize: smallSize},
                        formatter: function () {
                            var label = this.axis.defaultLabelFormatter.call(this);
                            return label;
                        }
                    },
                    tickAmount: 5,
                    allowDecimals: false
                }],
                tooltip: {
                    borderRadius: 6,
                    borderWidth: 0,
                    padding: 0,
                    shadow: false,
                    useHTML: true,
                    backgroundColor: tooltipBackgroundColor,
                    formatter: function () {
                        var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
                        var points = this.points;
                        style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
                        for (var i = 0; i < points.length; i++) {
                            if (i == 2) {
                                style += '<div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
                            }
                            if (this.points[i].y > 0) {
                                style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + ((this.points[i].y).toFixed(2)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + this.points[i].series.name + '</div>';
                            }
                        }
                        style += '</div>';
                        return style;
                    },
                    shared: true
                },
                plotOptions: {
                    areaspline: {
                        lineWidth: 2,
                        states: {hover: {lineWidth: 2}},
                        series: {fillOpacity: 1},
                        marker: {radius: 3, enabled: false, lineColor: null}
                    },
                    column: {
                        stacking: 'normal',
                        dataLabels: {enabled: false},
                        lineWidth: 2,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            lineColor: 'rgba(255,255,255,0)',
                            lineWidth: 0,
                            states: {hover: {lineWidth: 0}}
                        },
                        states: {
                            hover: {
                                enabled: true,
                                lineWidth: 2,
                                marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                            }
                        },
                        fillColor: 'rgba(255,255,255,0)',
                        fillOpacity: 0,
                        maxPointWidth: 5,
                        borderColor: columnBorderColor
                    }
                },
                navigator: {
                    enabled: true,
                    outlineColor: navigatorBorder,
                    outlineWidth: 1,
                    height: 40,
                    maskFill: navigatorFill,
                    handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
                    series: {fillOpacity: 1},
                    xAxis: {
                        lineColor: navigatorBorder,
                        lineWidth: 2,
                        gridLineColor: navigatorBorder,
                        labels: {style: {color: titleColor}}
                    }
                },
                rangeSelector: {
                    enabled: true,
                    inputEnabled: false,
                    x: 0,
                    y: 0,
                    verticalAlign: 'top',
                    buttonPosition: {align: 'right', x: 0, y: -65},
                    buttons: buttonsArray,
                    selected: 2,
                    buttonTheme: {
                        fill: 'none',
                        stroke: 'none',
                        'stroke-width': 0,
                        r: 3,
                        width: 25,
                        padding: 4,
                        style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
                        states: {
                            hover: {
                                fill: buttonFillHover,
                                style: {color: buttonColorHover, fontWeight: fontWeightBold}
                            },
                            select: {
                                fill: buttonSelectedFill,
                                style: {color: buttonSelectedColor, fontWeight: fontWeightBold}
                            },
                            disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
                        }
                    },
                    labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize}
                },
                navigation: {menuItemStyle: {fontSize: '10px'}},
                responsive: {
                    rules: [{
                        condition: {maxWidth: 600},
                        chartOptions: {title: {style: {"color": "#ffffff"}}}
                    }]
                },
                credits: {enabled: false}
            });
            var coinsHashratesYaxes = [];
            coinsHashratesYaxes.push({
                title: {text: ''},
                minorGridLineWidth: 0,
                gridLineWidth: 1,
                gridLineColor: borderLightColor,
                gridColor: borderColor,
                alternateGridColor: null,
                labels: {enabled: false},
                tickAmount: 5,
                min: 0,
                allowDecimals: true
            });
            for (var i = 0; i < coinsHashratesYindex - 1; i++) {
                coinsHashratesYaxes.push({tickAmount: 5, min: 0, visible: false, allowDecimals: true});
            }
            $('#coin-hashrate').highcharts({
                series: coinsHashrateSeriesArray,
                chart: {
                    animation: false, alignTicks: false, type: 'areaspline', events: {
                        redraw: function () {
                            var chart = this;
                            var zoomText = chart.rangeSelector.zoomText.element;
                            $(zoomText).attr({y: 17, x: 0})
                            $.each(chart.rangeSelector.buttons, function (i, button) {
                                var textStr = button.element.childNodes[1];
                                $(textStr).attr({y: 17});
                            });
                        }
                    }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
                },
                boost: {useGPUTranslations: true},
                title: {
                    text: _mx('Hashrate per coin'),
                    align: 'left',
                    style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
                    y: 10
                },
                legend: {
                    itemMarginTop: 10,
                    maxHeight: legendHeight,
                    itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
                    navigation: {
                        activeColor: legendNavigationActiveColor,
                        inactiveColor: legendNavigationInactiveColor,
                        arrowSize: 10,
                        style: {
                            "color": legendColor,
                            "fontWeight": legendNavigationWeight,
                            "fontSize": legendNavigationSize
                        }
                    }
                },
                xAxis: {
                    type: 'datetime',
                    labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
                    lineColor: borderColor,
                    tickColor: borderColor
                },
                yAxis: coinsHashratesYaxes,
                tooltip: {
                    borderRadius: 6,
                    borderWidth: 0,
                    padding: 0,
                    shadow: false,
                    useHTML: true,
                    backgroundColor: tooltipBackgroundColor,
                    formatter: function () {
                        var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
                        var points = this.points;
                        style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
                        var countMining = 0;
                        for (var i = 0; i < points.length; i++) {
                            var coin = points[i].series.tooltipOptions.pointFormat;
                            if (coin != 'W') {
                                var cryptoData;
                                for (var j = 0; j < coinsHashratesList.length; j++) {
                                    if (coin == coinsHashratesList[j][0]) {
                                        cryptoData = coinsHashratesList[j][1];
                                        break;
                                    }
                                }
                                var find = points[i].x;
                                var wattConsumption = '';
                                var efficiency = 0;
                                var hashrate = 0;
                                var hashrateUnit = 'H';
                                var textAddOn = '';
                                if (typeof coinsDataAll[parseInt(this.points[0].x)] != 'undefined' && typeof coinsDataAll[parseInt(this.points[0].x)][coin] != 'undefined') {
                                    wattConsumption = coinsDataAll[parseInt(this.points[0].x)][coin]['power'];
                                    hashrate = coinsDataAll[parseInt(this.points[0].x)][coin]['hashrate'];
                                    hashrateUnit = coinsDataAll[parseInt(this.points[0].x)][coin]['unit'];
                                }
                                if (wattConsumption > 0) {
                                    efficiency = (hashrate / wattConsumption).toFixed(4);
                                    efficiency = efficiency + ' ' + hashrateUnit + '/W';
                                    textAddOn = ' - ' + efficiency + ' @ ' + wattConsumption + 'W';
                                    console.log('efficiency',efficiency);
                                    console.log('hashrate',hashrate);
                                    console.log('hashrateUnit',hashrateUnit);
                                }
                                if (this.points[i].y > 0) {
                                    style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + (((this.points[i].y)).toFixed(2)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + coin + textAddOn + '</div>';
                                    countMining++;
                                }
                            } else {
                                style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + powerConsumptionColor + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + wattOutput(this.points[i].y) + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('Power consumption') + '</div>';
                                countMining++;
                            }
                        }
                        if (countMining == 0) {
                            style += '<div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('No data') + '</div>';
                        }
                        style += '</div>';
                        console.log('style',style)
                        return style;
                    },
                    shared: true
                },
                plotOptions: {
                    areaspline: {
                        lineWidth: 2,
                        states: {hover: {lineWidth: 2}},
                        marker: {radius: 3, enabled: false, lineColor: null}
                    }
                },
                navigator: {
                    enabled: true,
                    outlineColor: navigatorBorder,
                    outlineWidth: 1,
                    height: 40,
                    maskFill: navigatorFill,
                    handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
                    series: {fillOpacity: 0.05},
                    xAxis: {
                        lineColor: navigatorBorder,
                        lineWidth: 1,
                        gridLineColor: navigatorBorder,
                        labels: {style: {color: titleColor}}
                    }
                },
                rangeSelector: {
                    enabled: true,
                    inputEnabled: false,
                    x: 0,
                    y: 0,
                    verticalAlign: 'top',
                    buttonPosition: {align: 'right', x: 0, y: -65},
                    buttons: buttonsArray,
                    selected: 2,
                    buttonTheme: {
                        fill: 'none',
                        stroke: 'none',
                        'stroke-width': 0,
                        r: 3,
                        width: 25,
                        padding: 4,
                        style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
                        states: {
                            hover: {
                                fill: buttonFillHover,
                                style: {color: buttonColorHover, fontWeight: fontWeightBold}
                            },
                            select: {
                                fill: buttonSelectedFill,
                                style: {color: buttonSelectedColor, fontWeight: fontWeightBold}
                            },
                            disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
                        }
                    },
                    labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize}
                },
                navigation: {menuItemStyle: {fontSize: '10px'}},
                responsive: {
                    rules: [{
                        condition: {maxWidth: 600},
                        chartOptions: {title: {style: {"color": "#ffffff"}}}
                    }]
                },
                credits: {enabled: false}
            });
            $('#coin-power').highcharts({
                series: coinsConsumptionSeriesArray,
                chart: {
                    animation: false, alignTicks: false, type: 'column', events: {
                        redraw: function () {
                            var chart = this;
                            var zoomText = chart.rangeSelector.zoomText.element;
                            $(zoomText).attr({y: 17, x: 0})
                            $.each(chart.rangeSelector.buttons, function (i, button) {
                                var textStr = button.element.childNodes[1];
                                $(textStr).attr({y: 17});
                            });
                        }
                    }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
                },
                boost: {useGPUTranslations: true},
                title: {
                    text: _mx('Power consumption per coin'),
                    align: 'left',
                    style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
                    y: 10
                },
                legend: {
                    itemMarginTop: 10,
                    maxHeight: legendHeight,
                    itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
                    navigation: {
                        activeColor: legendNavigationActiveColor,
                        inactiveColor: legendNavigationInactiveColor,
                        arrowSize: 10,
                        style: {
                            "color": legendColor,
                            "fontWeight": legendNavigationWeight,
                            "fontSize": legendNavigationSize
                        }
                    }
                },
                xAxis: {
                    type: 'datetime',
                    labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
                    lineColor: borderColor,
                    tickColor: borderColor
                },
                yAxis: [{
                    title: {text: ''},
                    minorGridLineWidth: 0,
                    gridLineWidth: 1,
                    gridLineColor: borderLightColor,
                    gridColor: borderColor,
                    alternateGridColor: null,
                    labels: {
                        align: 'left',
                        x: 0,
                        y: -5,
                        style: {color: titleColor, fontSize: smallSize},
                        formatter: function () {
                            var label = this.axis.defaultLabelFormatter.call(this);
                            return label;
                        }
                    },
                    tickAmount: 5,
                    allowDecimals: false
                }],
                tooltip: {
                    borderRadius: 6,
                    borderWidth: 0,
                    padding: 0,
                    shadow: false,
                    useHTML: true,
                    backgroundColor: tooltipBackgroundColor,
                    formatter: function () {
                        var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
                        var points = this.points;
                        style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
                        var countMining = 0;
                        for (var i = 0; i < points.length; i++) {
                            var coin = points[i].series.tooltipOptions.pointFormat;
                            var efficiency = 0;
                            var hashrate = 0;
                            var hashrateUnit = 'H';
                            var textAddOn = '';
                            if (typeof coinsDataAll[parseInt(this.points[0].x)] != 'undefined' && typeof coinsDataAll[parseInt(this.points[0].x)][coin] != 'undefined') {
                                hashrate = coinsDataAll[parseInt(this.points[0].x)][coin]['hashrate'];
                                hashrateUnit = coinsDataAll[parseInt(this.points[0].x)][coin]['unit'];
                            }
                            if (hashrate > 0) {
                                efficiency = (hashrate / this.points[i].y).toFixed(4);
                                efficiency = efficiency + ' ' + hashrateUnit + '/W';
                                textAddOn = ' - ' + efficiency + ' @ ' + hashrate + ' ' + hashrateUnit + '/s'
                            }
                            if (this.points[i].y > 0) {
                                style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + wattOutput(this.points[i].y) + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + coin + textAddOn + '</div>';
                                countMining++;
                            }
                        }
                        if (countMining == 0) {
                            style += '<div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('No data') + '</div>';
                        }
                        style += '</div>';
                        return style;
                    },
                    shared: true
                },
                plotOptions: {
                    column: {
                        stacking: 'normal',
                        dataLabels: {enabled: false},
                        lineWidth: 2,
                        marker: {
                            enabled: false,
                            symbol: 'circle',
                            lineColor: 'rgba(255,255,255,0)',
                            lineWidth: 0,
                            states: {hover: {lineWidth: 0}}
                        },
                        states: {
                            hover: {
                                enabled: true,
                                lineWidth: 2,
                                marker: {lineWidth: 0, lineColor: 'rgba(255,255,255,0)', symbol: 'circle'}
                            }
                        },
                        fillColor: 'rgba(255,255,255,0)',
                        fillOpacity: 0,
                        maxPointWidth: 5,
                        borderColor: columnBorderColor
                    }
                },
                navigator: {
                    enabled: true,
                    outlineColor: navigatorBorder,
                    outlineWidth: 1,
                    height: 40,
                    maskFill: navigatorFill,
                    handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
                    series: {fillOpacity: 0.05},
                    xAxis: {
                        lineColor: navigatorBorder,
                        lineWidth: 1,
                        gridLineColor: navigatorBorder,
                        labels: {style: {color: titleColor}}
                    }
                },
                rangeSelector: {
                    enabled: true,
                    inputEnabled: false,
                    x: 0,
                    y: 0,
                    verticalAlign: 'top',
                    buttonPosition: {align: 'right', x: 0, y: -65},
                    buttons: buttonsArray,
                    selected: 2,
                    buttonTheme: {
                        fill: 'none',
                        stroke: 'none',
                        'stroke-width': 0,
                        r: 3,
                        width: 25,
                        padding: 4,
                        style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
                        states: {
                            hover: {
                                fill: buttonFillHover,
                                style: {color: buttonColorHover, fontWeight: fontWeightBold}
                            },
                            select: {
                                fill: buttonSelectedFill,
                                style: {color: buttonSelectedColor, fontWeight: fontWeightBold}
                            },
                            disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
                        }
                    },
                    labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize}
                },
                navigation: {menuItemStyle: {fontSize: '10px'}},
                responsive: {
                    rules: [{
                        condition: {maxWidth: 600},
                        chartOptions: {title: {style: {"color": "#ffffff"}}}
                    }]
                },
                credits: {enabled: false}
            });
            var coinsEfficiencyYaxes = [];
            coinsEfficiencyYaxes.push({
                title: {text: ''},
                minorGridLineWidth: 0,
                gridLineWidth: 1,
                gridLineColor: borderLightColor,
                gridColor: borderColor,
                alternateGridColor: null,
                labels: {enabled: false},
                tickAmount: 5,
                min: 0,
                allowDecimals: true
            });
            for (var i = 0; i < coinsEfficiencyYindex - 1; i++) {
                coinsEfficiencyYaxes.push({allowDecimals: true, tickAmount: 5, min: 0, visible: false});
            }
            $('#coin-efficiency').highcharts({
                series: coinsEfficiencySeriesArray,
                chart: {
                    animation: false, alignTicks: false, type: 'areaspline', events: {
                        redraw: function () {
                            var chart = this;
                            var zoomText = chart.rangeSelector.zoomText.element;
                            $(zoomText).attr({y: 17, x: 0})
                            $.each(chart.rangeSelector.buttons, function (i, button) {
                                var textStr = button.element.childNodes[1];
                                $(textStr).attr({y: 17});
                            });
                        }
                    }, marginTop: selectorTop, alignTicks: false, backgroundColor: null
                },
                boost: {useGPUTranslations: true},
                title: {
                    text: _mx('Power efficiency per coin'),
                    align: 'left',
                    style: {"color": chartTitle, "fontSize": titleSize, "fontWeight": fontWeightLight},
                    y: 10
                },
                legend: {
                    itemMarginTop: 10,
                    maxHeight: legendHeight,
                    itemStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHoverStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendColor},
                    itemHiddenStyle: {fontSize: smallSize, fontWeight: fontWeightBold, color: legendHiddenColor},
                    navigation: {
                        activeColor: legendNavigationActiveColor,
                        inactiveColor: legendNavigationInactiveColor,
                        arrowSize: 10,
                        style: {
                            "color": legendColor,
                            "fontWeight": legendNavigationWeight,
                            "fontSize": legendNavigationSize
                        }
                    }
                },
                xAxis: {
                    type: 'datetime',
                    labels: {overflow: 'justify', style: {color: titleColor, fontSize: smallSize}},
                    lineColor: borderColor,
                    tickColor: borderColor
                },
                yAxis: coinsEfficiencyYaxes,
                tooltip: {
                    borderRadius: 6,
                    borderWidth: 0,
                    padding: 0,
                    shadow: false,
                    useHTML: true,
                    backgroundColor: tooltipBackgroundColor,
                    formatter: function () {
                        var style = '<div style="border:1px solid ' + tooltipBorderColor + ';background:' + tooltipBackgroundColor + ';box-shadow:' + tooltipBoxShadow + ';border-radius:3px;padding:16px 16px 2px 16px;line-height:1;font-family:\'Mukta Mahee\', sans-serif;width:auto;">';
                        var points = this.points;
                        style += '<div style="margin:0;padding:0 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + Highcharts.dateFormat('%e', new Date(this.points[0].x)) + ' ' + _(Highcharts.dateFormat('%b', new Date(this.points[0].x))) + ' ' + Highcharts.dateFormat('%Y %H:%M', new Date(this.points[0].x)) + '</div><div style="width:20px;border-top:1px solid ' + borderColor + ';margin:0 0 10px 0;"></div>';
                        var countMining = 0;
                        for (var i = 0; i < points.length; i++) {
                            var coin = points[i].series.tooltipOptions.pointFormat;
                            if (coin != 'W') {
                                var cryptoData;
                                for (var j = 0; j < coinsHashratesList.length; j++) {
                                    if (coin == coinsHashratesList[j][0]) {
                                        cryptoData = coinsHashratesList[j][1];
                                        break;
                                    }
                                }
                                var find = points[i].x;
                                var wattConsumption = '';
                                var hashrate = '';
                                var textAddOn = '';
                                if (typeof coinsDataAll[parseInt(this.points[0].x)] != 'undefined' && typeof coinsDataAll[parseInt(this.points[0].x)][coin] != 'undefined') {
                                    hashrate = coinsDataAll[parseInt(this.points[0].x)][coin]['hashrate'] + ' ' + coinsDataAll[parseInt(this.points[0].x)][coin]['unit'];
                                    wattConsumption = wattOutput(coinsDataAll[parseInt(this.points[0].x)][coin]['power'].toFixed(0));
                                    textAddOn = ' - ' + hashrate + '/s @ ' + wattConsumption;
                                }
                                if (this.points[i].y > 0) {
                                    style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + this.points[i].color + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + (((this.points[i].y)).toFixed(4)) + ' ' + this.points[i].series.tooltipOptions.valueSuffix + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + coin + textAddOn + '</div>';
                                    countMining++;
                                }
                            } else {
                                style += '<div style="margin:0;padding:0;font-weight:' + fontWeightBold + ';color:' + tooltipDarkerColor + ';font-size:' + tooltipHeaderFontSize + ';line-height:1;"><div style="background:' + powerConsumptionColor + ';width:20px;height:4px;border-radius:5px;display:inline-table;margin:-3px 8px 0 0;"></div>' + wattOutput(this.points[i].y) + '</div><div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('Power consumption') + '</div>';
                                countMining++;
                            }
                        }
                        if (countMining == 0) {
                            style += '<div style="margin:0;padding:2px 0 10px 0;line-height:1;font-size:' + smallSize + ';color:' + tooltipDateColor + ';font-weight:' + fontWeightLight + ';">' + _('No data') + '</div>';
                        }
                        style += '</div>';
                        return style;
                    },
                    shared: true
                },
                plotOptions: {
                    areaspline: {
                        lineWidth: 2,
                        states: {hover: {lineWidth: 2}},
                        marker: {radius: 3, enabled: false, lineColor: null}
                    }
                },
                navigator: {
                    enabled: true,
                    outlineColor: navigatorBorder,
                    outlineWidth: 1,
                    height: 40,
                    maskFill: navigatorFill,
                    handles: {backgroundColor: navigatorBackground, borderColor: navigatorHandles},
                    series: {fillOpacity: 0.05},
                    xAxis: {
                        lineColor: navigatorBorder,
                        lineWidth: 1,
                        gridLineColor: navigatorBorder,
                        labels: {style: {color: titleColor}}
                    }
                },
                rangeSelector: {
                    enabled: true,
                    inputEnabled: false,
                    x: 0,
                    y: 0,
                    verticalAlign: 'top',
                    buttonPosition: {align: 'right', x: 0, y: -65},
                    buttons: buttonsArray,
                    selected: 2,
                    buttonTheme: {
                        fill: 'none',
                        stroke: 'none',
                        'stroke-width': 0,
                        r: 3,
                        width: 25,
                        padding: 4,
                        style: {color: buttonColor, fontWeight: 'regular', fontSize: smallSize},
                        states: {
                            hover: {
                                fill: buttonFillHover,
                                style: {color: buttonColorHover, fontWeight: fontWeightBold}
                            },
                            select: {
                                fill: buttonSelectedFill,
                                style: {color: buttonSelectedColor, fontWeight: fontWeightBold}
                            },
                            disabled: {fill: buttonDisabledFill, style: {color: buttonDisabledColor}}
                        }
                    },
                    labelStyle: {color: titleColor, fontWeight: fontWeightBold, fontSize: smallSize}
                },
                navigation: {menuItemStyle: {fontSize: '10px'}},
                responsive: {
                    rules: [{
                        condition: {maxWidth: 600},
                        chartOptions: {title: {style: {"color": "#ffffff"}}}
                    }]
                },
                credits: {enabled: false}
            });
            var coinsDataTodayRaw = {};
            var todayUptimeSum = 0;
            var todayUptimeCount = 0;
            var todayPowerSum = 0;
            var todayPowerCount = 0;
            var coinsDataYesterdayRaw = {};
            var yesterdayUptimeSum = 0;
            var yesterdayUptimeCount = 0;
            var yesterdayPowerSum = 0;
            var yesterdayPowerCount = 0;
            var coinsDataDay3Raw = {};
            var day3UptimeSum = 0;
            var day3UptimeCount = 0;
            var day3PowerSum = 0;
            var day3PowerCount = 0;
            var coinsDataWeekRaw = {};
            var weekUptimeSum = 0;
            var weekUptimeCount = 0;
            var weekPowerSum = 0;
            var weekPowerCount = 0;
            var coinsDataThisMonthRaw = {};
            var thisMonthUptimeSum = 0;
            var thisMonthUptimeCount = 0;
            var thisMonthPowerSum = 0;
            var thisMonthPowerCount = 0;
            var coinsDataMonthRaw = {};
            var monthUptimeSum = 0;
            var monthUptimeCount = 0;
            var monthPowerSum = 0;
            var monthPowerCount = 0;
            var now = Math.round((new Date()).getTime() / 1000) + workerOffset * 60 * 60;
            var d = new Date(now * 1000);
            var day = d.getUTCDate();
            $.each(coinsDataAll, function (timestamp, timestampData) {
                var hashTemp = 0;
                var powerTemp = 0;
                $.each(timestampData, function (coin, coinsData) {
                    var hashrate = coinsData['hashrate'];
                    var unit = coinsData['unit'];
                    var power = coinsData['power'];
                    if (powerTemp == 0) {
                        powerTemp = power;
                    }
                    if (hashrate > 0) {
                        hashTemp = 1;
                        if ((timestamp / 1000) >= now - now % (24 * 60 * 60)) {
                            if (coinsDataTodayRaw[coin] == null) {
                                coinsDataTodayRaw[coin] = {};
                                coinsDataTodayRaw[coin]['hashrate'] = 0;
                                coinsDataTodayRaw[coin]['unit'] = '';
                                coinsDataTodayRaw[coin]['power'] = 0;
                                coinsDataTodayRaw[coin]['count'] = 0;
                            }
                            coinsDataTodayRaw[coin]['hashrate'] += hashrate;
                            coinsDataTodayRaw[coin]['unit'] = unit;
                            coinsDataTodayRaw[coin]['power'] += power;
                            coinsDataTodayRaw[coin]['count'] += 1;
                        }
                        if ((timestamp / 1000) >= (now - now % (24 * 60 * 60)) - 24 * 60 * 60 && (timestamp / 1000) < (now - now % (24 * 60 * 60))) {
                            if (coinsDataYesterdayRaw[coin] == null) {
                                coinsDataYesterdayRaw[coin] = {};
                                coinsDataYesterdayRaw[coin]['hashrate'] = 0;
                                coinsDataYesterdayRaw[coin]['unit'] = '';
                                coinsDataYesterdayRaw[coin]['power'] = 0;
                                coinsDataYesterdayRaw[coin]['count'] = 0;
                            }
                            coinsDataYesterdayRaw[coin]['hashrate'] += hashrate;
                            coinsDataYesterdayRaw[coin]['unit'] = unit;
                            coinsDataYesterdayRaw[coin]['power'] += power;
                            coinsDataYesterdayRaw[coin]['count'] += 1;
                        }
                        if ((timestamp / 1000) >= now - 7 * 24 * 60 * 60) {
                            if (coinsDataDay3Raw[coin] == null) {
                                coinsDataDay3Raw[coin] = {};
                                coinsDataDay3Raw[coin]['hashrate'] = 0;
                                coinsDataDay3Raw[coin]['unit'] = '';
                                coinsDataDay3Raw[coin]['power'] = 0;
                                coinsDataDay3Raw[coin]['count'] = 0;
                            }
                            coinsDataDay3Raw[coin]['hashrate'] += hashrate;
                            coinsDataDay3Raw[coin]['unit'] = unit;
                            coinsDataDay3Raw[coin]['power'] += power;
                            coinsDataDay3Raw[coin]['count'] += 1;
                        }
                        if ((timestamp / 1000) >= now - 7 * 24 * 60 * 60) {
                            if (coinsDataWeekRaw[coin] == null) {
                                coinsDataWeekRaw[coin] = {};
                                coinsDataWeekRaw[coin]['hashrate'] = 0;
                                coinsDataWeekRaw[coin]['unit'] = '';
                                coinsDataWeekRaw[coin]['power'] = 0;
                                coinsDataWeekRaw[coin]['count'] = 0;
                            }
                            coinsDataWeekRaw[coin]['hashrate'] += hashrate;
                            coinsDataWeekRaw[coin]['unit'] = unit;
                            coinsDataWeekRaw[coin]['power'] += power;
                            coinsDataWeekRaw[coin]['count'] += 1;
                        }
                        if ((timestamp / 1000) >= now - day * 24 * 60 * 60) {
                            if (coinsDataThisMonthRaw[coin] == null) {
                                coinsDataThisMonthRaw[coin] = {};
                                coinsDataThisMonthRaw[coin]['hashrate'] = 0;
                                coinsDataThisMonthRaw[coin]['unit'] = '';
                                coinsDataThisMonthRaw[coin]['power'] = 0;
                                coinsDataThisMonthRaw[coin]['count'] = 0;
                            }
                            coinsDataThisMonthRaw[coin]['hashrate'] += hashrate;
                            coinsDataThisMonthRaw[coin]['unit'] = unit;
                            coinsDataThisMonthRaw[coin]['power'] += power;
                            coinsDataThisMonthRaw[coin]['count'] += 1;
                        }
                        if ((timestamp / 1000) >= now - 30 * 24 * 60 * 60) {
                            if (coinsDataMonthRaw[coin] == null) {
                                coinsDataMonthRaw[coin] = {};
                                coinsDataMonthRaw[coin]['hashrate'] = 0;
                                coinsDataMonthRaw[coin]['unit'] = '';
                                coinsDataMonthRaw[coin]['power'] = 0;
                                coinsDataMonthRaw[coin]['count'] = 0;
                            }
                            coinsDataMonthRaw[coin]['hashrate'] += hashrate;
                            coinsDataMonthRaw[coin]['unit'] = unit;
                            coinsDataMonthRaw[coin]['power'] += power;
                            coinsDataMonthRaw[coin]['count'] += 1;
                        }
                    }
                });
                if ((timestamp / 1000) >= now - now % (24 * 60 * 60)) {
                    if (hashTemp != 0) {
                        todayUptimeSum++;
                    }
                    todayUptimeCount++;
                }
                if ((timestamp / 1000) >= (now - now % (24 * 60 * 60)) - 24 * 60 * 60 && (timestamp / 1000) < (now - now % (24 * 60 * 60))) {
                    if (hashTemp != 0) {
                        yesterdayUptimeSum++;
                    }
                    yesterdayUptimeCount++;
                }
                if ((timestamp / 1000) >= now - 7 * 24 * 60 * 60) {
                    if (hashTemp != 0) {
                        weekUptimeSum++;
                    }
                    weekUptimeCount++;
                }
                if ((timestamp / 1000) >= now - 3 * 24 * 60 * 60) {
                    if (hashTemp != 0) {
                        day3UptimeSum++;
                    }
                    day3UptimeCount++;
                }
                if ((timestamp / 1000) >= now - day * 24 * 60 * 60) {
                    if (hashTemp != 0) {
                        thisMonthUptimeSum++;
                    }
                    thisMonthUptimeCount++;
                }
                if ((timestamp / 1000) >= now - 30 * 24 * 60 * 60) {
                    if (hashTemp != 0) {
                        monthUptimeSum++;
                    }
                    monthUptimeCount++;
                }
            });
            var coinsDataToday = {};
            $.each(coinsDataTodayRaw, function (coin, coinsData) {
                if (coinsDataToday[coin] == null) {
                    coinsDataToday[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsDataToday[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsDataToday[coin]['unit'] = coinsData['unit'];
                    coinsDataToday[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsDataToday[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        todayPowerSum += coinsData['power'];
                        todayPowerCount += coinsData['count'];
                    }
                } else {
                    coinsDataToday[coin]['hashrate'] = 0;
                    coinsDataToday[coin]['unit'] = 'H/s';
                    coinsDataToday[coin]['power'] = 0;
                    coinsDataToday[coin]['count'] = 1;
                }
            });
            var coinsDataYesterday = {};
            $.each(coinsDataYesterdayRaw, function (coin, coinsData) {
                if (coinsDataYesterday[coin] == null) {
                    coinsDataYesterday[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsDataYesterday[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsDataYesterday[coin]['unit'] = coinsData['unit'];
                    coinsDataYesterday[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsDataYesterday[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        yesterdayPowerSum += coinsData['power'];
                        yesterdayPowerCount += coinsData['count'];
                    }
                } else {
                    coinsDataYesterday[coin]['hashrate'] = 0;
                    coinsDataYesterday[coin]['unit'] = 'H/s';
                    coinsDataYesterday[coin]['power'] = 0;
                    coinsDataYesterday[coin]['count'] = 1;
                }
            });
            var coinsData3Day = {};
            $.each(coinsDataDay3Raw, function (coin, coinsData) {
                if (coinsData3Day[coin] == null) {
                    coinsData3Day[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsData3Day[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsData3Day[coin]['unit'] = coinsData['unit'];
                    coinsData3Day[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsData3Day[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        day3PowerSum += coinsData['power'];
                        day3PowerCount += coinsData['count'];
                    }
                } else {
                    coinsData3Day[coin]['hashrate'] = 0;
                    coinsData3Day[coin]['unit'] = 'H/s';
                    coinsData3Day[coin]['power'] = 0;
                    coinsData3Day[coin]['count'] = 1;
                }
            });
            var coinsDataWeek = {};
            $.each(coinsDataWeekRaw, function (coin, coinsData) {
                if (coinsDataWeek[coin] == null) {
                    coinsDataWeek[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsDataWeek[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsDataWeek[coin]['unit'] = coinsData['unit'];
                    coinsDataWeek[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsDataWeek[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        weekPowerSum += coinsData['power'];
                        weekPowerCount += coinsData['count'];
                    }
                } else {
                    coinsDataWeek[coin]['hashrate'] = 0;
                    coinsDataWeek[coin]['unit'] = 'H/s';
                    coinsDataWeek[coin]['power'] = 0;
                    coinsDataWeek[coin]['count'] = 1;
                }
            });
            var coinsDataThisMonth = {};
            $.each(coinsDataThisMonthRaw, function (coin, coinsData) {
                if (coinsDataThisMonth[coin] == null) {
                    coinsDataThisMonth[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsDataThisMonth[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsDataThisMonth[coin]['unit'] = coinsData['unit'];
                    coinsDataThisMonth[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsDataThisMonth[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        thisMonthPowerSum += coinsData['power'];
                        thisMonthPowerCount += coinsData['count'];
                    }
                } else {
                    coinsDataThisMonth[coin]['hashrate'] = 0;
                    coinsDataThisMonth[coin]['unit'] = 'H/s';
                    coinsDataThisMonth[coin]['power'] = 0;
                    coinsDataThisMonth[coin]['count'] = 1;
                }
            });
            var coinsDataMonth = {};
            $.each(coinsDataMonthRaw, function (coin, coinsData) {
                if (coinsDataMonth[coin] == null) {
                    coinsDataMonth[coin] = {};
                }
                if (coinsData['count'] > 0) {
                    coinsDataMonth[coin]['hashrate'] = coinsData['hashrate'] / coinsData['count'];
                    coinsDataMonth[coin]['unit'] = coinsData['unit'];
                    coinsDataMonth[coin]['power'] = coinsData['power'] / coinsData['count'];
                    coinsDataMonth[coin]['count'] = coinsData['count'];
                    if (coinsData['power'] > 0) {
                        monthPowerSum += coinsData['power'];
                        monthPowerCount += coinsData['count'];
                    }
                } else {
                    coinsDataMonth[coin]['hashrate'] = 0;
                    coinsDataMonth[coin]['unit'] = 'H/s';
                    coinsDataMonth[coin]['power'] = 0;
                    coinsDataMonth[coin]['count'] = 1;
                }
            });
            var str = '';
            str = '';
            $.each(coinsDataToday, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / todayUptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateToday').html(str);
            str = '';
            $.each(coinsDataYesterday, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / yesterdayUptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateYesterday').html(str);
            str = '';
            $.each(coinsData3Day, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / day3UptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateLast3d').html(str);
            str = '';
            $.each(coinsDataWeek, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / weekUptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateLast7d').html(str);
            str = '';
            $.each(coinsDataThisMonth, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / thisMonthUptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateThisMonth').html(str);
            str = '';
            $.each(coinsDataMonth, function (coin, coinsData) {
                str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + coinsData['hashrate'].toFixed(2) + ' ' + coinsData['unit'] + '/s</div><div class="usd">' + (100 * coinsData['count'] / monthUptimeCount).toFixed(2) + '%</div></div>';
            });
            $('#topCoinsHashrateLast30d').html(str);
            str = '';
            $.each(coinsDataToday, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerToday').html(str);
            str = '';
            $.each(coinsDataYesterday, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerYesterday').html(str);
            str = '';
            $.each(coinsData3Day, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerLast3d').html(str);
            str = '';
            $.each(coinsDataWeek, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerLast7d').html(str);
            str = '';
            $.each(coinsDataThisMonth, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerThisMonth').html(str);
            str = '';
            $.each(coinsDataMonth, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + wattOutput(coinsData['power']) + '</div></div>';
                }
            });
            $('#topCoinsPowerLast30d').html(str);
            str = '';
            $.each(coinsDataToday, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyToday').html(str);
            str = '';
            $.each(coinsDataYesterday, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyYesterday').html(str);
            str = '';
            $.each(coinsData3Day, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyLast3d').html(str);
            str = '';
            $.each(coinsDataWeek, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyLast7d').html(str);
            str = '';
            $.each(coinsDataThisMonth, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyThisMonth').html(str);
            str = '';
            $.each(coinsDataMonth, function (coin, coinsData) {
                if (coinsData['power'] > 0) {
                    var efficiency = coinsData['hashrate'] / coinsData['power'];
                    str += '<div class="row"><div class="coin" data-tooltip="' + coin + '"><img width="16" height="16" onError="this.onerror=null;this.src=\'/32/no.png\';" style="margin-right:5px;" src="/32/' + getIcon(coin) + '.png">' + efficiency.toFixed(4) + ' ' + coinsData['unit'] + '/W</div></div>';
                }
            });
            $('#topCoinsEfficiencyLast30d').html(str);
            if (todayUptimeCount > 0) {
                $('#hashrateToday').html((100 * todayUptimeSum / todayUptimeCount).toFixed(2) + '%');
                $('#efficiencyToday').html((100 * todayUptimeSum / todayUptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrateToday').html('0%');
                $('#efficiencyToday').html('0%');
            }
            if (todayPowerCount > 0) {
                $('#powerToday').html(wattOutput(todayPowerSum / todayPowerCount));
            } else {
                $('#powerToday').html('0 W');
            }
            if (yesterdayUptimeCount > 0) {
                $('#hashrateYesterday').html((100 * yesterdayUptimeSum / yesterdayUptimeCount).toFixed(2) + '%');
                $('#efficiencyYesterday').html((100 * yesterdayUptimeSum / yesterdayUptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrateYesterday').html('0%');
                $('#efficiencyYesterday').html('0%');
            }
            if (yesterdayPowerCount > 0) {
                $('#powerYesterday').html(wattOutput(yesterdayPowerSum / yesterdayPowerCount));
            } else {
                $('#powerYesterday').html('0 W');
            }
            if (day3UptimeCount > 0) {
                $('#hashrate3d').html((100 * day3UptimeSum / day3UptimeCount).toFixed(2) + '%');
                $('#efficiency3d').html((100 * day3UptimeSum / day3UptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrate3d').html('0%');
                $('#efficiency3d').html('0%');
            }
            if (day3PowerCount > 0) {
                $('#power3d').html(wattOutput(day3PowerSum / day3PowerCount));
            } else {
                $('#power3d').html('0 W');
            }
            if (weekUptimeCount > 0) {
                $('#hashrate7d').html((100 * weekUptimeSum / weekUptimeCount).toFixed(2) + '%');
                $('#efficiency7d').html((100 * weekUptimeSum / weekUptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrate7d').html('0%');
                $('#efficiency7d').html('0%');
            }
            if (weekPowerCount > 0) {
                $('#power7d').html(wattOutput(weekPowerSum / weekPowerCount));
            } else {
                $('#power7d').html('0 W');
            }
            if (thisMonthUptimeCount > 0) {
                $('#hashrateThisMonth').html((100 * thisMonthUptimeSum / thisMonthUptimeCount).toFixed(2) + '%');
                $('#efficiencyThisMonth').html((100 * thisMonthUptimeSum / thisMonthUptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrateThisMonth').html('0%');
                $('#efficiencyThisMonth').html('0%');
            }
            if (thisMonthPowerCount > 0) {
                $('#powerThisMonth').html(wattOutput(thisMonthPowerSum / thisMonthPowerCount));
            } else {
                $('#powerThisMonth').html('0 W');
            }
            if (monthUptimeCount > 0) {
                $('#hashrate30d').html((100 * monthUptimeSum / monthUptimeCount).toFixed(2) + '%');
                $('#efficiency30d').html((100 * monthUptimeSum / monthUptimeCount).toFixed(2) + '%');
            } else {
                $('#hashrate30d').html('0%');
                $('#efficiency30d').html('0%');
            }
            if (monthPowerCount > 0) {
                $('#power30d').html(wattOutput(monthPowerSum / monthPowerCount));
            } else {
                $('#power30d').html('0 W');
            }
            preloaderHide();
        });
    }
}

fetchData(true);

function getDayTimestamp(aTimestamp) {
    return (aTimestamp - aTimestamp % (24 * 60 * 60));
}

function correctHashrate(unit, speed) {
    switch (unit) {
        case 'H':
            return speed;
            break;
        case 'KH':
            return speed / 1000;
            break;
        case 'MH':
            return speed / 1000000;
            break;
        case 'GH':
            return speed / 1000000000;
            break;
        case 'TH':
            return speed / 1000000000000;
            break;
        case 'PH':
            return speed / 1000000000000000;
            break;
        default:
            return speed;
            break;
    }
}

function wattOutput(watt) {
    var wattValue = watt;
    var wattUnit = ' W';
    if (wattValue / 1000 > 1) {
        wattValue /= 1000;
        wattUnit = ' kW';
        if (wattValue / 1000 > 1) {
            wattValue /= 1000;
            wattUnit = ' MW';
        }
    }
    wattValue = Math.round(wattValue * 1000) / 1000;
    return wattValue + wattUnit;
}